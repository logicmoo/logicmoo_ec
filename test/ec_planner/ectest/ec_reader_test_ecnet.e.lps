:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4647).
%~ From E:
%~ 
%~ :-( call_pel_directive( translate(unskipped,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e.lps')))
:-( call_pel_directive( translate(unskipped,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e.lps'))).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test.e',4647).
%~ From E:
%~ 
%~ :-( call_pel_directive( translate(begining,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e.lps')))
:-( call_pel_directive( translate(begining,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e.lps'))).
% Sat, 25 Sep 2021 13:19:04 GMT File: <stream>(0x55866d62cd00)%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/Root.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',18).
% sort boolean
%~ From E:
%~ 
%~ sort(boolean)
sort(boolean).

% sort integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',18).
%~ From E:
%~ 
%~ sort(integer)
sort(integer).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',20).
% reified sort predicate
%~ From E:
%~ 
%~ reified_sort(predicate)
%~ cpc :- reified_sorts([predicate/0])
%~ ooo :- [   cl([reified_sorts([predicate/0])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',20).
cl(reified_sorts(predicate/0),[]).

% reified sort function
%~ From E:
%~ 
%~ reified_sort(function)
%~ cpc :- reified_sorts([function/0])
%~ ooo :- [   cl([reified_sorts([function/0])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',20).
cl(reified_sorts(function/0),[]).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/EC.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Event Calculus (EC)
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',57).
% sort time: integer
%~ From E:
%~ 
%~ subsort(time,integer)
subsort(time,integer).

% sort offset: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',57).
%~ From E:
%~ 
%~ subsort(offset,integer)
subsort(offset,integer).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',60).
% reified sort fluent
%~ From E:
%~ 
%~ reified_sort(fluent)
%~ cpc :- reified_sorts([fluent/0])
%~ ooo :- [   cl([reified_sorts([fluent/0])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',60).
cl(reified_sorts(fluent/0),[]).

% reified sort event
%~ From E:
%~ 
%~ reified_sort(event)
%~ cpc :- reified_sorts([event/0])
%~ ooo :- [   cl([reified_sorts([event/0])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',60).
cl(reified_sorts(event/0),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',63).
% predicate Happens(event,time)
%~ From E:
%~ 
%~ predicate( happens(event,time))
%~ cpc :- predicates([happens/2])
%~ ooo :- [   cl([predicates([happens/2])],[])]
%~ cpc :- mpred_prop(happens(event,time),predicate)
%~ ooo :- [   cl([mpred_prop(happens(event,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',63).
cl(mpred_prop(happens(event,time),predicate),[]),cl(predicates(happens/2),[]).

% predicate HoldsAt(fluent,time)
%~ From E:
%~ 
%~ predicate( holds(fluent,time))
%~ cpc :- predicates([holds/2])
%~ ooo :- [   cl([predicates([holds/2])],[])]
%~ cpc :- mpred_prop(holds(fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(holds(fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',63).
cl(mpred_prop(holds(fluent,time),predicate),[]),cl(predicates(holds/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',65).
% predicate ReleasedAt(fluent,time)
%~ From E:
%~ 
%~ predicate( released_at(fluent,time))
%~ cpc :- predicates([released_at/2])
%~ ooo :- [   cl([predicates([released_at/2])],[])]
%~ cpc :- mpred_prop(released_at(fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(released_at(fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',65).
cl(mpred_prop(released_at(fluent,time),predicate),[]),cl(predicates(released_at/2),[]).

% predicate Initiates(event,fluent,time)
%~ From E:
%~ 
%~ predicate( initiates_at(event,fluent,time))
%~ cpc :- predicates([initiates/3])
%~ ooo :- [   cl([predicates([initiates/3])],[])]
%~ cpc :- mpred_prop(initiates(event,fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(initiates(event,fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',65).
cl(mpred_prop(initiates(event,fluent,time),predicate),[]),cl(predicates(initiates/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',67).
% predicate Terminates(event,fluent,time)
%~ From E:
%~ 
%~ predicate( terminates_at(event,fluent,time))
%~ cpc :- predicates([terminates/3])
%~ ooo :- [   cl([predicates([terminates/3])],[])]
%~ cpc :- mpred_prop(terminates(event,fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(terminates(event,fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',67).
cl(mpred_prop(terminates(event,fluent,time),predicate),[]),cl(predicates(terminates/3),[]).

% predicate Releases(event,fluent,time)
%~ From E:
%~ 
%~ predicate( releases_at(event,fluent,time))
%~ cpc :- predicates([releases/3])
%~ ooo :- [   cl([predicates([releases/3])],[])]
%~ cpc :- mpred_prop(releases(event,fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(releases(event,fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',67).
cl(mpred_prop(releases(event,fluent,time),predicate),[]),cl(predicates(releases/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',69).
% predicate Trajectory(fluent,time,fluent,offset)
%~ From E:
%~ 
%~ predicate( trajectory(fluent,time,fluent,offset))
%~ cpc :- predicates([trajectory/4])
%~ ooo :- [   cl([predicates([trajectory/4])],[])]
%~ cpc :- mpred_prop(trajectory(fluent,time,fluent,offset),predicate)
%~ ooo :- [   cl([mpred_prop(trajectory(fluent,time,fluent,offset),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',69).
cl(mpred_prop(trajectory(fluent,time,fluent,offset),predicate),[]),cl(predicates(trajectory/4),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',71).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/DEC.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Discrete Event Calculus (DEC)
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',102).
% sort time: integer
%~ From E:
%~ 
%~ subsort(time,integer)
subsort(time,integer).

% sort offset: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',102).
%~ From E:
%~ 
%~ subsort(offset,integer)
subsort(offset,integer).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',105).
% reified sort fluent
%~ From E:
%~ 
%~ reified_sort(fluent)
%~ cpc :- reified_sorts([fluent/0])
%~ ooo :- [   cl([reified_sorts([fluent/0])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',105).
cl(reified_sorts(fluent/0),[]).

% reified sort event
%~ From E:
%~ 
%~ reified_sort(event)
%~ cpc :- reified_sorts([event/0])
%~ ooo :- [   cl([reified_sorts([event/0])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',105).
cl(reified_sorts(event/0),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',108).
% predicate Happens(event,time)
%~ From E:
%~ 
%~ predicate( happens(event,time))
%~ cpc :- predicates([happens/2])
%~ ooo :- [   cl([predicates([happens/2])],[])]
%~ cpc :- mpred_prop(happens(event,time),predicate)
%~ ooo :- [   cl([mpred_prop(happens(event,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',108).
cl(mpred_prop(happens(event,time),predicate),[]),cl(predicates(happens/2),[]).

% predicate HoldsAt(fluent,time)
%~ From E:
%~ 
%~ predicate( holds(fluent,time))
%~ cpc :- predicates([holds/2])
%~ ooo :- [   cl([predicates([holds/2])],[])]
%~ cpc :- mpred_prop(holds(fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(holds(fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',108).
cl(mpred_prop(holds(fluent,time),predicate),[]),cl(predicates(holds/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',110).
% predicate ReleasedAt(fluent,time)
%~ From E:
%~ 
%~ predicate( released_at(fluent,time))
%~ cpc :- predicates([released_at/2])
%~ ooo :- [   cl([predicates([released_at/2])],[])]
%~ cpc :- mpred_prop(released_at(fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(released_at(fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',110).
cl(mpred_prop(released_at(fluent,time),predicate),[]),cl(predicates(released_at/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',112).
% predicate Initiates(event,fluent,time)
%~ From E:
%~ 
%~ predicate( initiates_at(event,fluent,time))
%~ cpc :- predicates([initiates/3])
%~ ooo :- [   cl([predicates([initiates/3])],[])]
%~ cpc :- mpred_prop(initiates(event,fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(initiates(event,fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',112).
cl(mpred_prop(initiates(event,fluent,time),predicate),[]),cl(predicates(initiates/3),[]).

% predicate Terminates(event,fluent,time)
%~ From E:
%~ 
%~ predicate( terminates_at(event,fluent,time))
%~ cpc :- predicates([terminates/3])
%~ ooo :- [   cl([predicates([terminates/3])],[])]
%~ cpc :- mpred_prop(terminates(event,fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(terminates(event,fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',112).
cl(mpred_prop(terminates(event,fluent,time),predicate),[]),cl(predicates(terminates/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',114).
% predicate Releases(event,fluent,time)
%~ From E:
%~ 
%~ predicate( releases_at(event,fluent,time))
%~ cpc :- predicates([releases/3])
%~ ooo :- [   cl([predicates([releases/3])],[])]
%~ cpc :- mpred_prop(releases(event,fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(releases(event,fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',114).
cl(mpred_prop(releases(event,fluent,time),predicate),[]),cl(predicates(releases/3),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',116).
% [fluent,time]
% (HoldsAt(fluent,time) &
%  !ReleasedAt(fluent,time+1) &
%  !({event} Happens(event,time) & Terminates(event,fluent,time))) ->
% HoldsAt(fluent,time+1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',116).
%~ From E:
%~ 
%~ ( holds(Fluent,Time)  ,    not( released_at(Fluent,Time+1)) ,     not( thereExists( Event,   happens(Event,Time),terminates_at(Event,Fluent,Time)))) ->         holds(Fluent,Time+1)
%~ cpc :- ( holds(Fluent,Time)  ,    not( released_at(Fluent,Time+1)) ,     not( thereExists( Event,   happens(Event,Time),terminates(Event,Fluent,Time)))) ->         holds(Fluent,Time+1)
%~ ooo :- [   cl(    [   exists( Event,   ( holds(Fluent,Time+1)  ;    not(holds(Fluent,Time)) ;     released_at(Fluent,Time+1) ;     happens(Event,Time),terminates(Event,Fluent,Time)))],       [])]
cl(    exists( Event,   ( holds(Fluent,Time+1)  ;    not holds(Fluent,Time) ;     released_at(Fluent,Time+1) ;     happens(Event,Time),terminates(Event,Fluent,Time))),       []).
 %  cl(    exists( Event,   ( holds(Fluent,Time+1)  ;    not(holds(Fluent,Time)) ;     released_at(Fluent,Time+1) ;     happens(Event,Time),terminates(Event,Fluent,Time))),       []).
 %  % =================================.


% [fluent,time]
% (!HoldsAt(fluent,time) &
%  !ReleasedAt(fluent,time+1) &
%  !({event} Happens(event,time) & Initiates(event,fluent,time))) ->
% !HoldsAt(fluent,time+1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',123).
%~ From E:
%~ 
%~ ( holds(not(Fluent),Time)  ,    not( released_at(Fluent,Time+1)) ,     not( thereExists( Event,   happens(Event,Time),initiates_at(Event,Fluent,Time)))) ->         holds(not(Fluent),Time+1)
%~ cpc :- ( holds(not(Fluent),Time)  ,    not( released_at(Fluent,Time+1)) ,     not( thereExists( Event,   happens(Event,Time),initiates(Event,Fluent,Time)))) ->         holds(not(Fluent),Time+1)
%~ ooo :- [   cl(    [   exists( Event,   ( not( holds(Fluent,Time+1))  ;    holds(Fluent,Time) ;     released_at(Fluent,Time+1) ;     happens(Event,Time),initiates(Event,Fluent,Time)))],       [])]
cl(    exists( Event,   ( not( holds(Fluent,Time+1))  ;    holds(Fluent,Time) ;     released_at(Fluent,Time+1) ;     happens(Event,Time),initiates(Event,Fluent,Time))),       []).
 %  cl(    exists( Event,   ( not( holds(Fluent,Time+1))  ;    holds(Fluent,Time) ;     released_at(Fluent,Time+1) ;     happens(Event,Time),initiates(Event,Fluent,Time))),       []).
 %  % =================================.


% [fluent,time]
% (!ReleasedAt(fluent,time) &
%  !({event} Happens(event,time) & Releases(event,fluent,time))) ->
% !ReleasedAt(fluent,time+1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',129).
%~ From E:
%~ 
%~ (     not(released_at(Fluent,Time)) ,     not( thereExists( Event,   happens(Event,Time),releases_at(Event,Fluent,Time)))) ->         not( released_at(Fluent,Time+1))
%~ cpc :- (     not(released_at(Fluent,Time)) ,     not( thereExists( Event,   happens(Event,Time),releases(Event,Fluent,Time)))) ->         not( released_at(Fluent,Time+1))
%~ ooo :- [   cl(    [   exists( Event,   ( not( released_at(Fluent,Time+1))  ;    released_at(Fluent,Time) ;     happens(Event,Time),releases(Event,Fluent,Time)))],       [])]
cl(    exists( Event,   ( not( released_at(Fluent,Time+1))  ;    released_at(Fluent,Time) ;     happens(Event,Time),releases(Event,Fluent,Time))),       []).
 %  cl(    exists( Event,   ( not( released_at(Fluent,Time+1))  ;    released_at(Fluent,Time) ;     happens(Event,Time),releases(Event,Fluent,Time))),       []).
 %  % =================================.


% [fluent,time]
% (ReleasedAt(fluent,time) &
%  !({event} Happens(event,time) &
%    (Initiates(event,fluent,time) |
%     Terminates(event,fluent,time)))) ->
% ReleasedAt(fluent,time+1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',134).
%~ From E:
%~ 
%~ (     released_at(Fluent,Time) ,     not( thereExists( Event,   (     happens(Event,Time) ,     (         initiates_at(Event,Fluent,Time) ;         terminates_at(Event,Fluent,Time)))))) ->         released_at(Fluent,Time+1)
%~ cpc :- (     released_at(Fluent,Time) ,     not( thereExists( Event,   (     happens(Event,Time) ,     (         initiates(Event,Fluent,Time) ;         terminates(Event,Fluent,Time)))))) ->         released_at(Fluent,Time+1)
%~ ooo :- [   cl(    [   exists( Event,   ( released_at(Fluent,Time+1)  ;    not(released_at(Fluent,Time)) ;     (         happens(Event,Time) ,         (             initiates(Event,Fluent,Time) ;             terminates(Event,Fluent,Time)))))],       [])]
cl(    exists( Event,   ( released_at(Fluent,Time+1)  ;    not released_at(Fluent,Time) ;     (         happens(Event,Time) ,         (             initiates(Event,Fluent,Time) ;             terminates(Event,Fluent,Time))))),       []).
 %  cl(    exists( Event,   ( released_at(Fluent,Time+1)  ;    not(released_at(Fluent,Time)) ;     (         happens(Event,Time) ,         (             initiates(Event,Fluent,Time) ;             terminates(Event,Fluent,Time))))),       []).
 %  % =================================.


% [event,fluent,time]
% (Happens(event,time) & Initiates(event,fluent,time)) ->
% (HoldsAt(fluent,time+1) & !ReleasedAt(fluent,time+1)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',141).
%~ From E:
%~ 
%~ happens(Event,Time),initiates_at(Event,Fluent,Time) ->         holds(Fluent,Time+1),not(released_at(Fluent,Time+1))
%~ cpc :- happens(Event,Time),initiates(Event,Fluent,Time) ->         holds(Fluent,Time+1),not(released_at(Fluent,Time+1))
%~ ooo :- [   cl(    [   holds(Fluent,Time+1)],       [      happens(Event,Time),           initiates(Event,Fluent,Time)]),     cl( [], [    [   released_at(Fluent,Time+1),     happens(Event,Time),     initiates(Event,Fluent,Time)])]]
(     cl(      holds(Fluent,Time+1),           happens(Event,Time),initiates(Event,Fluent,Time)) ,     cl( [],     ( released_at(Fluent,Time+1)  ,    happens(Event,Time) ,     initiates(Event,Fluent,Time)))).
 %  (     cl(      holds(Fluent,Time+1),           happens(Event,Time),initiates(Event,Fluent,Time)) ,     cl( [],     ( released_at(Fluent,Time+1)  ,    happens(Event,Time) ,     initiates(Event,Fluent,Time)))).
 %  % =================================.


% [event,fluent,time]
% (Happens(event,time) & Terminates(event,fluent,time)) ->
% (!HoldsAt(fluent,time+1) & !ReleasedAt(fluent,time+1)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',145).
%~ From E:
%~ 
%~ happens(Event,Time),terminates_at(Event,Fluent,Time) ->         holds(not(Fluent),Time+1),not(released_at(Fluent,Time+1))
%~ cpc :- happens(Event,Time),terminates(Event,Fluent,Time) ->         holds(not(Fluent),Time+1),not(released_at(Fluent,Time+1))
%~ ooo :- [   cl( [], [  [   holds(Fluent,Time+1),     happens(Event,Time),     terminates(Event,Fluent,Time)])],     cl( [], [    [   released_at(Fluent,Time+1),     happens(Event,Time),     terminates(Event,Fluent,Time)])]]
(     cl( [],     ( holds(Fluent,Time+1)  ,    happens(Event,Time) ,     terminates(Event,Fluent,Time))) ,     cl( [],     ( released_at(Fluent,Time+1)  ,    happens(Event,Time) ,     terminates(Event,Fluent,Time)))).
 %  (     cl( [],     ( holds(Fluent,Time+1)  ,    happens(Event,Time) ,     terminates(Event,Fluent,Time))) ,     cl( [],     ( released_at(Fluent,Time+1)  ,    happens(Event,Time) ,     terminates(Event,Fluent,Time)))).
 %  % =================================.


% [event,fluent,time]
% (Happens(event,time) & Releases(event,fluent,time)) ->
% ReleasedAt(fluent,time+1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',149).
%~ From E:
%~ 
%~ happens(Event,Time),releases_at(Event,Fluent,Time) ->         released_at(Fluent,Time+1)
%~ cpc :- happens(Event,Time),releases(Event,Fluent,Time) ->         released_at(Fluent,Time+1)
%~ ooo :- [   cl(    [   released_at(Fluent,Time+1)],       [      happens(Event,Time),           releases(Event,Fluent,Time)])]
cl(    released_at(Fluent,Time+1),       happens(Event,Time),releases(Event,Fluent,Time)).
 %  cl(    released_at(Fluent,Time+1),       happens(Event,Time),releases(Event,Fluent,Time)).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/ECCausal.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Causal Constraints
%;
%; @inproceedings{Shanahan:1999a,
%;   author = "Murray Shanahan",
%;   year = "1999",
%;   title = "The ramification problem in the event calculus",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}ixteenth \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "140--146",
%;   address = "San Mateo, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',183).
% predicate Started(fluent,time)
%~ From E:
%~ 
%~ predicate( started(fluent,time))
%~ cpc :- predicates([started/2])
%~ ooo :- [   cl([predicates([started/2])],[])]
%~ cpc :- mpred_prop(started(fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(started(fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',183).
cl(mpred_prop(started(fluent,time),predicate),[]),cl(predicates(started/2),[]).

% predicate Stopped(fluent,time)
%~ From E:
%~ 
%~ predicate( stopped(fluent,time))
%~ cpc :- predicates([stopped/2])
%~ ooo :- [   cl([predicates([stopped/2])],[])]
%~ cpc :- mpred_prop(stopped(fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(stopped(fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',183).
cl(mpred_prop(stopped(fluent,time),predicate),[]),cl(predicates(stopped/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',186).
% [fluent,time]
% Started(fluent,time) <->
% (HoldsAt(fluent,time) |
%  ({event} Happens(event,time) & Initiates(event,fluent,time))).
%~ From E:
%~ 
%~ (     started(Fluent,Time) <->     (         holds(Fluent,Time) ;         thereExists( Event,       happens(Event,Time),initiates_at(Event,Fluent,Time))))
%~ cpc :- (     started(Fluent,Time) <->     (         holds(Fluent,Time) ;         thereExists( Event,       happens(Event,Time),initiates(Event,Fluent,Time))))
%~ ooo :- [   cl(    [   exists( Event,   exists( Event,   (     ( holds(Fluent,Time)  ;        happens(Event,Time),initiates(Event,Fluent,Time) ;         not(started(Fluent,Time))) ,     (         started(Fluent,Time) ;         (             not(holds(Fluent,Time)) ,             not(happens(Event,Time));not(initiates(Event,Fluent,Time)))))))],       [])]
cl(    exists( Event,   exists( Event,   (     ( holds(Fluent,Time)  ;        happens(Event,Time),initiates(Event,Fluent,Time) ;         not started(Fluent,Time)) ,     (         started(Fluent,Time) ;         (             not holds(Fluent,Time) ,             not happens(Event,Time);not initiates(Event,Fluent,Time)))))),       []).
 %  cl(    exists( Event,   exists( Event,   (     ( holds(Fluent,Time)  ;        happens(Event,Time),initiates(Event,Fluent,Time) ;         not(started(Fluent,Time))) ,     (         started(Fluent,Time) ;         (             not(holds(Fluent,Time)) ,             not(happens(Event,Time));not(initiates(Event,Fluent,Time))))))),       []).
 %  % =================================.


% [fluent,time]
% Stopped(fluent,time) <->
% (!HoldsAt(fluent,time) |
%  ({event} Happens(event,time) & Terminates(event,fluent,time))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',192).
%~ From E:
%~ 
%~ (     stopped(Fluent,Time) <->     (         holds(not(Fluent),Time) ;         thereExists( Event,       happens(Event,Time),terminates_at(Event,Fluent,Time))))
%~ cpc :- (     stopped(Fluent,Time) <->     (         holds(not(Fluent),Time) ;         thereExists( Event,       happens(Event,Time),terminates(Event,Fluent,Time))))
%~ ooo :- [   cl(    [   exists( Event,   exists( Event,   (     ( not(holds(Fluent,Time))  ;        happens(Event,Time),terminates(Event,Fluent,Time) ;         not(stopped(Fluent,Time))) ,     (         stopped(Fluent,Time) ;         (             holds(Fluent,Time) ,             not(happens(Event,Time));not(terminates(Event,Fluent,Time)))))))],       [])]
cl(    exists( Event,   exists( Event,   (     ( not holds(Fluent,Time)  ;        happens(Event,Time),terminates(Event,Fluent,Time) ;         not stopped(Fluent,Time)) ,     (         stopped(Fluent,Time) ;         (             holds(Fluent,Time) ,             not happens(Event,Time);not terminates(Event,Fluent,Time)))))),       []).
 %  cl(    exists( Event,   exists( Event,   (     ( not(holds(Fluent,Time))  ;        happens(Event,Time),terminates(Event,Fluent,Time) ;         not(stopped(Fluent,Time))) ,     (         stopped(Fluent,Time) ;         (             holds(Fluent,Time) ,             not(happens(Event,Time));not(terminates(Event,Fluent,Time))))))),       []).
 %  % =================================.

% predicate Initiated(fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',195).
%~ From E:
%~ 
%~ predicate( initiated(fluent,time))
%~ cpc :- predicates([initiated/2])
%~ ooo :- [   cl([predicates([initiated/2])],[])]
%~ cpc :- mpred_prop(initiated(fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(initiated(fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',195).
cl(mpred_prop(initiated(fluent,time),predicate),[]),cl(predicates(initiated/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',197).
% predicate Terminated(fluent,time)
%~ From E:
%~ 
%~ predicate( terminated(fluent,time))
%~ cpc :- predicates([terminated/2])
%~ ooo :- [   cl([predicates([terminated/2])],[])]
%~ cpc :- mpred_prop(terminated(fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(terminated(fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',197).
cl(mpred_prop(terminated(fluent,time),predicate),[]),cl(predicates(terminated/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',199).
% [fluent,time]
% Initiated(fluent,time) <->
% (Started(fluent,time) &
%  !({event} Happens(event,time) & Terminates(event,fluent,time))).
%~ From E:
%~ 
%~ (     initiated(Fluent,Time) <->     (         started(Fluent,Time) ,         not( thereExists( Event,   happens(Event,Time),terminates_at(Event,Fluent,Time)))))
%~ cpc :- (     initiated(Fluent,Time) <->     (         started(Fluent,Time) ,         not( thereExists( Event,   happens(Event,Time),terminates(Event,Fluent,Time)))))
%~ ooo :- [   cl(    [   exists( Event,   exists( Event,   (     (         (             started(Fluent,Time) ,             not(happens(Event,Time));not(terminates(Event,Fluent,Time))) ;         not(initiated(Fluent,Time))) ,     ( initiated(Fluent,Time)  ;        not(started(Fluent,Time)) ;         happens(Event,Time),terminates(Event,Fluent,Time)))))],       [])]
cl(    exists( Event,   exists( Event,   (     (         (             started(Fluent,Time) ,             not happens(Event,Time);not terminates(Event,Fluent,Time)) ;         not initiated(Fluent,Time)) ,     ( initiated(Fluent,Time)  ;        not started(Fluent,Time) ;         happens(Event,Time),terminates(Event,Fluent,Time))))),       []).
 %  cl(    exists( Event,   exists( Event,   (     (         (             started(Fluent,Time) ,             not(happens(Event,Time));not(terminates(Event,Fluent,Time))) ;         not(initiated(Fluent,Time))) ,     ( initiated(Fluent,Time)  ;        not(started(Fluent,Time)) ;         happens(Event,Time),terminates(Event,Fluent,Time))))),       []).
 %  % =================================.


% [fluent,time]
% Terminated(fluent,time) <->
% (Stopped(fluent,time) &
%  !({event} Happens(event,time) & Initiates(event,fluent,time))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',205).
%~ From E:
%~ 
%~ (     terminated(Fluent,Time) <->     (         stopped(Fluent,Time) ,         not( thereExists( Event,   happens(Event,Time),initiates_at(Event,Fluent,Time)))))
%~ cpc :- (     terminated(Fluent,Time) <->     (         stopped(Fluent,Time) ,         not( thereExists( Event,   happens(Event,Time),initiates(Event,Fluent,Time)))))
%~ ooo :- [   cl(    [   exists( Event,   exists( Event,   (     (         (             stopped(Fluent,Time) ,             not(happens(Event,Time));not(initiates(Event,Fluent,Time))) ;         not(terminated(Fluent,Time))) ,     ( terminated(Fluent,Time)  ;        not(stopped(Fluent,Time)) ;         happens(Event,Time),initiates(Event,Fluent,Time)))))],       [])]
cl(    exists( Event,   exists( Event,   (     (         (             stopped(Fluent,Time) ,             not happens(Event,Time);not initiates(Event,Fluent,Time)) ;         not terminated(Fluent,Time)) ,     ( terminated(Fluent,Time)  ;        not stopped(Fluent,Time) ;         happens(Event,Time),initiates(Event,Fluent,Time))))),       []).
 %  cl(    exists( Event,   exists( Event,   (     (         (             stopped(Fluent,Time) ,             not(happens(Event,Time));not(initiates(Event,Fluent,Time))) ;         not(terminated(Fluent,Time))) ,     ( terminated(Fluent,Time)  ;        not(stopped(Fluent,Time)) ;         happens(Event,Time),initiates(Event,Fluent,Time))))),       []).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/ECTraj.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',241).
% predicate Clipped(time,fluent,time)
%~ From E:
%~ 
%~ predicate( clipped(time,fluent,time))
%~ cpc :- predicates([clipped/3])
%~ ooo :- [   cl([predicates([clipped/3])],[])]
%~ cpc :- mpred_prop(clipped(time,fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(clipped(time,fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',241).
cl(mpred_prop(clipped(time,fluent,time),predicate),[]),cl(predicates(clipped/3),[]).

% predicate Declipped(time,fluent,time)
%~ From E:
%~ 
%~ predicate( declipped(time,fluent,time))
%~ cpc :- predicates([declipped/3])
%~ ooo :- [   cl([predicates([declipped/3])],[])]
%~ cpc :- mpred_prop(declipped(time,fluent,time),predicate)
%~ ooo :- [   cl([mpred_prop(declipped(time,fluent,time),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',241).
cl(mpred_prop(declipped(time,fluent,time),predicate),[]),cl(predicates(declipped/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',244).
% predicate Trajectory(fluent,time,fluent,offset)
%~ From E:
%~ 
%~ predicate( trajectory(fluent,time,fluent,offset))
%~ cpc :- predicates([trajectory/4])
%~ ooo :- [   cl([predicates([trajectory/4])],[])]
%~ cpc :- mpred_prop(trajectory(fluent,time,fluent,offset),predicate)
%~ ooo :- [   cl([mpred_prop(trajectory(fluent,time,fluent,offset),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',244).
cl(mpred_prop(trajectory(fluent,time,fluent,offset),predicate),[]),cl(predicates(trajectory/4),[]).

% predicate AntiTrajectory(fluent,time,fluent,offset)
%~ From E:
%~ 
%~ predicate( antiTrajectory(fluent,time,fluent,offset))
%~ cpc :- predicates([antiTrajectory/4])
%~ ooo :- [   cl([predicates([antiTrajectory/4])],[])]
%~ cpc :- mpred_prop(antiTrajectory(fluent,time,fluent,offset),predicate)
%~ ooo :- [   cl([mpred_prop(antiTrajectory(fluent,time,fluent,offset),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',244).
cl(mpred_prop(antiTrajectory(fluent,time,fluent,offset),predicate),[]),cl(predicates(antiTrajectory/4),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',247).
% [event,fluent,fluent2,offset,time]
% Happens(event,time) &
% Initiates(event,fluent,time) &
% 0 < offset &
% Trajectory(fluent,time,fluent2,offset) &
% !Clipped(time,fluent,time+offset) ->
% HoldsAt(fluent2,time+offset).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',247).
%~ From E:
%~ 
%~ ( happens(Event,Time)  ,    initiates_at(Event,Fluent,Time) ,     0<Offset ,     trajectory(Fluent,Time,Fluent2,Offset) ,     not( clipped(Time,Fluent,Time+Offset))) ->         holds(Fluent2,Time+Offset)
%~ cpc :- ( happens(Event,Time)  ,    initiates(Event,Fluent,Time) ,     0<Offset ,     trajectory(Fluent,Time,Fluent2,Offset) ,     not( clipped(Time,Fluent,Time+Offset))) ->         holds(Fluent2,Time+Offset)
%~ ooo :- [   cl(    [   holds(Fluent2,Time+Offset),     clipped(Time,Fluent,Time+Offset)],       [      happens(Event,Time),           initiates(Event,Fluent,Time),           comparison(0,Offset,<),           trajectory(Fluent,Time,Fluent2,Offset)])]
cl(    (     holds(Fluent2,Time+Offset) ,     clipped(Time,Fluent,Time+Offset)),       ( happens(Event,Time)  ,          initiates(Event,Fluent,Time) ,           comparison(0,Offset,<) ,           trajectory(Fluent,Time,Fluent2,Offset))).
 %  cl(    (     holds(Fluent2,Time+Offset) ,     clipped(Time,Fluent,Time+Offset)),       ( happens(Event,Time)  ,          initiates(Event,Fluent,Time) ,           comparison(0,Offset,<) ,           trajectory(Fluent,Time,Fluent2,Offset))).
 %  % =================================.


% [event,fluent,fluent2,offset,time]
% Happens(event,time) &
% Terminates(event,fluent,time) &
% 0 < offset &
% AntiTrajectory(fluent,time,fluent2,offset) &
% !Declipped(time,fluent,time+offset) ->
% HoldsAt(fluent2,time+offset).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',256).
%~ From E:
%~ 
%~ ( happens(Event,Time)  ,    terminates_at(Event,Fluent,Time) ,     0<Offset ,     antiTrajectory(Fluent,Time,Fluent2,Offset) ,     not( declipped(Time,Fluent,Time+Offset))) ->         holds(Fluent2,Time+Offset)
%~ cpc :- ( happens(Event,Time)  ,    terminates(Event,Fluent,Time) ,     0<Offset ,     antiTrajectory(Fluent,Time,Fluent2,Offset) ,     not( declipped(Time,Fluent,Time+Offset))) ->         holds(Fluent2,Time+Offset)
%~ ooo :- [   cl(    [   holds(Fluent2,Time+Offset),     declipped(Time,Fluent,Time+Offset)],       [      happens(Event,Time),           terminates(Event,Fluent,Time),           comparison(0,Offset,<),           antiTrajectory(Fluent,Time,Fluent2,Offset)])]
cl(    (     holds(Fluent2,Time+Offset) ,     declipped(Time,Fluent,Time+Offset)),       ( happens(Event,Time)  ,          terminates(Event,Fluent,Time) ,           comparison(0,Offset,<) ,           antiTrajectory(Fluent,Time,Fluent2,Offset))).
 %  cl(    (     holds(Fluent2,Time+Offset) ,     declipped(Time,Fluent,Time+Offset)),       ( happens(Event,Time)  ,          terminates(Event,Fluent,Time) ,           comparison(0,Offset,<) ,           antiTrajectory(Fluent,Time,Fluent2,Offset))).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Ontology.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; integer
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',284).
% sort diameter: integer
%~ From E:
%~ 
%~ subsort(diameter,integer)
subsort(diameter,integer).
%; object

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',288).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',290).
% sort agent: object
%~ From E:
%~ 
%~ subsort(agent,object)
subsort(agent,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',292).
% sort physobj: object
%~ From E:
%~ 
%~ subsort(physobj,object)
subsort(physobj,object).

% sort bed: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',292).
%~ From E:
%~ 
%~ subsort(bed,physobj)
subsort(bed,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',294).
% sort snowflake: physobj
%~ From E:
%~ 
%~ subsort(snowflake,physobj)
subsort(snowflake,physobj).

% sort sky: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',294).
%~ From E:
%~ 
%~ subsort(sky,physobj)
subsort(sky,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',297).
% sort stuff: physobj
%~ From E:
%~ 
%~ subsort(stuff,physobj)
subsort(stuff,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',299).
% sort surface: physobj
%~ From E:
%~ 
%~ subsort(surface,physobj)
subsort(surface,physobj).

% sort ground: surface
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',299).
%~ From E:
%~ 
%~ subsort(ground,surface)
subsort(ground,surface).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',302).
% sort snow: stuff
%~ From E:
%~ 
%~ subsort(snow,stuff)
subsort(snow,stuff).

% sort ball
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',302).
%~ From E:
%~ 
%~ sort(ball)
sort(ball).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',305).
% sort food: physobj
%~ From E:
%~ 
%~ subsort(food,physobj)
subsort(food,physobj).

% sort fruit: food
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',305).
%~ From E:
%~ 
%~ subsort(fruit,food)
subsort(fruit,food).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',307).
% sort orange: fruit
%~ From E:
%~ 
%~ subsort(orange,fruit)
subsort(orange,fruit).

% sort salad: food
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',307).
%~ From E:
%~ 
%~ subsort(salad,food)
subsort(salad,food).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',310).
% sort clothing: physobj
%~ From E:
%~ 
%~ subsort(clothing,physobj)
subsort(clothing,physobj).

% sort scarf: clothing
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',310).
%~ From E:
%~ 
%~ subsort(scarf,clothing)
subsort(scarf,clothing).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',312).
% sort hat: clothing
%~ From E:
%~ 
%~ subsort(hat,clothing)
subsort(hat,clothing).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',314).
% sort vegetablematter: physobj
%~ From E:
%~ 
%~ subsort(vegetablematter,physobj)
subsort(vegetablematter,physobj).

% sort coal: vegetablematter
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',314).
%~ From E:
%~ 
%~ subsort(coal,vegetablematter)
subsort(coal,vegetablematter).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',317).
% sort bodypart: physobj
%~ From E:
%~ 
%~ subsort(bodypart,physobj)
subsort(bodypart,physobj).

% sort hand: bodypart
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',317).
%~ From E:
%~ 
%~ subsort(hand,bodypart)
subsort(hand,bodypart).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',320).
% sort papertowels: physobj
%~ From E:
%~ 
%~ subsort(papertowels,physobj)
subsort(papertowels,physobj).

% sort device: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',320).
%~ From E:
%~ 
%~ subsort(device,physobj)
subsort(device,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',322).
% sort electronicdevice: device
%~ From E:
%~ 
%~ subsort(electronicdevice,device)
subsort(electronicdevice,device).

% sort lamp: electronicdevice
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',322).
%~ From E:
%~ 
%~ subsort(lamp,electronicdevice)
subsort(lamp,electronicdevice).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',325).
% sort cat: physobj
%~ From E:
%~ 
%~ subsort(cat,physobj)
subsort(cat,physobj).

% sort horse: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',325).
%~ From E:
%~ 
%~ subsort(horse,physobj)
subsort(horse,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',328).
% sort weapon: physobj
%~ From E:
%~ 
%~ subsort(weapon,physobj)
subsort(weapon,physobj).

% sort gun: weapon
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',328).
%~ From E:
%~ 
%~ subsort(gun,weapon)
subsort(gun,weapon).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',330).
% sort bomb: weapon
%~ From E:
%~ 
%~ subsort(bomb,weapon)
subsort(bomb,weapon).

% sort bullet: weapon
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',330).
%~ From E:
%~ 
%~ subsort(bullet,weapon)
subsort(bullet,weapon).
%; location

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',335).
% sort location
%~ From E:
%~ 
%~ sort(location)
sort(location).

% sort room: location, outside: location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',335).
%~ From E:
%~ 
%~ subsort(room,location)
subsort(room,location).
%~ From E:
%~ 
%~ subsort(outside,location)
subsort(outside,location).
%; portal

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',340).
% sort portal
%~ From E:
%~ 
%~ sort(portal)
sort(portal).

% sort door: portal, staircase: portal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',340).
%~ From E:
%~ 
%~ subsort(door,portal)
subsort(door,portal).
%~ From E:
%~ 
%~ subsort(staircase,portal)
subsort(staircase,portal).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',342).
% sort street: portal
%~ From E:
%~ 
%~ subsort(street,portal)
subsort(street,portal).

% sort track: portal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',342).
%~ From E:
%~ 
%~ subsort(track,portal)
subsort(track,portal).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',345).
% sort building
%~ From E:
%~ 
%~ sort(building)
sort(building).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',347).
% sort fire: object
%~ From E:
%~ 
%~ subsort(fire,object)
subsort(fire,object).

% sort smoke: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',347).
%~ From E:
%~ 
%~ subsort(smoke,physobj)
subsort(smoke,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',350).
% sort furniture: physobj
%~ From E:
%~ 
%~ subsort(furniture,physobj)
subsort(furniture,physobj).

% sort chair: furniture
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',350).
%~ From E:
%~ 
%~ subsort(chair,furniture)
subsort(chair,furniture).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',352).
% sort table: furniture
%~ From E:
%~ 
%~ subsort(table,furniture)
subsort(table,furniture).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',354).
% sort bill: physobj
%~ From E:
%~ 
%~ subsort(bill,physobj)
subsort(bill,physobj).

% sort ticket: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',354).
%~ From E:
%~ 
%~ subsort(ticket,physobj)
subsort(ticket,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',356).
% sort envelope: physobj
%~ From E:
%~ 
%~ subsort(envelope,physobj)
subsort(envelope,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',358).
% sort text: physobj
%~ From E:
%~ 
%~ subsort(text,physobj)
subsort(text,physobj).

% sort book: text
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',358).
%~ From E:
%~ 
%~ subsort(book,text)
subsort(book,text).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',360).
% sort letter: text
%~ From E:
%~ 
%~ subsort(letter,text)
subsort(letter,text).

% sort menu: text
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',360).
%~ From E:
%~ 
%~ subsort(menu,text)
subsort(menu,text).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',363).
% sort paper: physobj
%~ From E:
%~ 
%~ subsort(paper,physobj)
subsort(paper,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',365).
% sort content
%~ From E:
%~ 
%~ sort(content)
sort(content).

% sort script
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',365).
%~ From E:
%~ 
%~ sort(script)
sort(script).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',368).
% sort container: physobj
%~ From E:
%~ 
%~ subsort(container,physobj)
subsort(container,physobj).

% sort cigarette: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',368).
%~ From E:
%~ 
%~ subsort(cigarette,physobj)
subsort(cigarette,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',370).
% sort ashtray: physobj
%~ From E:
%~ 
%~ subsort(ashtray,physobj)
subsort(ashtray,physobj).

% sort umbrella: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',370).
%~ From E:
%~ 
%~ subsort(umbrella,physobj)
subsort(umbrella,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',373).
% sort pen: physobj
%~ From E:
%~ 
%~ subsort(pen,physobj)
subsort(pen,physobj).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/RTSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; RTSpace: room-scale topological space
%;
%; We use topological and metric representations of space,
%; at two levels of granularity---room-scale and object-scale.
%; The RTSpace representation deals with topological space at
%; the scale of rooms and outdoor locations.
%; This representation of space consists of locations, which
%; are connected by portals. There are two types of locations:
%; rooms and outside areas (outsides).
%;
%; object is at location.

% fluent At(object,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',404).
%~ From E:
%~ 
%~ fluent( at_loc(object,location))
%~ cpc :- fluents([at_loc/2])
%~ ooo :- [   cl([fluents([at_loc/2])],[])]
%~ cpc :- mpred_prop(at_loc(object,location),fluent)
%~ ooo :- [   cl([mpred_prop(at_loc(object,location),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',404).
cl(mpred_prop(at_loc(object,location),fluent),[]),cl(fluents(at_loc/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',406).
% manualrelease At
%~ From E:
%~ 
%~ :-( call_pel_directive( manualrelease(at_loc)))
:-( call_pel_directive( manualrelease(at_loc))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',408).
% [object1,location,time]
% (% {object2} PartOf(object1,object2)) ->
% ReleasedAt(At(object1,location),time).
%~ From E:
%~ 
%~ exists( Object2,   partOf(Object1,Object2) ->         released_at(at_loc(Object1,Location),Time))
%~ cpc :- exists( Object2,   partOf(Object1,Object2) ->         released_at(at_loc(Object1,Location),Time))
%~ ooo :- [   cl(    [   exists( Object2,   (     released_at(at_loc(Object1,Location),Time) ;     not(partOf(Object1,Object2))))],       [])]
cl(    exists( Object2,   (     released_at(at_loc(Object1,Location),Time) ;     not partOf(Object1,Object2))),       []).
 %  ( cl(    exists( Object2,   (     released_at(at_loc(Object1,Location),Time) ;     not(partOf(Object1,Object2)))),       [])).
 %  % =================================.


%; A state constraint says that an object
%; is at one location at a time:
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',414).
%~ From E:
%~ 
%~ (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time)) ->         Location1=Location2
%~ cpc :- (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time)) ->         Location1=Location2
%~ ooo :- [   cl(    [   equals(Location1,Location2)],       [      holds(at_loc(Object,Location1),Time),           holds(at_loc(Object,Location2),Time)])]
cl( equals(Location1,Location2),   (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time))).
 %  cl( equals(Location1,Location2),   (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time))).
 %  % =================================.


%; connectivity
%; Side one of portal is location.

% function Side1(portal): location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',421).
%~ From E:
%~ 
%~ function(side1(portal),location)
function(side1(portal),location).
%; Side two of portal is location.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',424).
% function Side2(portal): location
%~ From E:
%~ 
%~ function(side2(portal),location)
function(side2(portal),location).
%; The building of room is building.

% function BuildingOf(room): building
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',426).
%~ From E:
%~ 
%~ function(buildingOf(room),building)
function(buildingOf(room),building).
%; object is at a location that has portal.

% fluent NearPortal(object,portal)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',429).
%~ From E:
%~ 
%~ fluent( nearPortal(object,portal))
%~ cpc :- fluents([nearPortal/2])
%~ ooo :- [   cl([fluents([nearPortal/2])],[])]
%~ cpc :- mpred_prop(nearPortal(object,portal),fluent)
%~ ooo :- [   cl([mpred_prop(nearPortal(object,portal),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',429).
cl(mpred_prop(nearPortal(object,portal),fluent),[]),cl(fluents(nearPortal/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',431).
% noninertial NearPortal
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(nearPortal)))
:-( call_pel_directive( noninertial(nearPortal))).
%; A state constraint says that an object is near
%; a portal if and only if there is a location such that
%; the object is at the location and one of the sides
%; of the portal is the location:
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',437).
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',439).
%~ From E:
%~ 
%~ exists( Location,   (     holds(nearPortal(Object,Portal),Time) <->     (         side1(Portal)=Location;side2(Portal)=Location ,         holds(at_loc(Object,Location),Time))))
%~ cpc :- exists( Location,   (     holds(nearPortal(Object,Portal),Time) <->     (         side1(Portal)=Location;side2(Portal)=Location ,         holds(at_loc(Object,Location),Time))))
%~ ooo :- [   cl(    [   exists( Location,   (     (         (             equals(side1(Portal),Location);equals(side2(Portal),Location) ,             holds(at_loc(Object,Location),Time)) ;         not( holds(nearPortal(Object,Portal),Time))) ,     ( holds(nearPortal(Object,Portal),Time)  ;        (             not( equals(side1(Portal),Location)) ,             not( equals(side2(Portal),Location))) ;         not( holds(at_loc(Object,Location),Time)))))],       [])]
cl(    exists( Location,   (     (         (             equals(side1(Portal),Location);equals(side2(Portal),Location) ,             holds(at_loc(Object,Location),Time)) ;         not( holds(nearPortal(Object,Portal),Time))) ,     ( holds(nearPortal(Object,Portal),Time)  ;        (             not( equals(side1(Portal),Location)) ,             not( equals(side2(Portal),Location))) ;         not( holds(at_loc(Object,Location),Time))))),       []).
 %  cl(    exists( Location,   (     (         (             equals(side1(Portal),Location);equals(side2(Portal),Location) ,             holds(at_loc(Object,Location),Time)) ;         not( holds(nearPortal(Object,Portal),Time))) ,     ( holds(nearPortal(Object,Portal),Time)  ;        (             not( equals(side1(Portal),Location)) ,             not( equals(side2(Portal),Location))) ;         not( holds(at_loc(Object,Location),Time))))),       []).
 %  % =================================.


%; locking and unlocking doors
%; agent unlocks door.

% event DoorUnlock(agent,door)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',446).
%~ From E:
%~ 
%~ event( doorUnlock(agent,door))
%~ cpc :- events([doorUnlock/2])
%~ ooo :- [   cl([events([doorUnlock/2])],[])]
%~ cpc :- actions([doorUnlock/2])
%~ ooo :- [   cl([actions([doorUnlock/2])],[])]
%~ cpc :- mpred_prop(doorUnlock(agent,door),action)
%~ ooo :- [   cl([mpred_prop(doorUnlock(agent,door),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',446).
( cl(events(doorUnlock/2),[])  ,    cl(mpred_prop(doorUnlock(agent,door),action),[]) ,     cl(actions(doorUnlock/2),[])).


%; agent locks door.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',449).
% event DoorLock(agent,door)
%~ From E:
%~ 
%~ event( doorLock(agent,door))
%~ cpc :- events([doorLock/2])
%~ ooo :- [   cl([events([doorLock/2])],[])]
%~ cpc :- actions([doorLock/2])
%~ ooo :- [   cl([actions([doorLock/2])],[])]
%~ cpc :- mpred_prop(doorLock(agent,door),action)
%~ ooo :- [   cl([mpred_prop(doorLock(agent,door),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',449).
( cl(events(doorLock/2),[])  ,    cl(mpred_prop(doorLock(agent,door),action),[]) ,     cl(actions(doorLock/2),[])).


%; door is unlocked.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',451).
% fluent DoorUnlocked(door)
%~ From E:
%~ 
%~ fluent( doorUnlocked(door))
%~ cpc :- fluents([doorUnlocked/1])
%~ ooo :- [   cl([fluents([doorUnlocked/1])],[])]
%~ cpc :- mpred_prop(doorUnlocked(door),fluent)
%~ ooo :- [   cl([mpred_prop(doorUnlocked(door),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',451).
cl(mpred_prop(doorUnlocked(door),fluent),[]),cl(fluents(doorUnlocked/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',453).
%; A precondition axiom states that
%; for an agent to unlock a door,
%; the agent must be awake,
%; the door must not already be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorUnlock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',458).
%~ From E:
%~ 
%~ happens(doorUnlock(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(not(doorUnlocked(Door)),Time) ,     holds(nearPortal(Agent,Door),Time))
%~ cpc :- happens(doorUnlock(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(not(doorUnlocked(Door)),Time) ,     holds(nearPortal(Agent,Door),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(doorUnlock(Agent,Door),Time)]),     cl( [], [    [   holds(doorUnlocked(Door),Time),     happens(doorUnlock(Agent,Door),Time)])],     cl(      [   holds(nearPortal(Agent,Door),Time)],           [        happens(doorUnlock(Agent,Door),Time)])]
( cl(holds(awake(Agent),Time),happens(doorUnlock(Agent,Door),Time))  ,    cl( [],     (     holds(doorUnlocked(Door),Time) ,     happens(doorUnlock(Agent,Door),Time))) ,     cl(      holds(nearPortal(Agent,Door),Time),           happens(doorUnlock(Agent,Door),Time))).
 %  ( cl(holds(awake(Agent),Time),happens(doorUnlock(Agent,Door),Time))  ,    cl( [],     (     holds(doorUnlocked(Door),Time) ,     happens(doorUnlock(Agent,Door),Time))) ,     cl(      holds(nearPortal(Agent,Door),Time),           happens(doorUnlock(Agent,Door),Time))).
 %  % =================================.


%; An effect axiom states that
%; if an agent unlocks a door,
%; the door will be unlocked:
% [agent,door,time]
% Initiates(DoorUnlock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',467).
%~ From E:
%~ 
%~ initiates_at(doorUnlock(Agent,Door),doorUnlocked(Door),Time)
%~ cpc :- initiates(doorUnlock(Agent,Door),doorUnlocked(Door),Time)
%~ ooo :- [   cl([initiates(doorUnlock(Agent,Door),doorUnlocked(Door),Time)],[])]
cl(initiates(doorUnlock(Agent,Door),doorUnlocked(Door),Time),[]).
 %  cl(initiates(doorUnlock(Agent,Door),doorUnlocked(Door),Time),[]).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to lock a door,
%; the agent must be awake,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorLock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',475).
%~ From E:
%~ 
%~ happens(doorLock(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(doorUnlocked(Door),Time) ,     holds(nearPortal(Agent,Door),Time))
%~ cpc :- happens(doorLock(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(doorUnlocked(Door),Time) ,     holds(nearPortal(Agent,Door),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(doorLock(Agent,Door),Time)]),     cl(      [   holds(doorUnlocked(Door),Time)],           [        happens(doorLock(Agent,Door),Time)]),     cl(      [   holds(nearPortal(Agent,Door),Time)],           [        happens(doorLock(Agent,Door),Time)])]
( cl(holds(awake(Agent),Time),happens(doorLock(Agent,Door),Time))  ,    cl(      holds(doorUnlocked(Door),Time),           happens(doorLock(Agent,Door),Time)) ,     cl(      holds(nearPortal(Agent,Door),Time),           happens(doorLock(Agent,Door),Time))).
 %  ( cl(holds(awake(Agent),Time),happens(doorLock(Agent,Door),Time))  ,    cl(      holds(doorUnlocked(Door),Time),           happens(doorLock(Agent,Door),Time)) ,     cl(      holds(nearPortal(Agent,Door),Time),           happens(doorLock(Agent,Door),Time))).
 %  % =================================.


%; An effect axiom states that
%; if an agent locks a door,
%; the door will no longer be unlocked.
% [agent,door,time]
% Terminates(DoorLock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',484).
%~ From E:
%~ 
%~ terminates_at(doorLock(Agent,Door),doorUnlocked(Door),Time)
%~ cpc :- terminates(doorLock(Agent,Door),doorUnlocked(Door),Time)
%~ ooo :- [   cl([terminates(doorLock(Agent,Door),doorUnlocked(Door),Time)],[])]
cl(terminates(doorLock(Agent,Door),doorUnlocked(Door),Time),[]).
 %  cl(terminates(doorLock(Agent,Door),doorUnlocked(Door),Time),[]).
 %  % =================================.


%; A state constraint says that if a door is open,
%; it is unlocked:
% [door,time]
% HoldsAt(DoorIsOpen(door),time) -> HoldsAt(DoorUnlocked(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',489).
%~ From E:
%~ 
%~ holds(doorIsOpen(Door),Time) ->         holds(doorUnlocked(Door),Time)
%~ cpc :- holds(doorIsOpen(Door),Time) ->         holds(doorUnlocked(Door),Time)
%~ ooo :- [   cl(    [   holds(doorUnlocked(Door),Time)],       [      holds(doorIsOpen(Door),Time)])]
cl(holds(doorUnlocked(Door),Time),holds(doorIsOpen(Door),Time)).
 %  cl(holds(doorUnlocked(Door),Time),holds(doorIsOpen(Door),Time)).
 %  % =================================.


%; opening and closing doors
%; agent opens door.

% event DoorOpen(agent,door)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',494).
%~ From E:
%~ 
%~ event( doorOpen(agent,door))
%~ cpc :- events([doorOpen/2])
%~ ooo :- [   cl([events([doorOpen/2])],[])]
%~ cpc :- actions([doorOpen/2])
%~ ooo :- [   cl([actions([doorOpen/2])],[])]
%~ cpc :- mpred_prop(doorOpen(agent,door),action)
%~ ooo :- [   cl([mpred_prop(doorOpen(agent,door),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',494).
( cl(events(doorOpen/2),[])  ,    cl(mpred_prop(doorOpen(agent,door),action),[]) ,     cl(actions(doorOpen/2),[])).


%; agent closes door.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',497).
% event DoorClose(agent,door)
%~ From E:
%~ 
%~ event( doorClose(agent,door))
%~ cpc :- events([doorClose/2])
%~ ooo :- [   cl([events([doorClose/2])],[])]
%~ cpc :- actions([doorClose/2])
%~ ooo :- [   cl([actions([doorClose/2])],[])]
%~ cpc :- mpred_prop(doorClose(agent,door),action)
%~ ooo :- [   cl([mpred_prop(doorClose(agent,door),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',497).
( cl(events(doorClose/2),[])  ,    cl(mpred_prop(doorClose(agent,door),action),[]) ,     cl(actions(doorClose/2),[])).


%; door is open.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',499).
% fluent DoorIsOpen(door)
%~ From E:
%~ 
%~ fluent( doorIsOpen(door))
%~ cpc :- fluents([doorIsOpen/1])
%~ ooo :- [   cl([fluents([doorIsOpen/1])],[])]
%~ cpc :- mpred_prop(doorIsOpen(door),fluent)
%~ ooo :- [   cl([mpred_prop(doorIsOpen(door),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',499).
cl(mpred_prop(doorIsOpen(door),fluent),[]),cl(fluents(doorIsOpen/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',501).
%; A precondition axiom states that
%; for an agent to open a door,
%; the agent must be awake,
%; the door must not already be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorOpen(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',507).
%~ From E:
%~ 
%~ happens(doorOpen(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(not(doorIsOpen(Door)),Time) ,     holds(doorUnlocked(Door),Time) ,     holds(nearPortal(Agent,Door),Time))
%~ cpc :- happens(doorOpen(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(not(doorIsOpen(Door)),Time) ,     holds(doorUnlocked(Door),Time) ,     holds(nearPortal(Agent,Door),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(doorOpen(Agent,Door),Time)]),     cl( [], [    [   holds(doorIsOpen(Door),Time),     happens(doorOpen(Agent,Door),Time)])],     cl(      [   holds(doorUnlocked(Door),Time)],           [        happens(doorOpen(Agent,Door),Time)]),     cl(      [   holds(nearPortal(Agent,Door),Time)],           [        happens(doorOpen(Agent,Door),Time)])]
( cl(holds(awake(Agent),Time),happens(doorOpen(Agent,Door),Time))  ,    cl( [],     holds(doorIsOpen(Door),Time),happens(doorOpen(Agent,Door),Time)) ,     cl(      holds(doorUnlocked(Door),Time),           happens(doorOpen(Agent,Door),Time)) ,     cl(      holds(nearPortal(Agent,Door),Time),           happens(doorOpen(Agent,Door),Time))).
 %  ( cl(holds(awake(Agent),Time),happens(doorOpen(Agent,Door),Time))  ,    cl( [],     holds(doorIsOpen(Door),Time),happens(doorOpen(Agent,Door),Time)) ,     cl(      holds(doorUnlocked(Door),Time),           happens(doorOpen(Agent,Door),Time)) ,     cl(      holds(nearPortal(Agent,Door),Time),           happens(doorOpen(Agent,Door),Time))).
 %  % =================================.


%; An effect axiom states that
%; if an agent opens a door,
%; the door will be open:
% [agent,door,time]
% Initiates(DoorOpen(agent,door),DoorIsOpen(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',517).
%~ From E:
%~ 
%~ initiates_at(doorOpen(Agent,Door),doorIsOpen(Door),Time)
%~ cpc :- initiates(doorOpen(Agent,Door),doorIsOpen(Door),Time)
%~ ooo :- [   cl([initiates(doorOpen(Agent,Door),doorIsOpen(Door),Time)],[])]
cl(initiates(doorOpen(Agent,Door),doorIsOpen(Door),Time),[]).
 %  cl(initiates(doorOpen(Agent,Door),doorIsOpen(Door),Time),[]).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to close a door,
%; the agent must be awake,
%; the door must be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorClose(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',526).
%~ From E:
%~ 
%~ happens(doorClose(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(doorIsOpen(Door),Time) ,     holds(doorUnlocked(Door),Time) ,     holds(nearPortal(Agent,Door),Time))
%~ cpc :- happens(doorClose(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(doorIsOpen(Door),Time) ,     holds(doorUnlocked(Door),Time) ,     holds(nearPortal(Agent,Door),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(doorClose(Agent,Door),Time)]),     cl(      [   holds(doorIsOpen(Door),Time)],           [        happens(doorClose(Agent,Door),Time)]),     cl(      [   holds(doorUnlocked(Door),Time)],           [        happens(doorClose(Agent,Door),Time)]),     cl(      [   holds(nearPortal(Agent,Door),Time)],           [        happens(doorClose(Agent,Door),Time)])]
( cl(holds(awake(Agent),Time),happens(doorClose(Agent,Door),Time))  ,    cl(      holds(doorIsOpen(Door),Time),           happens(doorClose(Agent,Door),Time)) ,     cl(      holds(doorUnlocked(Door),Time),           happens(doorClose(Agent,Door),Time)) ,     cl(      holds(nearPortal(Agent,Door),Time),           happens(doorClose(Agent,Door),Time))).
 %  ( cl(holds(awake(Agent),Time),happens(doorClose(Agent,Door),Time))  ,    cl(      holds(doorIsOpen(Door),Time),           happens(doorClose(Agent,Door),Time)) ,     cl(      holds(doorUnlocked(Door),Time),           happens(doorClose(Agent,Door),Time)) ,     cl(      holds(nearPortal(Agent,Door),Time),           happens(doorClose(Agent,Door),Time))).
 %  % =================================.


%; An effect axiom states that
%; if an agent closes a door,
%; the door will no longer be open:
% [agent,door,time]
% Terminates(DoorClose(agent,door),DoorIsOpen(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',536).
%~ From E:
%~ 
%~ terminates_at(doorClose(Agent,Door),doorIsOpen(Door),Time)
%~ cpc :- terminates(doorClose(Agent,Door),doorIsOpen(Door),Time)
%~ ooo :- [   cl([terminates(doorClose(Agent,Door),doorIsOpen(Door),Time)],[])]
cl(terminates(doorClose(Agent,Door),doorIsOpen(Door),Time),[]).
 %  cl(terminates(doorClose(Agent,Door),doorIsOpen(Door),Time),[]).
 %  % =================================.


%; passing through doors
%; agent walks through side one of door.

% event WalkThroughDoor12(agent,door)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',541).
%~ From E:
%~ 
%~ event( walkThroughDoor12(agent,door))
%~ cpc :- events([walkThroughDoor12/2])
%~ ooo :- [   cl([events([walkThroughDoor12/2])],[])]
%~ cpc :- actions([walkThroughDoor12/2])
%~ ooo :- [   cl([actions([walkThroughDoor12/2])],[])]
%~ cpc :- mpred_prop(walkThroughDoor12(agent,door),action)
%~ ooo :- [   cl([mpred_prop(walkThroughDoor12(agent,door),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',541).
( cl(events(walkThroughDoor12/2),[])  ,    cl(mpred_prop(walkThroughDoor12(agent,door),action),[]) ,     cl(actions(walkThroughDoor12/2),[])).


%; agent walks through side two of door.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',544).
% event WalkThroughDoor21(agent,door)
%~ From E:
%~ 
%~ event( walkThroughDoor21(agent,door))
%~ cpc :- events([walkThroughDoor21/2])
%~ ooo :- [   cl([events([walkThroughDoor21/2])],[])]
%~ cpc :- actions([walkThroughDoor21/2])
%~ ooo :- [   cl([actions([walkThroughDoor21/2])],[])]
%~ cpc :- mpred_prop(walkThroughDoor21(agent,door),action)
%~ ooo :- [   cl([mpred_prop(walkThroughDoor21(agent,door),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',544).
( cl(events(walkThroughDoor21/2),[])  ,    cl(mpred_prop(walkThroughDoor21(agent,door),action),[]) ,     cl(actions(walkThroughDoor21/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',546).
%; Precondition axioms state that
%; for an agent to walk through a side of a door,
%; the agent must be awake and standing,
%; the door must be open, and
%; the agent must be at the side of the door that
%; the agent walks through:
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side1(door)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',552).
%~ From E:
%~ 
%~ happens(walkThroughDoor12(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(doorIsOpen(Door),Time) ,     holds(at_loc(Agent,side1(Door)),Time))
%~ cpc :- happens(walkThroughDoor12(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(doorIsOpen(Door),Time) ,     holds(at_loc(Agent,side1(Door)),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(walkThroughDoor12(Agent,Door),Time)]),     cl(      [   holds(standing(Agent),Time)],           [        happens(walkThroughDoor12(Agent,Door),Time)]),     cl(      [   holds(doorIsOpen(Door),Time)],           [        happens(walkThroughDoor12(Agent,Door),Time)]),     cl(      [   holds(at_loc(Agent,side1(Door)),Time)],           [        happens(walkThroughDoor12(Agent,Door),Time)])]
( cl(    holds(awake(Agent),Time),       happens(walkThroughDoor12(Agent,Door),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkThroughDoor12(Agent,Door),Time)) ,     cl(      holds(doorIsOpen(Door),Time),           happens(walkThroughDoor12(Agent,Door),Time)) ,     cl(      holds(at_loc(Agent,side1(Door)),Time),           happens(walkThroughDoor12(Agent,Door),Time))).
 %  ( cl(    holds(awake(Agent),Time),       happens(walkThroughDoor12(Agent,Door),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkThroughDoor12(Agent,Door),Time)) ,     cl(      holds(doorIsOpen(Door),Time),           happens(walkThroughDoor12(Agent,Door),Time)) ,     cl(      holds(at_loc(Agent,side1(Door)),Time),           happens(walkThroughDoor12(Agent,Door),Time))).
 %  % =================================.


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side2(door)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',560).
%~ From E:
%~ 
%~ happens(walkThroughDoor21(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(doorIsOpen(Door),Time) ,     holds(at_loc(Agent,side2(Door)),Time))
%~ cpc :- happens(walkThroughDoor21(Agent,Door),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(doorIsOpen(Door),Time) ,     holds(at_loc(Agent,side2(Door)),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(walkThroughDoor21(Agent,Door),Time)]),     cl(      [   holds(standing(Agent),Time)],           [        happens(walkThroughDoor21(Agent,Door),Time)]),     cl(      [   holds(doorIsOpen(Door),Time)],           [        happens(walkThroughDoor21(Agent,Door),Time)]),     cl(      [   holds(at_loc(Agent,side2(Door)),Time)],           [        happens(walkThroughDoor21(Agent,Door),Time)])]
( cl(    holds(awake(Agent),Time),       happens(walkThroughDoor21(Agent,Door),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkThroughDoor21(Agent,Door),Time)) ,     cl(      holds(doorIsOpen(Door),Time),           happens(walkThroughDoor21(Agent,Door),Time)) ,     cl(      holds(at_loc(Agent,side2(Door)),Time),           happens(walkThroughDoor21(Agent,Door),Time))).
 %  ( cl(    holds(awake(Agent),Time),       happens(walkThroughDoor21(Agent,Door),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkThroughDoor21(Agent,Door),Time)) ,     cl(      holds(doorIsOpen(Door),Time),           happens(walkThroughDoor21(Agent,Door),Time)) ,     cl(      holds(at_loc(Agent,side2(Door)),Time),           happens(walkThroughDoor21(Agent,Door),Time))).
 %  % =================================.


%; Effect axioms state that
%; if an agent walks through one side of a door,
%; the agent will be at the other side of the door:
% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',569).
%~ From E:
%~ 
%~ side2(Door) =         Location ->         initiates_at( walkThroughDoor12(Agent,Door),   at_loc(Agent,Location),     Time)
%~ cpc :- if(    initiates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location))
%~ ooo :- [   cl(    [   if(    initiates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location))],       [])]
cl(    (     (         walkThroughDoor12(Agent,Door) initiates         at_loc(Agent,Location)at Time) if     side2(Door,Location)),       []).
 %  cl(    if(    initiates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location)),       []).
 %  % =================================.


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',574).
%~ From E:
%~ 
%~ side1(Door) =         Location ->         initiates_at( walkThroughDoor21(Agent,Door),   at_loc(Agent,Location),     Time)
%~ cpc :- if(    initiates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location))
%~ ooo :- [   cl(    [   if(    initiates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location))],       [])]
cl(    (     (         walkThroughDoor21(Agent,Door) initiates         at_loc(Agent,Location)at Time) if     side1(Door,Location)),       []).
 %  cl(    if(    initiates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location)),       []).
 %  % =================================.


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',578).
%~ From E:
%~ 
%~ side1(Door) =         Location ->         terminates_at( walkThroughDoor12(Agent,Door),   at_loc(Agent,Location),     Time)
%~ cpc :- if(    terminates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location))
%~ ooo :- [   cl(    [   if(    terminates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location))],       [])]
cl(    (     (         walkThroughDoor12(Agent,Door) terminates         at_loc(Agent,Location)at Time) if     side1(Door,Location)),       []).
 %  cl(    if(    terminates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location)),       []).
 %  % =================================.


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',582).
%~ From E:
%~ 
%~ side2(Door) =         Location ->         terminates_at( walkThroughDoor21(Agent,Door),   at_loc(Agent,Location),     Time)
%~ cpc :- if(    terminates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location))
%~ ooo :- [   cl(    [   if(    terminates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location))],       [])]
cl(    (     (         walkThroughDoor21(Agent,Door) terminates         at_loc(Agent,Location)at Time) if     side2(Door,Location)),       []).
 %  cl(    if(    terminates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location)),       []).
 %  % =================================.


%; walking from one end of a street to another
%; agent walks from the first end of street to the second end.

% event WalkStreet12(agent,street)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',587).
%~ From E:
%~ 
%~ event( walkStreet12(agent,street))
%~ cpc :- events([walkStreet12/2])
%~ ooo :- [   cl([events([walkStreet12/2])],[])]
%~ cpc :- actions([walkStreet12/2])
%~ ooo :- [   cl([actions([walkStreet12/2])],[])]
%~ cpc :- mpred_prop(walkStreet12(agent,street),action)
%~ ooo :- [   cl([mpred_prop(walkStreet12(agent,street),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',587).
( cl(events(walkStreet12/2),[])  ,    cl(mpred_prop(walkStreet12(agent,street),action),[]) ,     cl(actions(walkStreet12/2),[])).


%; agent walks from the second end of street to the first end.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',590).
% event WalkStreet21(agent,street)
%~ From E:
%~ 
%~ event( walkStreet21(agent,street))
%~ cpc :- events([walkStreet21/2])
%~ ooo :- [   cl([events([walkStreet21/2])],[])]
%~ cpc :- actions([walkStreet21/2])
%~ ooo :- [   cl([actions([walkStreet21/2])],[])]
%~ cpc :- mpred_prop(walkStreet21(agent,street),action)
%~ ooo :- [   cl([mpred_prop(walkStreet21(agent,street),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',590).
( cl(events(walkStreet21/2),[])  ,    cl(mpred_prop(walkStreet21(agent,street),action),[]) ,     cl(actions(walkStreet21/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',592).
%; Precondition axioms state that
%; for an agent to walk from one end of a street to another,
%; the agent must be awake,
%; the agent must be standing, and
%; the agent must be at the first end of the street:
% [agent,street,time]
% Happens(WalkStreet12(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(street)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',597).
%~ From E:
%~ 
%~ happens(walkStreet12(Agent,Street),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(at_loc(Agent,side1(Street)),Time))
%~ cpc :- happens(walkStreet12(Agent,Street),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(at_loc(Agent,side1(Street)),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(walkStreet12(Agent,Street),Time)]),     cl(      [   holds(standing(Agent),Time)],           [        happens(walkStreet12(Agent,Street),Time)]),     cl(      [   holds(at_loc(Agent,side1(Street)),Time)],           [        happens(walkStreet12(Agent,Street),Time)])]
( cl(holds(awake(Agent),Time),happens(walkStreet12(Agent,Street),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkStreet12(Agent,Street),Time)) ,     cl(      holds(at_loc(Agent,side1(Street)),Time),           happens(walkStreet12(Agent,Street),Time))).
 %  ( cl(holds(awake(Agent),Time),happens(walkStreet12(Agent,Street),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkStreet12(Agent,Street),Time)) ,     cl(      holds(at_loc(Agent,side1(Street)),Time),           happens(walkStreet12(Agent,Street),Time))).
 %  % =================================.


% [agent,street,time]
% Happens(WalkStreet21(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(street)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',604).
%~ From E:
%~ 
%~ happens(walkStreet21(Agent,Street),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(at_loc(Agent,side2(Street)),Time))
%~ cpc :- happens(walkStreet21(Agent,Street),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(at_loc(Agent,side2(Street)),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(walkStreet21(Agent,Street),Time)]),     cl(      [   holds(standing(Agent),Time)],           [        happens(walkStreet21(Agent,Street),Time)]),     cl(      [   holds(at_loc(Agent,side2(Street)),Time)],           [        happens(walkStreet21(Agent,Street),Time)])]
( cl(holds(awake(Agent),Time),happens(walkStreet21(Agent,Street),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkStreet21(Agent,Street),Time)) ,     cl(      holds(at_loc(Agent,side2(Street)),Time),           happens(walkStreet21(Agent,Street),Time))).
 %  ( cl(holds(awake(Agent),Time),happens(walkStreet21(Agent,Street),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkStreet21(Agent,Street),Time)) ,     cl(      holds(at_loc(Agent,side2(Street)),Time),           happens(walkStreet21(Agent,Street),Time))).
 %  % =================================.


%; Effect axioms state that
%; if an agent walks from one end of a street to another,
%; the agent will be at the other end of the street:
% [agent,street,location,time]
% Side2(street)=location ->
% Initiates(WalkStreet12(agent,street),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',612).
%~ From E:
%~ 
%~ side2(Street) =         Location ->         initiates_at(walkStreet12(Agent,Street),at_loc(Agent,Location),Time)
%~ cpc :- if(    initiates(walkStreet12(Agent,Street),at(at_loc(Agent,Location),Time)),       side2(Street,Location))
%~ ooo :- [   cl(    [   if(    initiates(walkStreet12(Agent,Street),at(at_loc(Agent,Location),Time)),       side2(Street,Location))],       [])]
cl(    (     (         walkStreet12(Agent,Street) initiates         at_loc(Agent,Location)at Time) if     side2(Street,Location)),       []).
 %  cl(    if(    initiates(walkStreet12(Agent,Street),at(at_loc(Agent,Location),Time)),       side2(Street,Location)),       []).
 %  % =================================.


% [agent,street,location,time]
% Side1(street)=location ->
% Initiates(WalkStreet21(agent,street),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',617).
%~ From E:
%~ 
%~ side1(Street) =         Location ->         initiates_at(walkStreet21(Agent,Street),at_loc(Agent,Location),Time)
%~ cpc :- if(    initiates(walkStreet21(Agent,Street),at(at_loc(Agent,Location),Time)),       side1(Street,Location))
%~ ooo :- [   cl(    [   if(    initiates(walkStreet21(Agent,Street),at(at_loc(Agent,Location),Time)),       side1(Street,Location))],       [])]
cl(    (     (         walkStreet21(Agent,Street) initiates         at_loc(Agent,Location)at Time) if     side1(Street,Location)),       []).
 %  cl(    if(    initiates(walkStreet21(Agent,Street),at(at_loc(Agent,Location),Time)),       side1(Street,Location)),       []).
 %  % =================================.


% [agent,street,location,time]
% Side1(street)=location ->
% Terminates(WalkStreet12(agent,street),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',621).
%~ From E:
%~ 
%~ side1(Street) =         Location ->         terminates_at(walkStreet12(Agent,Street),at_loc(Agent,Location),Time)
%~ cpc :- if(    terminates( walkStreet12(Agent,Street),   at(at_loc(Agent,Location),Time)),       side1(Street,Location))
%~ ooo :- [   cl(    [   if(    terminates( walkStreet12(Agent,Street),   at(at_loc(Agent,Location),Time)),       side1(Street,Location))],       [])]
cl(    (     (         walkStreet12(Agent,Street) terminates         at_loc(Agent,Location)at Time) if     side1(Street,Location)),       []).
 %  cl(    if(    terminates( walkStreet12(Agent,Street),   at(at_loc(Agent,Location),Time)),       side1(Street,Location)),       []).
 %  % =================================.


% [agent,street,location,time]
% Side2(street)=location ->
% Terminates(WalkStreet21(agent,street),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',625).
%~ From E:
%~ 
%~ side2(Street) =         Location ->         terminates_at(walkStreet21(Agent,Street),at_loc(Agent,Location),Time)
%~ cpc :- if(    terminates( walkStreet21(Agent,Street),   at(at_loc(Agent,Location),Time)),       side2(Street,Location))
%~ ooo :- [   cl(    [   if(    terminates( walkStreet21(Agent,Street),   at(at_loc(Agent,Location),Time)),       side2(Street,Location))],       [])]
cl(    (     (         walkStreet21(Agent,Street) terminates         at_loc(Agent,Location)at Time) if     side2(Street,Location)),       []).
 %  cl(    if(    terminates( walkStreet21(Agent,Street),   at(at_loc(Agent,Location),Time)),       side2(Street,Location)),       []).
 %  % =================================.


%; floors
%; The floor of room is integer.

% function Floor(room): integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',630).
%~ From E:
%~ 
%~ function(floor(room),integer)
function(floor(room),integer).
%; walking up and down staircases
%; agent walks down staircase.

% event WalkDownStaircase(agent,staircase)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',635).
%~ From E:
%~ 
%~ event( walkDownStaircase(agent,staircase))
%~ cpc :- events([walkDownStaircase/2])
%~ ooo :- [   cl([events([walkDownStaircase/2])],[])]
%~ cpc :- actions([walkDownStaircase/2])
%~ ooo :- [   cl([actions([walkDownStaircase/2])],[])]
%~ cpc :- mpred_prop(walkDownStaircase(agent,staircase),action)
%~ ooo :- [   cl([mpred_prop(walkDownStaircase(agent,staircase),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',635).
( cl(events(walkDownStaircase/2),[])  ,    cl(mpred_prop(walkDownStaircase(agent,staircase),action),[]) ,     cl(actions(walkDownStaircase/2),[])).


%; agent walks up staircase.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',638).
% event WalkUpStaircase(agent,staircase)
%~ From E:
%~ 
%~ event( walkUpStaircase(agent,staircase))
%~ cpc :- events([walkUpStaircase/2])
%~ ooo :- [   cl([events([walkUpStaircase/2])],[])]
%~ cpc :- actions([walkUpStaircase/2])
%~ ooo :- [   cl([actions([walkUpStaircase/2])],[])]
%~ cpc :- mpred_prop(walkUpStaircase(agent,staircase),action)
%~ ooo :- [   cl([mpred_prop(walkUpStaircase(agent,staircase),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',638).
( cl(events(walkUpStaircase/2),[])  ,    cl(mpred_prop(walkUpStaircase(agent,staircase),action),[]) ,     cl(actions(walkUpStaircase/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',640).
%; Precondition axioms state that
%; for an agent to walk down (up) a staircase,
%; the agent must be awake, standing, and
%; at the top (bottom) of the staircase:
% [agent,staircase,time]
% Happens(WalkDownStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(staircase)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',644).
%~ From E:
%~ 
%~ happens(walkDownStaircase(Agent,Staircase),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(at_loc(Agent,side2(Staircase)),Time))
%~ cpc :- happens(walkDownStaircase(Agent,Staircase),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(at_loc(Agent,side2(Staircase)),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(walkDownStaircase(Agent,Staircase),Time)]),     cl(      [   holds(standing(Agent),Time)],           [        happens(walkDownStaircase(Agent,Staircase),Time)]),     cl(      [   holds(at_loc(Agent,side2(Staircase)),Time)],           [        happens(walkDownStaircase(Agent,Staircase),Time)])]
( cl(    holds(awake(Agent),Time),       happens(walkDownStaircase(Agent,Staircase),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkDownStaircase(Agent,Staircase),Time)) ,     cl(      holds(at_loc(Agent,side2(Staircase)),Time),           happens(walkDownStaircase(Agent,Staircase),Time))).
 %  ( cl(    holds(awake(Agent),Time),       happens(walkDownStaircase(Agent,Staircase),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkDownStaircase(Agent,Staircase),Time)) ,     cl(      holds(at_loc(Agent,side2(Staircase)),Time),           happens(walkDownStaircase(Agent,Staircase),Time))).
 %  % =================================.


% [agent,staircase,time]
% Happens(WalkUpStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(staircase)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',651).
%~ From E:
%~ 
%~ happens(walkUpStaircase(Agent,Staircase),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(at_loc(Agent,side1(Staircase)),Time))
%~ cpc :- happens(walkUpStaircase(Agent,Staircase),Time) ->         ( holds(awake(Agent),Time)  ,    holds(standing(Agent),Time) ,     holds(at_loc(Agent,side1(Staircase)),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(walkUpStaircase(Agent,Staircase),Time)]),     cl(      [   holds(standing(Agent),Time)],           [        happens(walkUpStaircase(Agent,Staircase),Time)]),     cl(      [   holds(at_loc(Agent,side1(Staircase)),Time)],           [        happens(walkUpStaircase(Agent,Staircase),Time)])]
( cl(    holds(awake(Agent),Time),       happens(walkUpStaircase(Agent,Staircase),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkUpStaircase(Agent,Staircase),Time)) ,     cl(      holds(at_loc(Agent,side1(Staircase)),Time),           happens(walkUpStaircase(Agent,Staircase),Time))).
 %  ( cl(    holds(awake(Agent),Time),       happens(walkUpStaircase(Agent,Staircase),Time))  ,    cl(      holds(standing(Agent),Time),           happens(walkUpStaircase(Agent,Staircase),Time)) ,     cl(      holds(at_loc(Agent,side1(Staircase)),Time),           happens(walkUpStaircase(Agent,Staircase),Time))).
 %  % =================================.


%; Effect axioms state that
%; if an agent walks down (up) a staircase,
%; the agent will be at the bottom (top) of the staircase:
% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Initiates(WalkDownStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',659).
%~ From E:
%~ 
%~ side1(Staircase) =         Room ->         initiates_at( walkDownStaircase(Agent,Staircase),   at_loc(Agent,Room),     Time)
%~ cpc :- if(    initiates( walkDownStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side1(Staircase,Room))
%~ ooo :- [   cl(    [   if(    initiates( walkDownStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side1(Staircase,Room))],       [])]
cl(    (     (         walkDownStaircase(Agent,Staircase) initiates         at_loc(Agent,Room)at Time) if     side1(Staircase,Room)),       []).
 %  cl(    if(    initiates( walkDownStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side1(Staircase,Room)),       []).
 %  % =================================.


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Terminates(WalkDownStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',664).
%~ From E:
%~ 
%~ side2(Staircase) =         Room ->         terminates_at( walkDownStaircase(Agent,Staircase),   at_loc(Agent,Room),     Time)
%~ cpc :- if(    terminates( walkDownStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side2(Staircase,Room))
%~ ooo :- [   cl(    [   if(    terminates( walkDownStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side2(Staircase,Room))],       [])]
cl(    (     (         walkDownStaircase(Agent,Staircase) terminates         at_loc(Agent,Room)at Time) if     side2(Staircase,Room)),       []).
 %  cl(    if(    terminates( walkDownStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side2(Staircase,Room)),       []).
 %  % =================================.


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Initiates(WalkUpStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',668).
%~ From E:
%~ 
%~ side2(Staircase) =         Room ->         initiates_at( walkUpStaircase(Agent,Staircase),   at_loc(Agent,Room),     Time)
%~ cpc :- if(    initiates( walkUpStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side2(Staircase,Room))
%~ ooo :- [   cl(    [   if(    initiates( walkUpStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side2(Staircase,Room))],       [])]
cl(    (     (         walkUpStaircase(Agent,Staircase) initiates         at_loc(Agent,Room)at Time) if     side2(Staircase,Room)),       []).
 %  cl(    if(    initiates( walkUpStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side2(Staircase,Room)),       []).
 %  % =================================.


% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Terminates(WalkUpStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',672).
%~ From E:
%~ 
%~ side1(Staircase) =         Room ->         terminates_at( walkUpStaircase(Agent,Staircase),   at_loc(Agent,Room),     Time)
%~ cpc :- if(    terminates( walkUpStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side1(Staircase,Room))
%~ ooo :- [   cl(    [   if(    terminates( walkUpStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side1(Staircase,Room))],       [])]
cl(    (     (         walkUpStaircase(Agent,Staircase) terminates         at_loc(Agent,Room)at Time) if     side1(Staircase,Room)),       []).
 %  cl(    if(    terminates( walkUpStaircase(Agent,Staircase),   at(at_loc(Agent,Room),Time)),       side1(Staircase,Room)),       []).
 %  % =================================.


%; A state constraint says that if an agent is outside,
%; the agent is dressed.
% [agent,outside,time]
% HoldsAt(At(agent,outside),time) ->
% HoldsAt(Dressed(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',677).
%~ From E:
%~ 
%~ holds(at_loc(Agent,Outside),Time) ->         holds(dressed(Agent),Time)
%~ cpc :- holds(at_loc(Agent,Outside),Time) ->         holds(dressed(Agent),Time)
%~ ooo :- [   cl(    [   holds(dressed(Agent),Time)],       [      holds(at_loc(Agent,Outside),Time)])]
cl(holds(dressed(Agent),Time),holds(at_loc(Agent,Outside),Time)).
 %  cl(holds(dressed(Agent),Time),holds(at_loc(Agent,Outside),Time)).
 %  % =================================.


%; room looks out onto outside.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',682).
% function LookOutOnto(room): outside
%~ From E:
%~ 
%~ function(lookOutOnto(room),outside)
function(lookOutOnto(room),outside).
%; location1 is adjacent to location2.

% predicate Adjacent(location,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',684).
%~ From E:
%~ 
%~ predicate( adjacent(location,location))
%~ cpc :- predicates([adjacent/2])
%~ ooo :- [   cl([predicates([adjacent/2])],[])]
%~ cpc :- mpred_prop(adjacent(location,location),predicate)
%~ ooo :- [   cl([mpred_prop(adjacent(location,location),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',684).
cl(mpred_prop(adjacent(location,location),predicate),[]),cl(predicates(adjacent/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',687).
%; A state constraint says that
%; two locations are adjacent if and only if
%; they have a portal in common:
% [location1,location2]
 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',690).
% Adjacent(location1,location2) <->
% {portal}% 
% (Side1(portal)=location1 &
%  Side2(portal)=location2) |
% (Side2(portal)=location1 &
%  Side1(portal)=location2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',690).
%~ From E:
%~ 
%~ exists( Portal,   (     adjacent(Location1,Location2) <->     (         side1(Portal)=Location1,side2(Portal)=Location2 ;         side2(Portal)=Location1,side1(Portal)=Location2)))
%~ cpc :- exists( Portal,   (     adjacent(Location1,Location2) <->     (         side1(Portal)=Location1,side2(Portal)=Location2 ;         side2(Portal)=Location1,side1(Portal)=Location2)))
%~ ooo :- [   cl(    [   exists( Portal,   (     ( equals(side1(Portal),Location1),equals(side2(Portal),Location2)  ;        equals(side2(Portal),Location1),equals(side1(Portal),Location2) ;         not(adjacent(Location1,Location2))) ,     (         adjacent(Location1,Location2) ;         (             (                 not( equals(side1(Portal),Location1)) ;                 not( equals(side2(Portal),Location2))) ,             (                 not( equals(side2(Portal),Location1)) ;                 not( equals(side1(Portal),Location2)))))))],       [])]
cl(    exists( Portal,   (     ( equals(side1(Portal),Location1),equals(side2(Portal),Location2)  ;        equals(side2(Portal),Location1),equals(side1(Portal),Location2) ;         not adjacent(Location1,Location2)) ,     (         adjacent(Location1,Location2) ;         (             (                 not( equals(side1(Portal),Location1)) ;                 not( equals(side2(Portal),Location2))) ,             (                 not( equals(side2(Portal),Location1)) ;                 not( equals(side1(Portal),Location2))))))),       []).
 %  cl(    exists( Portal,   (     ( equals(side1(Portal),Location1),equals(side2(Portal),Location2)  ;        equals(side2(Portal),Location1),equals(side1(Portal),Location2) ;         not(adjacent(Location1,Location2))) ,     (         adjacent(Location1,Location2) ;         (             (                 not( equals(side1(Portal),Location1)) ;                 not( equals(side2(Portal),Location2))) ,             (                 not( equals(side2(Portal),Location1)) ;                 not( equals(side1(Portal),Location2))))))),       []).
 %  % =================================.


%; The ground of outside is ground.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',698).
% function GroundOf(outside): ground
%~ From E:
%~ 
%~ function(groundOf(outside),ground)
function(groundOf(outside),ground).
%; The sky of outside is sky.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',700).
% function SkyOf(outside): sky
%~ From E:
%~ 
%~ function(skyOf(outside),sky)
function(skyOf(outside),sky).
%; State constraints fix the location of ground and sky:
% [outside,ground,time]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',704).
% GroundOf(outside) = ground ->
% HoldsAt(At(ground,outside),time).
%~ From E:
%~ 
%~ groundOf(Outside) =         Ground ->         holds(at_loc(Ground,Outside),Time)
%~ cpc :- groundOf(Outside) =         Ground ->         holds(at_loc(Ground,Outside),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Ground,Outside),Time)],       [      equals(groundOf(Outside),Ground)])]
cl(    holds(at_loc(Ground,Outside),Time),       equals(groundOf(Outside),Ground)).
 %  cl(    holds(at_loc(Ground,Outside),Time),       equals(groundOf(Outside),Ground)).
 %  % =================================.


% [outside,sky,time]
% SkyOf(outside) = sky ->
% HoldsAt(At(sky,outside),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',708).
%~ From E:
%~ 
%~ skyOf(Outside) =         Sky ->         holds(at_loc(Sky,Outside),Time)
%~ cpc :- skyOf(Outside) =         Sky ->         holds(at_loc(Sky,Outside),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Sky,Outside),Time)],       [      equals(skyOf(Outside),Sky)])]
cl(holds(at_loc(Sky,Outside),Time),equals(skyOf(Outside),Sky)).
 %  cl(holds(at_loc(Sky,Outside),Time),equals(skyOf(Outside),Sky)).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/OTSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OTSpace: object-scale topological space
%;
%; The OTSpace representation deals with topological space at
%; the scale of objects such as agents (humans and animals)
%; and physical objects.
%;
%; PartOf
%; physobj is a part of object.

% predicate PartOf(physobj,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',738).
%~ From E:
%~ 
%~ predicate( partOf(physobj,object))
%~ cpc :- predicates([partOf/2])
%~ ooo :- [   cl([predicates([partOf/2])],[])]
%~ cpc :- mpred_prop(partOf(physobj,object),predicate)
%~ ooo :- [   cl([mpred_prop(partOf(physobj,object),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',738).
cl(mpred_prop(partOf(physobj,object),predicate),[]),cl(predicates(partOf/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',741).
%; A state constraint says that if a physical object
%; is part of an object, the location of the
%; physical object is the same as the location of the object:
% [physobj,object,location,time]
% PartOf(physobj,object) &
% HoldsAt(At(object,location),time) ->
% HoldsAt(At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',744).
%~ From E:
%~ 
%~ partOf(Physobj,Object),holds(at_loc(Object,Location),Time) ->         holds(at_loc(Physobj,Location),Time)
%~ cpc :- partOf(Physobj,Object),holds(at_loc(Object,Location),Time) ->         holds(at_loc(Physobj,Location),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Physobj,Location),Time)],       [      partOf(Physobj,Object),           holds(at_loc(Object,Location),Time)])]
cl(    holds(at_loc(Physobj,Location),Time),       partOf(Physobj,Object),holds(at_loc(Object,Location),Time)).
 %  cl(    holds(at_loc(Physobj,Location),Time),       partOf(Physobj,Object),holds(at_loc(Object,Location),Time)).
 %  % =================================.


%; rolling a snowball bigger
%; agent rolls stuff1 along stuff2.

% event RollAlong(agent,stuff,stuff)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',751).
%~ From E:
%~ 
%~ event( rollAlong(agent,stuff,stuff))
%~ cpc :- events([rollAlong/3])
%~ ooo :- [   cl([events([rollAlong/3])],[])]
%~ cpc :- actions([rollAlong/3])
%~ ooo :- [   cl([actions([rollAlong/3])],[])]
%~ cpc :- mpred_prop(rollAlong(agent,stuff,stuff),action)
%~ ooo :- [   cl([mpred_prop(rollAlong(agent,stuff,stuff),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',751).
( cl(events(rollAlong/3),[])  ,    cl(mpred_prop(rollAlong(agent,stuff,stuff),action),[]) ,     cl(actions(rollAlong/3),[])).


%; The diameter of ball is diameter.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',754).
% fluent Diameter(ball,diameter)
%~ From E:
%~ 
%~ fluent( diameter(ball,diameter))
%~ cpc :- fluents([diameter/2])
%~ ooo :- [   cl([fluents([diameter/2])],[])]
%~ cpc :- mpred_prop(diameter(ball,diameter),fluent)
%~ ooo :- [   cl([mpred_prop(diameter(ball,diameter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',754).
cl(mpred_prop(diameter(ball,diameter),fluent),[]),cl(fluents(diameter/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',756).
%; A state constraint says that a ball has a unique diameter:
% [ball,diameter1,diameter2,time]
% HoldsAt(Diameter(ball,diameter1),time) &
% HoldsAt(Diameter(ball,diameter2),time) ->
% diameter1=diameter2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',758).
%~ From E:
%~ 
%~ (     holds(diameter(Ball,Diameter1),Time) ,     holds(diameter(Ball,Diameter2),Time)) ->         Diameter1=Diameter2
%~ cpc :- (     holds(diameter(Ball,Diameter1),Time) ,     holds(diameter(Ball,Diameter2),Time)) ->         Diameter1=Diameter2
%~ ooo :- [   cl(    [   equals(Diameter1,Diameter2)],       [      holds(diameter(Ball,Diameter1),Time),           holds(diameter(Ball,Diameter2),Time)])]
cl( equals(Diameter1,Diameter2),   (     holds(diameter(Ball,Diameter1),Time) ,     holds(diameter(Ball,Diameter2),Time))).
 %  cl( equals(Diameter1,Diameter2),   (     holds(diameter(Ball,Diameter1),Time) ,     holds(diameter(Ball,Diameter2),Time))).
 %  % =================================.


%; Effect axiom state that if an agent rolls some snow along
%; some other snow, the diameter of the first snow will increase:
% [agent,snow1,snow2,diameter1,diameter2,time]
% HoldsAt(Diameter(snow1,diameter1),time) &
% diameter2 = diameter1+1 ->
% Initiates(RollAlong(agent,snow1,snow2),
%           Diameter(snow1,diameter2),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',764).
%~ From E:
%~ 
%~ (     holds(diameter(Snow1,Diameter1),Time) ,       Diameter2 =             Diameter1+1) ->         initiates_at( rollAlong(Agent,Snow1,Snow2),   diameter(Snow1,Diameter2),     Time)
%~ cpc :- holds(diameter(Snow1,Diameter1),Time)
%~ ooo :- [   cl([holds(diameter(Snow1,Diameter1),Time)],[])]
%~ cpc :- Diameter2 =         Diameter1+1
%~ ooo :- [   cl([equals(Diameter2,Diameter1+1)],[])]
%~ cpc :- if(    initiates( rollAlong(Agent,Snow1,Snow2),   at(diameter(Snow1,Diameter2),Time)),       (           cl([holds(diameter(Snow1,Diameter1),Time)],[]) ,           cl([equals(Diameter2,Diameter1+1)],[])))
%~ ooo :- [   cl(    [   if(    initiates( rollAlong(Agent,Snow1,Snow2),   at(diameter(Snow1,Diameter2),Time)),       (           cl([holds(diameter(Snow1,Diameter1),Time)],[]) ,           cl([equals(Diameter2,Diameter1+1)],[])))],       [])]
cl(    (     (         rollAlong(Agent,Snow1,Snow2) initiates         diameter(Snow1,Diameter2)at Time) if     (         cl(holds(diameter(Snow1,Diameter1),Time),[]) ,         cl(equals(Diameter2,Diameter1+1),[]))),       []).
 %  cl(    if(    initiates( rollAlong(Agent,Snow1,Snow2),   at(diameter(Snow1,Diameter2),Time)),       (           cl(holds(diameter(Snow1,Diameter1),Time),[]) ,           cl(equals(Diameter2,Diameter1+1),[]))),       []).
 %  % =================================.


% [agent,snow1,snow2,diameter1,time]
% HoldsAt(Diameter(snow1,diameter1),time) ->
% Terminates(RollAlong(agent,snow1,snow2),
%            Diameter(snow1,diameter1),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',772).
%~ From E:
%~ 
%~ holds(diameter(Snow1,Diameter1),Time) ->         terminates_at( rollAlong(Agent,Snow1,Snow2),   diameter(Snow1,Diameter1),     Time)
%~ cpc :- holds(diameter(Snow1,Diameter1),Time)
%~ ooo :- [   cl([holds(diameter(Snow1,Diameter1),Time)],[])]
%~ cpc :- if(    terminates( rollAlong(Agent,Snow1,Snow2),   at(diameter(Snow1,Diameter1),Time)),       cl([holds(diameter(Snow1,Diameter1),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates( rollAlong(Agent,Snow1,Snow2),   at(diameter(Snow1,Diameter1),Time)),       cl([holds(diameter(Snow1,Diameter1),Time)],[]))],       [])]
cl(    (     (         rollAlong(Agent,Snow1,Snow2) terminates         diameter(Snow1,Diameter1)at Time) if     cl(holds(diameter(Snow1,Diameter1),Time),[])),       []).
 %  cl(    if(    terminates( rollAlong(Agent,Snow1,Snow2),   at(diameter(Snow1,Diameter1),Time)),       cl(holds(diameter(Snow1,Diameter1),Time),[])),       []).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to roll some snow along some other snow,
%; there must be a location such that
%; the agent is at the location,
%; the first snow is at the location, and
%; the second snow is at the location:
%;[agent,snow1,snow2,time]
%;Happens(RollAlong(agent,snow1,snow2),time) ->
%;{location}
%;HoldsAt(At(agent,location),time) &
%;HoldsAt(At(snow1,location),time) &
%;HoldsAt(At(snow2,location),time).
%; motion
%; object moves (in place).

% event Move(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',792).
%~ From E:
%~ 
%~ event( move(object))
%~ cpc :- events([move/1])
%~ ooo :- [   cl([events([move/1])],[])]
%~ cpc :- mpred_prop(move(object),event)
%~ ooo :- [   cl([mpred_prop(move(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',792).
cl(mpred_prop(move(object),event),[]),cl(events(move/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',795).
%; Holding
%; agent is holding physobj.

% fluent Holding(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',797).
%~ From E:
%~ 
%~ fluent( holding(agent,physobj))
%~ cpc :- fluents([holding/2])
%~ ooo :- [   cl([fluents([holding/2])],[])]
%~ cpc :- mpred_prop(holding(agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(holding(agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',797).
cl(mpred_prop(holding(agent,physobj),fluent),[]),cl(fluents(holding/2),[]).


%; agent holds or picks up physobj.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',800).
% event Hold(agent,physobj)
%~ From E:
%~ 
%~ event( hold(agent,physobj))
%~ cpc :- events([hold/2])
%~ ooo :- [   cl([events([hold/2])],[])]
%~ cpc :- actions([hold/2])
%~ ooo :- [   cl([actions([hold/2])],[])]
%~ cpc :- mpred_prop(hold(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(hold(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',800).
( cl(events(hold/2),[])  ,    cl(mpred_prop(hold(agent,physobj),action),[]) ,     cl(actions(hold/2),[])).


%; agent picks up some stuff1 from stuff2.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',802).
% event HoldSome(agent,stuff,stuff)
%~ From E:
%~ 
%~ event( holdSome(agent,stuff,stuff))
%~ cpc :- events([holdSome/3])
%~ ooo :- [   cl([events([holdSome/3])],[])]
%~ cpc :- actions([holdSome/3])
%~ ooo :- [   cl([actions([holdSome/3])],[])]
%~ cpc :- mpred_prop(holdSome(agent,stuff,stuff),action)
%~ ooo :- [   cl([mpred_prop(holdSome(agent,stuff,stuff),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',802).
( cl(events(holdSome/3),[])  ,    cl(mpred_prop(holdSome(agent,stuff,stuff),action),[]) ,     cl(actions(holdSome/3),[])).


%; agent releases or lets go of physobj.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',804).
% event LetGoOf(agent,physobj)
%~ From E:
%~ 
%~ event( letGoOf(agent,physobj))
%~ cpc :- events([letGoOf/2])
%~ ooo :- [   cl([events([letGoOf/2])],[])]
%~ cpc :- actions([letGoOf/2])
%~ ooo :- [   cl([actions([letGoOf/2])],[])]
%~ cpc :- mpred_prop(letGoOf(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(letGoOf(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',804).
( cl(events(letGoOf/2),[])  ,    cl(mpred_prop(letGoOf(agent,physobj),action),[]) ,     cl(actions(letGoOf/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',806).
%; An effect axiom states that if an agent holds
%; a physical object, the agent will be holding the
%; physical object:
% [agent,physobj,time]
% Initiates(Hold(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',809).
%~ From E:
%~ 
%~ initiates_at(hold(Agent,Physobj),holding(Agent,Physobj),Time)
%~ cpc :- initiates(hold(Agent,Physobj),holding(Agent,Physobj),Time)
%~ ooo :- [   cl(    [   initiates(hold(Agent,Physobj),holding(Agent,Physobj),Time)],       [])]
cl(initiates(hold(Agent,Physobj),holding(Agent,Physobj),Time),[]).
 %  cl(initiates(hold(Agent,Physobj),holding(Agent,Physobj),Time),[]).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to hold a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
%;[agent,physobj,time]
%;Happens(Hold(agent,physobj),time) ->
%;{location}
%;  HoldsAt(At(agent,location),time) &
%;  HoldsAt(At(physobj,location),time).
%; An effect axiom states that if an agent
%; lets go of a physical object, the agent is no longer holding
%; the physical object:
% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',826).
%~ From E:
%~ 
%~ terminates_at(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time)
%~ cpc :- terminates(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time)
%~ ooo :- [   cl(    [   terminates(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time)],       [])]
cl(terminates(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time),[]).
 %  cl(terminates(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time),[]).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to let go of a physical object,
%; the agent must be holding the physical object:
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',832).
%~ From E:
%~ 
%~ happens(letGoOf(Agent,Physobj),Time) ->         holds(holding(Agent,Physobj),Time)
%~ cpc :- happens(letGoOf(Agent,Physobj),Time) ->         holds(holding(Agent,Physobj),Time)
%~ ooo :- [   cl(    [   holds(holding(Agent,Physobj),Time)],       [      happens(letGoOf(Agent,Physobj),Time)])]
cl(    holds(holding(Agent,Physobj),Time),       happens(letGoOf(Agent,Physobj),Time)).
 %  cl(    holds(holding(Agent,Physobj),Time),       happens(letGoOf(Agent,Physobj),Time)).
 %  % =================================.


%; A releases axiom states that if an agent holds
%; a physical object,
%; the physical object's location will be released
%; from inertia:
% [agent,physobj,location,time]
% Releases(Hold(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',840).
%~ From E:
%~ 
%~ releases_at(hold(Agent,Physobj),at_loc(Physobj,Location),Time)
%~ cpc :- releases(hold(Agent,Physobj),at_loc(Physobj,Location),Time)
%~ ooo :- [   cl(    [   releases(hold(Agent,Physobj),at_loc(Physobj,Location),Time)],       [])]
cl(releases(hold(Agent,Physobj),at_loc(Physobj,Location),Time),[]).
 %  cl(releases(hold(Agent,Physobj),at_loc(Physobj,Location),Time),[]).
 %  % =================================.


%; A state constraint says that if an agent is holding
%; a physical object and the agent is at a location,
%; the physical object is also at the location:
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',846).
%~ From E:
%~ 
%~ (     holds(holding(Agent,Physobj),Time) ,     holds(at_loc(Agent,Location),Time)) ->         holds(at_loc(Physobj,Location),Time)
%~ cpc :- (     holds(holding(Agent,Physobj),Time) ,     holds(at_loc(Agent,Location),Time)) ->         holds(at_loc(Physobj,Location),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Physobj,Location),Time)],       [      holds(holding(Agent,Physobj),Time),           holds(at_loc(Agent,Location),Time)])]
cl(    holds(at_loc(Physobj,Location),Time),       (           holds(holding(Agent,Physobj),Time) ,           holds(at_loc(Agent,Location),Time))).
 %  cl(    holds(at_loc(Physobj,Location),Time),       (           holds(holding(Agent,Physobj),Time) ,           holds(at_loc(Agent,Location),Time))).
 %  % =================================.


%; A releases axiom states that if an agent holds
%; a physical object,
%; the locations of the parts of the physical object
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj2),At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',855).
%~ From E:
%~ 
%~ partOf(Physobj1,Physobj2) ->         releases_at(hold(Agent,Physobj2),at_loc(Physobj1,Location),Time)
%~ cpc :- partOf(Physobj1,Physobj2)
%~ ooo :- [   cl([partOf(Physobj1,Physobj2)],[])]
%~ cpc :- if(    terminates(hold(Agent,Physobj2),at(at_loc(Physobj1,Location),Time)),       cl([partOf(Physobj1,Physobj2)],[]))
%~ ooo :- [   cl(    [   if(    terminates(hold(Agent,Physobj2),at(at_loc(Physobj1,Location),Time)),       cl([partOf(Physobj1,Physobj2)],[]))],       [])]
cl(    (     hold(Agent,Physobj2)terminates at_loc(Physobj1,Location)at Time if     cl(partOf(Physobj1,Physobj2),[])),       []).
 %  cl(    if(    terminates(hold(Agent,Physobj2),at(at_loc(Physobj1,Location),Time)),       cl(partOf(Physobj1,Physobj2),[])),       []).
 %  % =================================.


%; Further, if an agent holds a physical object,
%; the locations of the physical objects of which
%; the physical object is a part
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj1),At(physobj2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',863).
%~ From E:
%~ 
%~ partOf(Physobj1,Physobj2) ->         releases_at(hold(Agent,Physobj1),at_loc(Physobj2,Location),Time)
%~ cpc :- partOf(Physobj1,Physobj2)
%~ ooo :- [   cl([partOf(Physobj1,Physobj2)],[])]
%~ cpc :- if(    terminates(hold(Agent,Physobj1),at(at_loc(Physobj2,Location),Time)),       cl([partOf(Physobj1,Physobj2)],[]))
%~ ooo :- [   cl(    [   if(    terminates(hold(Agent,Physobj1),at(at_loc(Physobj2,Location),Time)),       cl([partOf(Physobj1,Physobj2)],[]))],       [])]
cl(    (     hold(Agent,Physobj1)terminates at_loc(Physobj2,Location)at Time if     cl(partOf(Physobj1,Physobj2),[])),       []).
 %  cl(    if(    terminates(hold(Agent,Physobj1),at(at_loc(Physobj2,Location),Time)),       cl(partOf(Physobj1,Physobj2),[])),       []).
 %  % =================================.


%;[agent,physobj,location1,location2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% (!{object} PartOf(physobj,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',873).
%~ From E:
%~ 
%~ (     not( thereExists(Object,partOf(Physobj,Object))) ,     holds(at_loc(Agent,Location),Time)) ->         initiates_at(letGoOf(Agent,Physobj),at_loc(Physobj,Location),Time)
%~ cpc :- not( thereExists(Object,partOf(Physobj,Object)))
%~ ooo :- [   cl([exists(Object,not(partOf(Physobj,Object)))],[])]
%~ cpc :- holds(at_loc(Agent,Location),Time)
%~ ooo :- [   cl([holds(at_loc(Agent,Location),Time)],[])]
%~ cpc :- if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       (           cl([exists(Object,not(partOf(Physobj,Object)))],[]) ,           cl([holds(at_loc(Agent,Location),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       (           cl([exists(Object,not(partOf(Physobj,Object)))],[]) ,           cl([holds(at_loc(Agent,Location),Time)],[])))],       [])]
cl(    (     letGoOf(Agent,Physobj)initiates at_loc(Physobj,Location)at Time if     (         cl(exists(Object,not partOf(Physobj,Object)),[]) ,         cl(holds(at_loc(Agent,Location),Time),[]))),       []).
 %  cl(    if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       (           cl(exists(Object,not(partOf(Physobj,Object))),[]) ,           cl(holds(at_loc(Agent,Location),Time),[]))),       []).
 %  % =================================.


%;[agent,physobj1,physobj2,location1,location2,time]
%;PartOf(physobj1,physobj2) &
%;(!{object} PartOf(physobj2,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj1),At(physobj2,location2),time).
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) &
% (!{object} PartOf(physobj2,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj1),At(physobj2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',885).
%~ From E:
%~ 
%~ ( partOf(Physobj1,Physobj2)  ,    not( thereExists(Object,partOf(Physobj2,Object))) ,     holds(at_loc(Agent,Location),Time)) ->         initiates_at(letGoOf(Agent,Physobj1),at_loc(Physobj2,Location),Time)
%~ cpc :- partOf(Physobj1,Physobj2)
%~ ooo :- [   cl([partOf(Physobj1,Physobj2)],[])]
%~ cpc :- not( thereExists(Object,partOf(Physobj2,Object)))
%~ ooo :- [   cl([exists(Object,not(partOf(Physobj2,Object)))],[])]
%~ cpc :- holds(at_loc(Agent,Location),Time)
%~ ooo :- [   cl([holds(at_loc(Agent,Location),Time)],[])]
%~ cpc :- if(    initiates(letGoOf(Agent,Physobj1),at(at_loc(Physobj2,Location),Time)),       ( cl([partOf(Physobj1,Physobj2)],[])  ,          cl([exists(Object,not(partOf(Physobj2,Object)))],[]) ,           cl([holds(at_loc(Agent,Location),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates(letGoOf(Agent,Physobj1),at(at_loc(Physobj2,Location),Time)),       ( cl([partOf(Physobj1,Physobj2)],[])  ,          cl([exists(Object,not(partOf(Physobj2,Object)))],[]) ,           cl([holds(at_loc(Agent,Location),Time)],[])))],       [])]
cl(    (     (         letGoOf(Agent,Physobj1) initiates         at_loc(Physobj2,Location)at Time) if     ( cl(partOf(Physobj1,Physobj2),[])  ,        cl(exists(Object,not partOf(Physobj2,Object)),[]) ,         cl(holds(at_loc(Agent,Location),Time),[]))),       []).
 %  cl(    if(    initiates(letGoOf(Agent,Physobj1),at(at_loc(Physobj2,Location),Time)),       ( cl(partOf(Physobj1,Physobj2),[])  ,          cl(exists(Object,not(partOf(Physobj2,Object))),[]) ,           cl(holds(at_loc(Agent,Location),Time),[]))),       []).
 %  % =================================.


%; An effect axiom states that if an agent is at a location
%; and lets go of a physical object, the physical object
%; will be at the location:
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',894).
%~ From E:
%~ 
%~ holds(at_loc(Agent,Location),Time) ->         initiates_at(letGoOf(Agent,Physobj),at_loc(Physobj,Location),Time)
%~ cpc :- holds(at_loc(Agent,Location),Time)
%~ ooo :- [   cl([holds(at_loc(Agent,Location),Time)],[])]
%~ cpc :- if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       cl([holds(at_loc(Agent,Location),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       cl([holds(at_loc(Agent,Location),Time)],[]))],       [])]
cl(    (     letGoOf(Agent,Physobj)initiates at_loc(Physobj,Location)at Time if     cl(holds(at_loc(Agent,Location),Time),[])),       []).
 %  cl(    if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       cl(holds(at_loc(Agent,Location),Time),[])),       []).
 %  % =================================.


%; An effect axiom states that if an agent picks up
%; some stuff out of some other stuff, the agent will
%; be holding the first stuff:
% [agent,stuff1,stuff2,time]
% Initiates(HoldSome(agent,stuff1,stuff2),
%           Holding(agent,stuff1),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',901).
%~ From E:
%~ 
%~ initiates_at( holdSome(Agent,Stuff1,Stuff2),   holding(Agent,Stuff1),     Time)
%~ cpc :- initiates( holdSome(Agent,Stuff1,Stuff2),   holding(Agent,Stuff1),     Time)
%~ ooo :- [   cl(    [   initiates( holdSome(Agent,Stuff1,Stuff2),   holding(Agent,Stuff1),     Time)],       [])]
cl(    initiates( holdSome(Agent,Stuff1,Stuff2),   holding(Agent,Stuff1),     Time),       []).
 %  cl(    initiates( holdSome(Agent,Stuff1,Stuff2),   holding(Agent,Stuff1),     Time),       []).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to pick up some stuff out of some other stuff,
%; the first stuff must be a part of the second stuff and
%; there must be a location such that the agent is at the location,
%; the first stuff is at the location, and the second stuff is
%; at the location:
% [agent,stuff1,stuff2,time]
% Happens(HoldSome(agent,stuff1,stuff2),time) ->
% PartOf(stuff1,stuff2) &
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',912).
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(stuff1,location),time) &
%   HoldsAt(At(stuff2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',915).
%~ From E:
%~ 
%~ exists( Location,   happens(holdSome(Agent,Stuff1,Stuff2),Time) ->         ( partOf(Stuff1,Stuff2)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Stuff1,Location),Time) ,     holds(at_loc(Stuff2,Location),Time)))
%~ cpc :- exists( Location,   happens(holdSome(Agent,Stuff1,Stuff2),Time) ->         ( partOf(Stuff1,Stuff2)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Stuff1,Location),Time) ,     holds(at_loc(Stuff2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( partOf(Stuff1,Stuff2)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Stuff1,Location),Time) ,         holds(at_loc(Stuff2,Location),Time)) ;     not( happens(holdSome(Agent,Stuff1,Stuff2),Time))))],       [])]
cl(    exists( Location,   (     ( partOf(Stuff1,Stuff2)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Stuff1,Location),Time) ,         holds(at_loc(Stuff2,Location),Time)) ;     not( happens(holdSome(Agent,Stuff1,Stuff2),Time)))),       []).
 %  cl(    exists( Location,   (     ( partOf(Stuff1,Stuff2)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Stuff1,Location),Time) ,         holds(at_loc(Stuff2,Location),Time)) ;     not( happens(holdSome(Agent,Stuff1,Stuff2),Time)))),       []).
 %  % =================================.


%; A releases axiom states that if an agent picks up some
%; stuff out of some other stuff,
%; the first stuff's location will be released
%; from inertia:
% [agent,stuff1,stuff2,location,time]
% Releases(HoldSome(agent,stuff1,stuff2),At(stuff1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',924).
%~ From E:
%~ 
%~ releases_at( holdSome(Agent,Stuff1,Stuff2),   at_loc(Stuff1,Location),     Time)
%~ cpc :- releases( holdSome(Agent,Stuff1,Stuff2),   at_loc(Stuff1,Location),     Time)
%~ ooo :- [   cl(    [   releases( holdSome(Agent,Stuff1,Stuff2),   at_loc(Stuff1,Location),     Time)],       [])]
cl(    releases( holdSome(Agent,Stuff1,Stuff2),   at_loc(Stuff1,Location),     Time),       []).
 %  cl(    releases( holdSome(Agent,Stuff1,Stuff2),   at_loc(Stuff1,Location),     Time),       []).
 %  % =================================.


%; Inside
%; physobj1 is inside physobj2.

% fluent Inside(physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',929).
%~ From E:
%~ 
%~ fluent( inside(physobj,physobj))
%~ cpc :- fluents([inside/2])
%~ ooo :- [   cl([fluents([inside/2])],[])]
%~ cpc :- mpred_prop(inside(physobj,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(inside(physobj,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',929).
cl(mpred_prop(inside(physobj,physobj),fluent),[]),cl(fluents(inside/2),[]).


%; agent puts physobj1 inside physobj2.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',932).
% event PutInside(agent,physobj,physobj)
%~ From E:
%~ 
%~ event( putInside(agent,physobj,physobj))
%~ cpc :- events([putInside/3])
%~ ooo :- [   cl([events([putInside/3])],[])]
%~ cpc :- actions([putInside/3])
%~ ooo :- [   cl([actions([putInside/3])],[])]
%~ cpc :- mpred_prop(putInside(agent,physobj,physobj),action)
%~ ooo :- [   cl([mpred_prop(putInside(agent,physobj,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',932).
( cl(events(putInside/3),[])  ,    cl(mpred_prop(putInside(agent,physobj,physobj),action),[]) ,     cl(actions(putInside/3),[])).


%; agent takes physobj1 out of physobj2.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',934).
% event TakeOutOf(agent,physobj,physobj)
%~ From E:
%~ 
%~ event( takeOutOf(agent,physobj,physobj))
%~ cpc :- events([takeOutOf/3])
%~ ooo :- [   cl([events([takeOutOf/3])],[])]
%~ cpc :- actions([takeOutOf/3])
%~ ooo :- [   cl([actions([takeOutOf/3])],[])]
%~ cpc :- mpred_prop(takeOutOf(agent,physobj,physobj),action)
%~ ooo :- [   cl([mpred_prop(takeOutOf(agent,physobj,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',934).
( cl(events(takeOutOf/3),[])  ,    cl(mpred_prop(takeOutOf(agent,physobj,physobj),action),[]) ,     cl(actions(takeOutOf/3),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',936).
%; A state constraint says that a physical object cannot
%; be inside itself:
% [physobj1,physobj2,time]
% HoldsAt(Inside(physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',938).
%~ From E:
%~ 
%~ holds(inside(Physobj1,Physobj2),Time) ->         Physobj1\=Physobj2
%~ cpc :- holds(inside(Physobj1,Physobj2),Time) ->         Physobj1\=Physobj2
%~ ooo :- [   cl(    [   {   dif(Physobj1,Physobj2) }],       [      holds(inside(Physobj1,Physobj2),Time)])]
cl({dif(Physobj1,Physobj2)},holds(inside(Physobj1,Physobj2),Time)).
 %  cl({dif(Physobj1,Physobj2)},holds(inside(Physobj1,Physobj2),Time)).
 %  % =================================.


%; A state constraint says that if a physical object is
%; inside another physical object, the second physical object
%; is not inside the first physical object:
% [physobj1,physobj2,time]
% HoldsAt(Inside(physobj1,physobj2),time) ->
% !HoldsAt(Inside(physobj2,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',945).
%~ From E:
%~ 
%~ holds(inside(Physobj1,Physobj2),Time) ->         holds(not(inside(Physobj2,Physobj1)),Time)
%~ cpc :- holds(inside(Physobj1,Physobj2),Time) ->         holds(not(inside(Physobj2,Physobj1)),Time)
%~ ooo :- [   cl( [], [  [   holds(inside(Physobj2,Physobj1),Time),     holds(inside(Physobj1,Physobj2),Time)])]]
cl( [],   (     holds(inside(Physobj2,Physobj1),Time) ,     holds(inside(Physobj1,Physobj2),Time))).
 %  cl( [],   (     holds(inside(Physobj2,Physobj1),Time) ,     holds(inside(Physobj1,Physobj2),Time))).
 %  % =================================.


%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the first
%; physical object will be inside the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(PutInside(agent,physobj1,physobj2),
%           Inside(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',952).
%~ From E:
%~ 
%~ initiates_at( putInside(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time)
%~ cpc :- initiates( putInside(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time)
%~ ooo :- [   cl(    [   initiates( putInside(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time)],       [])]
cl(    initiates( putInside(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time),       []).
 %  cl(    initiates( putInside(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time),       []).
 %  % =================================.


%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Terminates(PutInside(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',959).
%~ From E:
%~ 
%~ terminates_at( putInside(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ cpc :- terminates( putInside(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ ooo :- [   cl(    [   terminates( putInside(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)],       [])]
cl(    terminates( putInside(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  cl(    terminates( putInside(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to put a physical object inside another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PutInside(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object out of another
%; physical object, the first physical object
%; will no longer be inside the second physical object:
% [agent,physobj1,physobj2,time]
% Terminates(TakeOutOf(agent,physobj1,physobj2),
%            Inside(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',981).
%~ From E:
%~ 
%~ terminates_at( takeOutOf(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time)
%~ cpc :- terminates( takeOutOf(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time)
%~ ooo :- [   cl(    [   terminates( takeOutOf(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time)],       [])]
cl(    terminates( takeOutOf(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time),       []).
 %  cl(    terminates( takeOutOf(Agent,Physobj1,Physobj2),   inside(Physobj1,Physobj2),     Time),       []).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to take a physical object out of another
%; physical object,
%; the first physical object must be inside the second physical object
%; and there must be a location such that
%; the agent is at the location,
%; the first physical object is at the location, and
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% Happens(TakeOutOf(agent,physobj1,physobj2),time) ->
% HoldsAt(Inside(physobj1,physobj2),time) &
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',993).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',996).
%~ From E:
%~ 
%~ exists( Location,   happens(takeOutOf(Agent,Physobj1,Physobj2),Time) ->         ( holds(inside(Physobj1,Physobj2),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj1,Location),Time) ,     holds(at_loc(Physobj2,Location),Time)))
%~ cpc :- exists( Location,   happens(takeOutOf(Agent,Physobj1,Physobj2),Time) ->         ( holds(inside(Physobj1,Physobj2),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj1,Location),Time) ,     holds(at_loc(Physobj2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( holds(inside(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOutOf(Agent,Physobj1,Physobj2),Time))))],       [])]
cl(    exists( Location,   (     ( holds(inside(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOutOf(Agent,Physobj1,Physobj2),Time)))),       []).
 %  cl(    exists( Location,   (     ( holds(inside(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOutOf(Agent,Physobj1,Physobj2),Time)))),       []).
 %  % =================================.


%; A releases axiom states that if an agent puts a physical
%; object inside another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% Releases(PutInside(agent,physobj1,physobj2),
%          At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1005).
%~ From E:
%~ 
%~ releases_at( putInside(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)
%~ cpc :- releases( putInside(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)
%~ ooo :- [   cl(    [   releases( putInside(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)],       [])]
cl(    releases( putInside(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time),       []).
 %  cl(    releases( putInside(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time),       []).
 %  % =================================.


%; A state constraint says that if a physical object is inside
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% HoldsAt(Inside(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1012).
%~ From E:
%~ 
%~ (     holds(inside(Physobj1,Physobj2),Time) ,     holds(at_loc(Physobj2,Location),Time)) ->         holds(at_loc(Physobj1,Location),Time)
%~ cpc :- (     holds(inside(Physobj1,Physobj2),Time) ,     holds(at_loc(Physobj2,Location),Time)) ->         holds(at_loc(Physobj1,Location),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Physobj1,Location),Time)],       [      holds(inside(Physobj1,Physobj2),Time),           holds(at_loc(Physobj2,Location),Time)])]
cl(    holds(at_loc(Physobj1,Location),Time),       (           holds(inside(Physobj1,Physobj2),Time) ,           holds(at_loc(Physobj2,Location),Time))).
 %  cl(    holds(at_loc(Physobj1,Location),Time),       (           holds(inside(Physobj1,Physobj2),Time) ,           holds(at_loc(Physobj2,Location),Time))).
 %  % =================================.


%; An effect axiom states that if an agent takes a physical
%; object out of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Initiates(TakeOutOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1020).
%~ From E:
%~ 
%~ initiates_at( takeOutOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ cpc :- initiates( takeOutOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ ooo :- [   cl(    [   initiates( takeOutOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)],       [])]
cl(    initiates( takeOutOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  cl(    initiates( takeOutOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  % =================================.


%; On
%; physobj1 is on physobj2.

% fluent On(physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1027).
%~ From E:
%~ 
%~ fluent( on(physobj,physobj))
%~ cpc :- fluents([on/2])
%~ ooo :- [   cl([fluents([on/2])],[])]
%~ cpc :- mpred_prop(on(physobj,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(on(physobj,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1027).
cl(mpred_prop(on(physobj,physobj),fluent),[]),cl(fluents(on/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1030).
%; agent places physobj1 on physobj2.

% event PlaceOn(agent,physobj,physobj)
%~ From E:
%~ 
%~ event( placeOn(agent,physobj,physobj))
%~ cpc :- events([placeOn/3])
%~ ooo :- [   cl([events([placeOn/3])],[])]
%~ cpc :- actions([placeOn/3])
%~ ooo :- [   cl([actions([placeOn/3])],[])]
%~ cpc :- mpred_prop(placeOn(agent,physobj,physobj),action)
%~ ooo :- [   cl([mpred_prop(placeOn(agent,physobj,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1030).
( cl(events(placeOn/3),[])  ,    cl(mpred_prop(placeOn(agent,physobj,physobj),action),[]) ,     cl(actions(placeOn/3),[])).


%; agent takes physobj1 off of physobj2.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1033).
% event TakeOffOf(agent,physobj,physobj)
%~ From E:
%~ 
%~ event( takeOffOf(agent,physobj,physobj))
%~ cpc :- events([takeOffOf/3])
%~ ooo :- [   cl([events([takeOffOf/3])],[])]
%~ cpc :- actions([takeOffOf/3])
%~ ooo :- [   cl([actions([takeOffOf/3])],[])]
%~ cpc :- mpred_prop(takeOffOf(agent,physobj,physobj),action)
%~ ooo :- [   cl([mpred_prop(takeOffOf(agent,physobj,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1033).
( cl(events(takeOffOf/3),[])  ,    cl(mpred_prop(takeOffOf(agent,physobj,physobj),action),[]) ,     cl(actions(takeOffOf/3),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1035).
%; A state constraint says that a physical object cannot
%; be on itself:
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1037).
%~ From E:
%~ 
%~ holds(on(Physobj1,Physobj2),Time) ->         Physobj1\=Physobj2
%~ cpc :- holds(on(Physobj1,Physobj2),Time) ->         Physobj1\=Physobj2
%~ ooo :- [   cl(    [   {   dif(Physobj1,Physobj2) }],       [      holds(on(Physobj1,Physobj2),Time)])]
cl({dif(Physobj1,Physobj2)},holds(on(Physobj1,Physobj2),Time)).
 %  cl({dif(Physobj1,Physobj2)},holds(on(Physobj1,Physobj2),Time)).
 %  % =================================.


%; A state constraint says that if a physical object is
%; on another physical object, the second physical object
%; is not on the first physical object:
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1044).
%~ From E:
%~ 
%~ holds(on(Physobj1,Physobj2),Time) ->         holds(not(on(Physobj2,Physobj1)),Time)
%~ cpc :- holds(on(Physobj1,Physobj2),Time) ->         holds(not(on(Physobj2,Physobj1)),Time)
%~ ooo :- [   cl( [], [  [   holds(on(Physobj2,Physobj1),Time),     holds(on(Physobj1,Physobj2),Time)])]]
cl( [],   (     holds(on(Physobj2,Physobj1),Time) ,     holds(on(Physobj1,Physobj2),Time))).
 %  cl( [],   (     holds(on(Physobj2,Physobj1),Time) ,     holds(on(Physobj1,Physobj2),Time))).
 %  % =================================.


%; An effect axiom states that if an agent places a physical
%; object on another physical object, the first
%; physical object will be on the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1051).
%~ From E:
%~ 
%~ initiates_at( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)
%~ cpc :- initiates( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)
%~ ooo :- [   cl(    [   initiates( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)],       [])]
cl(    initiates( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time),       []).
 %  cl(    initiates( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time),       []).
 %  % =================================.


%; An effect axiom states that if an agent places a physical
%; object on another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1058).
%~ From E:
%~ 
%~ terminates_at( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ cpc :- terminates( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ ooo :- [   cl(    [   terminates( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)],       [])]
cl(    terminates( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  cl(    terminates( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to place a physical object on another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PlaceOn(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object off of another
%; physical object, the first physical object
%; will no longer be on the second physical object:
% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1080).
%~ From E:
%~ 
%~ terminates_at( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)
%~ cpc :- terminates( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)
%~ ooo :- [   cl(    [   terminates( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)],       [])]
cl(    terminates( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time),       []).
 %  cl(    terminates( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time),       []).
 %  % =================================.


%; An effect axiom states that if an agent takes a physical
%; object off of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1087).
%~ From E:
%~ 
%~ initiates_at( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ cpc :- initiates( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ ooo :- [   cl(    [   initiates( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)],       [])]
cl(    initiates( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  cl(    initiates( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to take a physical object off of another
%; physical object,
%; the first physical object must be on the second physical object
%; and there must be a location such that
%; the agent is at the location and
%; the first physical object is at the location:
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1099).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1102).
%~ From E:
%~ 
%~ exists( Location,   happens(takeOffOf(Agent,Physobj1,Physobj2),Time) ->         ( holds(on(Physobj1,Physobj2),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj1,Location),Time) ,     holds(at_loc(Physobj2,Location),Time)))
%~ cpc :- exists( Location,   happens(takeOffOf(Agent,Physobj1,Physobj2),Time) ->         ( holds(on(Physobj1,Physobj2),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj1,Location),Time) ,     holds(at_loc(Physobj2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( holds(on(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOffOf(Agent,Physobj1,Physobj2),Time))))],       [])]
cl(    exists( Location,   (     ( holds(on(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOffOf(Agent,Physobj1,Physobj2),Time)))),       []).
 %  cl(    exists( Location,   (     ( holds(on(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOffOf(Agent,Physobj1,Physobj2),Time)))),       []).
 %  % =================================.


%; A releases axiom states that if an agent places a physical
%; object on another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1111).
%~ From E:
%~ 
%~ releases_at( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)
%~ cpc :- releases( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)
%~ ooo :- [   cl(    [   releases( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)],       [])]
cl(    releases( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time),       []).
 %  cl(    releases( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time),       []).
 %  % =================================.


%; A state constraint says that if a physical object is on
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1119).
%~ From E:
%~ 
%~ (     holds(on(Physobj1,Physobj2),Time) ,     holds(at_loc(Physobj2,Location),Time)) ->         holds(at_loc(Physobj1,Location),Time)
%~ cpc :- (     holds(on(Physobj1,Physobj2),Time) ,     holds(at_loc(Physobj2,Location),Time)) ->         holds(at_loc(Physobj1,Location),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Physobj1,Location),Time)],       [      holds(on(Physobj1,Physobj2),Time),           holds(at_loc(Physobj2,Location),Time)])]
cl(    holds(at_loc(Physobj1,Location),Time),       (           holds(on(Physobj1,Physobj2),Time) ,           holds(at_loc(Physobj2,Location),Time))).
 %  cl(    holds(at_loc(Physobj1,Location),Time),       (           holds(on(Physobj1,Physobj2),Time) ,           holds(at_loc(Physobj2,Location),Time))).
 %  % =================================.

% fluent Near(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1123).
%~ From E:
%~ 
%~ fluent( near(agent,object))
%~ cpc :- fluents([near/2])
%~ ooo :- [   cl([fluents([near/2])],[])]
%~ cpc :- mpred_prop(near(agent,object),fluent)
%~ ooo :- [   cl([mpred_prop(near(agent,object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1123).
cl(mpred_prop(near(agent,object),fluent),[]),cl(fluents(near/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1125).
% event WalkFromTo(agent,object,object)
%~ From E:
%~ 
%~ event( walkFromTo(agent,object,object))
%~ cpc :- events([walkFromTo/3])
%~ ooo :- [   cl([events([walkFromTo/3])],[])]
%~ cpc :- actions([walkFromTo/3])
%~ ooo :- [   cl([actions([walkFromTo/3])],[])]
%~ cpc :- mpred_prop(walkFromTo(agent,object,object),action)
%~ ooo :- [   cl([mpred_prop(walkFromTo(agent,object,object),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1125).
( cl(events(walkFromTo/3),[])  ,    cl(mpred_prop(walkFromTo(agent,object,object),action),[]) ,     cl(actions(walkFromTo/3),[])).

% event WalkFrom(agent,object)
%~ From E:
%~ 
%~ event( walkFrom(agent,object))
%~ cpc :- events([walkFrom/2])
%~ ooo :- [   cl([events([walkFrom/2])],[])]
%~ cpc :- actions([walkFrom/2])
%~ ooo :- [   cl([actions([walkFrom/2])],[])]
%~ cpc :- mpred_prop(walkFrom(agent,object),action)
%~ ooo :- [   cl([mpred_prop(walkFrom(agent,object),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1125).
( cl(events(walkFrom/2),[])  ,    cl(mpred_prop(walkFrom(agent,object),action),[]) ,     cl(actions(walkFrom/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1127).
% event RunFromTo(agent,object,object)
%~ From E:
%~ 
%~ event( runFromTo(agent,object,object))
%~ cpc :- events([runFromTo/3])
%~ ooo :- [   cl([events([runFromTo/3])],[])]
%~ cpc :- actions([runFromTo/3])
%~ ooo :- [   cl([actions([runFromTo/3])],[])]
%~ cpc :- mpred_prop(runFromTo(agent,object,object),action)
%~ ooo :- [   cl([mpred_prop(runFromTo(agent,object,object),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1127).
( cl(events(runFromTo/3),[])  ,    cl(mpred_prop(runFromTo(agent,object,object),action),[]) ,     cl(actions(runFromTo/3),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1129).
% [agent,object1,object2,time]
% Initiates(WalkFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
%~ From E:
%~ 
%~ initiates_at( walkFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time)
%~ cpc :- initiates( walkFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time)
%~ ooo :- [   cl(    [   initiates( walkFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time)],       [])]
cl(    initiates( walkFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time),       []).
 %  cl(    initiates( walkFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time),       []).
 %  % =================================.


% [agent,object1,object2,time]
% Terminates(WalkFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1135).
%~ From E:
%~ 
%~ terminates_at( walkFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time)
%~ cpc :- terminates( walkFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time)
%~ ooo :- [   cl(    [   terminates( walkFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time)],       [])]
cl(    terminates( walkFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time),       []).
 %  cl(    terminates( walkFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time),       []).
 %  % =================================.


% [agent,object1,object2,time]
% Happens(WalkFromTo(agent,object1,object2),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1140).
%~ From E:
%~ 
%~ exists( Location,   happens(walkFromTo(Agent,Object1,Object2),Time) ->         ( holds(at_loc(Agent,Location),Time)  ,    holds(at_loc(Object1,Location),Time) ,     holds(at_loc(Object2,Location),Time)))
%~ cpc :- exists( Location,   happens(walkFromTo(Agent,Object1,Object2),Time) ->         ( holds(at_loc(Agent,Location),Time)  ,    holds(at_loc(Object1,Location),Time) ,     holds(at_loc(Object2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( holds(at_loc(Agent,Location),Time)  ,        holds(at_loc(Object1,Location),Time) ,         holds(at_loc(Object2,Location),Time)) ;     not( happens(walkFromTo(Agent,Object1,Object2),Time))))],       [])]
cl(    exists( Location,   (     ( holds(at_loc(Agent,Location),Time)  ,        holds(at_loc(Object1,Location),Time) ,         holds(at_loc(Object2,Location),Time)) ;     not( happens(walkFromTo(Agent,Object1,Object2),Time)))),       []).
 %  cl(    exists( Location,   (     ( holds(at_loc(Agent,Location),Time)  ,        holds(at_loc(Object1,Location),Time) ,         holds(at_loc(Object2,Location),Time)) ;     not( happens(walkFromTo(Agent,Object1,Object2),Time)))),       []).
 %  % =================================.


% [agent,object1,object2,time]
% Initiates(RunFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1147).
%~ From E:
%~ 
%~ initiates_at( runFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time)
%~ cpc :- initiates( runFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time)
%~ ooo :- [   cl(    [   initiates( runFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time)],       [])]
cl(    initiates( runFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time),       []).
 %  cl(    initiates( runFromTo(Agent,Object1,Object2),   near(Agent,Object2),     Time),       []).
 %  % =================================.


% [agent,object1,object2,time]
% Terminates(RunFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1152).
%~ From E:
%~ 
%~ terminates_at( runFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time)
%~ cpc :- terminates( runFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time)
%~ ooo :- [   cl(    [   terminates( runFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time)],       [])]
cl(    terminates( runFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time),       []).
 %  cl(    terminates( runFromTo(Agent,Object1,Object2),   near(Agent,Object1),     Time),       []).
 %  % =================================.


% [agent,object1,object2,time]
% Happens(RunFromTo(agent,object1,object2),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1157).
%~ From E:
%~ 
%~ exists( Location,   happens(runFromTo(Agent,Object1,Object2),Time) ->         ( holds(at_loc(Agent,Location),Time)  ,    holds(at_loc(Object1,Location),Time) ,     holds(at_loc(Object2,Location),Time)))
%~ cpc :- exists( Location,   happens(runFromTo(Agent,Object1,Object2),Time) ->         ( holds(at_loc(Agent,Location),Time)  ,    holds(at_loc(Object1,Location),Time) ,     holds(at_loc(Object2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( holds(at_loc(Agent,Location),Time)  ,        holds(at_loc(Object1,Location),Time) ,         holds(at_loc(Object2,Location),Time)) ;     not( happens(runFromTo(Agent,Object1,Object2),Time))))],       [])]
cl(    exists( Location,   (     ( holds(at_loc(Agent,Location),Time)  ,        holds(at_loc(Object1,Location),Time) ,         holds(at_loc(Object2,Location),Time)) ;     not( happens(runFromTo(Agent,Object1,Object2),Time)))),       []).
 %  cl(    exists( Location,   (     ( holds(at_loc(Agent,Location),Time)  ,        holds(at_loc(Object1,Location),Time) ,         holds(at_loc(Object2,Location),Time)) ;     not( happens(runFromTo(Agent,Object1,Object2),Time)))),       []).
 %  % =================================.


% [agent,object,time]
% Terminates(WalkFrom(agent,object),
%            Near(agent,object),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1164).
%~ From E:
%~ 
%~ terminates_at(walkFrom(Agent,Object),near(Agent,Object),Time)
%~ cpc :- terminates(walkFrom(Agent,Object),near(Agent,Object),Time)
%~ ooo :- [   cl(    [   terminates(walkFrom(Agent,Object),near(Agent,Object),Time)],       [])]
cl(terminates(walkFrom(Agent,Object),near(Agent,Object),Time),[]).
 %  cl(terminates(walkFrom(Agent,Object),near(Agent,Object),Time),[]).
 %  % =================================.


% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side1(door)=location &
% Happens(WalkThroughDoor12(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1169).
%~ From E:
%~ 
%~ ( holds(near(Agent,Object),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Object,Location),Time) ,       side1(Door) =             Location ,     happens(walkThroughDoor12(Agent,Door),Time)) ->         happens(walkFrom(Agent,Object),Time)
%~ cpc :- ( holds(near(Agent,Object),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Object,Location),Time) ,       side1(Door) =             Location ,     happens(walkThroughDoor12(Agent,Door),Time)) ->         happens(walkFrom(Agent,Object),Time)
%~ ooo :- [   cl(    [   happens(walkFrom(Agent,Object),Time)],       [      holds(near(Agent,Object),Time),           holds(at_loc(Agent,Location),Time),           holds(at_loc(Object,Location),Time),           equals(side1(Door),Location),           happens(walkThroughDoor12(Agent,Door),Time)])]
cl(    happens(walkFrom(Agent,Object),Time),       ( holds(near(Agent,Object),Time)  ,          holds(at_loc(Agent,Location),Time) ,           holds(at_loc(Object,Location),Time) ,           equals(side1(Door),Location) ,           happens(walkThroughDoor12(Agent,Door),Time))).
 %  cl(    happens(walkFrom(Agent,Object),Time),       ( holds(near(Agent,Object),Time)  ,          holds(at_loc(Agent,Location),Time) ,           holds(at_loc(Object,Location),Time) ,           equals(side1(Door),Location) ,           happens(walkThroughDoor12(Agent,Door),Time))).
 %  % =================================.


% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side2(door)=location &
% Happens(WalkThroughDoor21(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1177).
%~ From E:
%~ 
%~ ( holds(near(Agent,Object),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Object,Location),Time) ,       side2(Door) =             Location ,     happens(walkThroughDoor21(Agent,Door),Time)) ->         happens(walkFrom(Agent,Object),Time)
%~ cpc :- ( holds(near(Agent,Object),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Object,Location),Time) ,       side2(Door) =             Location ,     happens(walkThroughDoor21(Agent,Door),Time)) ->         happens(walkFrom(Agent,Object),Time)
%~ ooo :- [   cl(    [   happens(walkFrom(Agent,Object),Time)],       [      holds(near(Agent,Object),Time),           holds(at_loc(Agent,Location),Time),           holds(at_loc(Object,Location),Time),           equals(side2(Door),Location),           happens(walkThroughDoor21(Agent,Door),Time)])]
cl(    happens(walkFrom(Agent,Object),Time),       ( holds(near(Agent,Object),Time)  ,          holds(at_loc(Agent,Location),Time) ,           holds(at_loc(Object,Location),Time) ,           equals(side2(Door),Location) ,           happens(walkThroughDoor21(Agent,Door),Time))).
 %  cl(    happens(walkFrom(Agent,Object),Time),       ( holds(near(Agent,Object),Time)  ,          holds(at_loc(Agent,Location),Time) ,           holds(at_loc(Object,Location),Time) ,           equals(side2(Door),Location) ,           happens(walkThroughDoor21(Agent,Door),Time))).
 %  % =================================.


% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side1(staircase)=room &
% Happens(WalkUpStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1185).
%~ From E:
%~ 
%~ ( holds(near(Agent,Object),Time)  ,    holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Object,Room),Time) ,       side1(Staircase) =             Room ,     happens(walkUpStaircase(Agent,Staircase),Time)) ->         happens(walkFrom(Agent,Object),Time)
%~ cpc :- ( holds(near(Agent,Object),Time)  ,    holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Object,Room),Time) ,       side1(Staircase) =             Room ,     happens(walkUpStaircase(Agent,Staircase),Time)) ->         happens(walkFrom(Agent,Object),Time)
%~ ooo :- [   cl(    [   happens(walkFrom(Agent,Object),Time)],       [      holds(near(Agent,Object),Time),           holds(at_loc(Agent,Room),Time),           holds(at_loc(Object,Room),Time),           equals(side1(Staircase),Room),           happens(walkUpStaircase(Agent,Staircase),Time)])]
cl(    happens(walkFrom(Agent,Object),Time),       ( holds(near(Agent,Object),Time)  ,          holds(at_loc(Agent,Room),Time) ,           holds(at_loc(Object,Room),Time) ,           equals(side1(Staircase),Room) ,           happens(walkUpStaircase(Agent,Staircase),Time))).
 %  cl(    happens(walkFrom(Agent,Object),Time),       ( holds(near(Agent,Object),Time)  ,          holds(at_loc(Agent,Room),Time) ,           holds(at_loc(Object,Room),Time) ,           equals(side1(Staircase),Room) ,           happens(walkUpStaircase(Agent,Staircase),Time))).
 %  % =================================.


% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side2(staircase)=room &
% Happens(WalkDownStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1193).
%~ From E:
%~ 
%~ ( holds(near(Agent,Object),Time)  ,    holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Object,Room),Time) ,       side2(Staircase) =             Room ,     happens(walkDownStaircase(Agent,Staircase),Time)) ->         happens(walkFrom(Agent,Object),Time)
%~ cpc :- ( holds(near(Agent,Object),Time)  ,    holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Object,Room),Time) ,       side2(Staircase) =             Room ,     happens(walkDownStaircase(Agent,Staircase),Time)) ->         happens(walkFrom(Agent,Object),Time)
%~ ooo :- [   cl(    [   happens(walkFrom(Agent,Object),Time)],       [      holds(near(Agent,Object),Time),           holds(at_loc(Agent,Room),Time),           holds(at_loc(Object,Room),Time),           equals(side2(Staircase),Room),           happens(walkDownStaircase(Agent,Staircase),Time)])]
cl(    happens(walkFrom(Agent,Object),Time),       ( holds(near(Agent,Object),Time)  ,          holds(at_loc(Agent,Room),Time) ,           holds(at_loc(Object,Room),Time) ,           equals(side2(Staircase),Room) ,           happens(walkDownStaircase(Agent,Staircase),Time))).
 %  cl(    happens(walkFrom(Agent,Object),Time),       ( holds(near(Agent,Object),Time)  ,          holds(at_loc(Agent,Room),Time) ,           holds(at_loc(Object,Room),Time) ,           equals(side2(Staircase),Room) ,           happens(walkDownStaircase(Agent,Staircase),Time))).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/OMSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OMSpace: object-scale metric space
%;
%; The OMSpace representation deals with metric space at
%; the scale of objects.
%;
%; @article{Morgenstern:2001,
%;   author = "Morgenstern, Leora",
%;   year = "2001",
%;   title = "Mid-sized axiomatizations of commonsense problems: A case study in egg cracking",
%;   journal = "Studia Logica",
%;   volume = "67",
%;   pages = "333--384",
%; }
%;
%; @article{Shanahan:2003,
%;   author = "Shanahan, Murray",
%;   year = "2004",
%;   title = "An attempt to formalise a non-trivial benchmark problem in common sense reasoning",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "141--165",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1242).
% sort height: integer
%~ From E:
%~ 
%~ subsort(height,integer)
subsort(height,integer).

% sort distance: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1242).
%~ From E:
%~ 
%~ subsort(distance,integer)
subsort(distance,integer).
%; Height
%; The height of object is height.

% fluent Height(object,height)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1247).
%~ From E:
%~ 
%~ fluent( height(object,height))
%~ cpc :- fluents([height/2])
%~ ooo :- [   cl([fluents([height/2])],[])]
%~ cpc :- mpred_prop(height(object,height),fluent)
%~ ooo :- [   cl([mpred_prop(height(object,height),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1247).
cl(mpred_prop(height(object,height),fluent),[]),cl(fluents(height/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1250).
%; State constraint represent the fact that each
%; object has a unique height:
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1252).
%~ From E:
%~ 
%~ (     holds(height(Object,Height1),Time) ,     holds(height(Object,Height2),Time)) ->         Height1=Height2
%~ cpc :- (     holds(height(Object,Height1),Time) ,     holds(height(Object,Height2),Time)) ->         Height1=Height2
%~ ooo :- [   cl(    [   equals(Height1,Height2)],       [      holds(height(Object,Height1),Time),           holds(height(Object,Height2),Time)])]
cl( equals(Height1,Height2),   (     holds(height(Object,Height1),Time) ,     holds(height(Object,Height2),Time))).
 %  cl( equals(Height1,Height2),   (     holds(height(Object,Height1),Time) ,     holds(height(Object,Height2),Time))).
 %  % =================================.


% [object,time]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1258).
% {height}% HoldsAt(Height(object,height),time).
%~ From E:
%~ 
%~ exists(Height,holds(height(Object,Height),Time))
%~ cpc :- exists(Height,holds(height(Object,Height),Time))
%~ ooo :- [   cl([exists(Height,holds(height(Object,Height),Time))],[])]
cl(exists(Height,holds(height(Object,Height),Time)),[]).
 %  cl(exists(Height,holds(height(Object,Height),Time)),[]).
 %  % =================================.


%; falling
%; physobj1 is falling from physobj2 to physobj3.

% fluent FallingFromTo(physobj,physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1263).
%~ From E:
%~ 
%~ fluent( fallingFromTo(physobj,physobj,physobj))
%~ cpc :- fluents([fallingFromTo/3])
%~ ooo :- [   cl([fluents([fallingFromTo/3])],[])]
%~ cpc :- mpred_prop(fallingFromTo(physobj,physobj,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(fallingFromTo(physobj,physobj,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1263).
cl(mpred_prop(fallingFromTo(physobj,physobj,physobj),fluent),[]),cl(fluents(fallingFromTo/3),[]).


%; physobj1 starts falling from physobj2 to physobj3.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1266).
% event StartFallingFromTo(physobj,physobj,physobj)
%~ From E:
%~ 
%~ event( startFallingFromTo(physobj,physobj,physobj))
%~ cpc :- events([startFallingFromTo/3])
%~ ooo :- [   cl([events([startFallingFromTo/3])],[])]
%~ cpc :- mpred_prop(startFallingFromTo(physobj,physobj,physobj),event)
%~ ooo :- [   cl([mpred_prop(startFallingFromTo(physobj,physobj,physobj),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1266).
cl(mpred_prop(startFallingFromTo(physobj,physobj,physobj),event),[]),cl(events(startFallingFromTo/3),[]).


%; physobj1 collides with physobj2.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1268).
% event CollideWith(physobj,physobj)
%~ From E:
%~ 
%~ event( collideWith(physobj,physobj))
%~ cpc :- events([collideWith/2])
%~ ooo :- [   cl([events([collideWith/2])],[])]
%~ cpc :- mpred_prop(collideWith(physobj,physobj),event)
%~ ooo :- [   cl([mpred_prop(collideWith(physobj,physobj),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1268).
cl(mpred_prop(collideWith(physobj,physobj),event),[]),cl(events(collideWith/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1270).
%; An effect axiom states that if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the first physical object will be falling from the
%; second physical object to the third physical object:
% [physobj1,physobj2,physobj3,time]
% Initiates(StartFallingFromTo(physobj1,physobj2,physobj3),
%           FallingFromTo(physobj1,physobj2,physobj3),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1274).
%~ From E:
%~ 
%~ initiates_at( startFallingFromTo(Physobj1,Physobj2,Physobj3),   fallingFromTo(Physobj1,Physobj2,Physobj3),     Time)
%~ cpc :- initiates( startFallingFromTo(Physobj1,Physobj2,Physobj3),   fallingFromTo(Physobj1,Physobj2,Physobj3),     Time)
%~ ooo :- [   cl(    [   initiates( startFallingFromTo(Physobj1,Physobj2,Physobj3),   fallingFromTo(Physobj1,Physobj2,Physobj3),     Time)],       [])]
cl(    initiates( startFallingFromTo(Physobj1,Physobj2,Physobj3),   fallingFromTo(Physobj1,Physobj2,Physobj3),     Time),       []).
 %  cl(    initiates( startFallingFromTo(Physobj1,Physobj2,Physobj3),   fallingFromTo(Physobj1,Physobj2,Physobj3),     Time),       []).
 %  % =================================.


%; A precondition axiom states that for
%; a first physical object to start
%; falling from a second physical object to a third physical
%; object,
%; the height of the first physical object and the
%; second physical object must be the same.
% [physobj1,physobj2,physobj3,height1,height2,time]
% Happens(StartFallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height1),time) &
% HoldsAt(Height(physobj2,height2),time) ->
% height1=height2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1285).
%~ From E:
%~ 
%~ ( happens(startFallingFromTo(Physobj1,Physobj2,Physobj3),Time)  ,    holds(height(Physobj1,Height1),Time) ,     holds(height(Physobj2,Height2),Time)) ->         Height1=Height2
%~ cpc :- ( happens(startFallingFromTo(Physobj1,Physobj2,Physobj3),Time)  ,    holds(height(Physobj1,Height1),Time) ,     holds(height(Physobj2,Height2),Time)) ->         Height1=Height2
%~ ooo :- [   cl(    [   equals(Height1,Height2)],       [      happens(startFallingFromTo(Physobj1,Physobj2,Physobj3),Time),           holds(height(Physobj1,Height1),Time),           holds(height(Physobj2,Height2),Time)])]
cl( equals(Height1,Height2),   ( happens(startFallingFromTo(Physobj1,Physobj2,Physobj3),Time)  ,    holds(height(Physobj1,Height1),Time) ,     holds(height(Physobj2,Height2),Time))).
 %  cl( equals(Height1,Height2),   ( happens(startFallingFromTo(Physobj1,Physobj2,Physobj3),Time)  ,    holds(height(Physobj1,Height1),Time) ,     holds(height(Physobj2,Height2),Time))).
 %  % =================================.


%; A state constraint says that a physical object
%; cannot fall from itself, cannot fall to itself,
%; and cannot fall from and to the same physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% physobj1!=physobj2 &
% physobj1!=physobj3 &
% physobj2!=physobj3.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1294).
%~ From E:
%~ 
%~ holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time) ->         ( Physobj1\=Physobj2  ,    Physobj1\=Physobj3 ,     Physobj2\=Physobj3)
%~ cpc :- holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time) ->         ( Physobj1\=Physobj2  ,    Physobj1\=Physobj3 ,     Physobj2\=Physobj3)
%~ ooo :- [   cl(    [   {   dif(Physobj1,Physobj2) }],       [      holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)]),     cl(      [   {   dif(Physobj1,Physobj3) }],           [        holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)]),     cl(      [   {   dif(Physobj2,Physobj3) }],           [        holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)])]
( cl(    {   dif(Physobj1,Physobj2) },       holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time))  ,    cl(      {   dif(Physobj1,Physobj3) },           holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)) ,     cl(      {   dif(Physobj2,Physobj3) },           holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time))).
 %  ( cl(    {   dif(Physobj1,Physobj2) },       holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time))  ,    cl(      {   dif(Physobj1,Physobj3) },           holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)) ,     cl(      {   dif(Physobj2,Physobj3) },           holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time))).
 %  % =================================.


%; A state constraint says that the sky cannot fall:
% [sky,physobj1,physobj2,time]
% !HoldsAt(FallingFromTo(sky,physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1301).
%~ From E:
%~ 
%~ holds(not(fallingFromTo(Sky,Physobj1,Physobj2)),Time)
%~ cpc :- holds(not(fallingFromTo(Sky,Physobj1,Physobj2)),Time)
%~ ooo :- [   cl([],[holds(fallingFromTo(Sky,Physobj1,Physobj2),Time)])]
cl([],holds(fallingFromTo(Sky,Physobj1,Physobj2),Time)).
 %  cl([],holds(fallingFromTo(Sky,Physobj1,Physobj2),Time)).
 %  % =================================.


%; A releases axiom states that if
%; if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the height of the first physical object
%; will be released from inertia:
% [physobj1,physobj2,physobj3,height,time]
% Releases(StartFallingFromTo(physobj1,physobj2,physobj3),
%          Height(physobj1,height),
%          time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1309).
%~ From E:
%~ 
%~ releases_at( startFallingFromTo(Physobj1,Physobj2,Physobj3),   height(Physobj1,Height),     Time)
%~ cpc :- releases( startFallingFromTo(Physobj1,Physobj2,Physobj3),   height(Physobj1,Height),     Time)
%~ ooo :- [   cl(    [   releases( startFallingFromTo(Physobj1,Physobj2,Physobj3),   height(Physobj1,Height),     Time)],       [])]
cl(    releases( startFallingFromTo(Physobj1,Physobj2,Physobj3),   height(Physobj1,Height),     Time),       []).
 %  cl(    releases( startFallingFromTo(Physobj1,Physobj2,Physobj3),   height(Physobj1,Height),     Time),       []).
 %  % =================================.


%; A trajectory axiom states that
%; if a first physical object starts falling
%; from a second physical object
%; to a third physical object
%; at a time and
%; the first physical object has a height at the time,
%; then the first physical object will have a height
%; equal to the height minus an offset
%; at a time equal to the time plus the offset:
% [physobj1,physobj2,physobj3,height1,height2,offset,time]
% HoldsAt(Height(physobj1,height1),time) &
% height2=height1-offset ->
% Trajectory(FallingFromTo(physobj1,physobj2,physobj3),time,
%            Height(physobj1,height2),offset).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1323).
%~ From E:
%~ 
%~ (     holds(height(Physobj1,Height1),Time) ,       Height2 =             Height1-Offset) ->         trajectory( fallingFromTo(Physobj1,Physobj2,Physobj3),   Time,     height(Physobj1,Height2),     Offset)
%~ cpc :- (     holds(height(Physobj1,Height1),Time) ,       Height2 =             Height1-Offset) ->         trajectory( fallingFromTo(Physobj1,Physobj2,Physobj3),   Time,     height(Physobj1,Height2),     Offset)
%~ ooo :- [   cl(    [   trajectory( fallingFromTo(Physobj1,Physobj2,Physobj3),   Time,     height(Physobj1,Height2),     Offset)],       [      holds(height(Physobj1,Height1),Time),           equals(Height2,Height1-Offset)])]
cl(    trajectory( fallingFromTo(Physobj1,Physobj2,Physobj3),   Time,     height(Physobj1,Height2),     Offset),       (           holds(height(Physobj1,Height1),Time) ,           equals(Height2,Height1-Offset))).
 %  cl(    trajectory( fallingFromTo(Physobj1,Physobj2,Physobj3),   Time,     height(Physobj1,Height2),     Offset),       (           holds(height(Physobj1,Height1),Time) ,           equals(Height2,Height1-Offset))).
 %  % =================================.


%; A trigger axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the height of the first physical object
%; is the same as the height of the third physical object,
%; the first physical object collides with the
%; third physical object:
% [physobj1,physobj2,physobj3,height,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height),time) &
% HoldsAt(Height(physobj3,height),time) ->
% Happens(CollideWith(physobj1,physobj3),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1337).
%~ From E:
%~ 
%~ ( holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)  ,    holds(height(Physobj1,Height),Time) ,     holds(height(Physobj3,Height),Time)) ->         happens(collideWith(Physobj1,Physobj3),Time)
%~ cpc :- ( holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)  ,    holds(height(Physobj1,Height),Time) ,     holds(height(Physobj3,Height),Time)) ->         happens(collideWith(Physobj1,Physobj3),Time)
%~ ooo :- [   cl(    [   happens(collideWith(Physobj1,Physobj3),Time)],       [      holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time),           holds(height(Physobj1,Height),Time),           holds(height(Physobj3,Height),Time)])]
cl(    happens(collideWith(Physobj1,Physobj3),Time),       ( holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)  ,          holds(height(Physobj1,Height),Time) ,           holds(height(Physobj3,Height),Time))).
 %  cl(    happens(collideWith(Physobj1,Physobj3),Time),       ( holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)  ,          holds(height(Physobj1,Height),Time) ,           holds(height(Physobj3,Height),Time))).
 %  % =================================.


%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will be on the third physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Initiates(CollideWith(physobj1,physobj3),
%           On(physobj1,physobj3),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1350).
%~ From E:
%~ 
%~ holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time) ->         initiates_at( collideWith(Physobj1,Physobj3),   on(Physobj1,Physobj3),     Time)
%~ cpc :- holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)
%~ ooo :- [   cl([holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)],[])]
%~ cpc :- if(    initiates( collideWith(Physobj1,Physobj3),   at(on(Physobj1,Physobj3),Time)),       cl([holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates( collideWith(Physobj1,Physobj3),   at(on(Physobj1,Physobj3),Time)),       cl([holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)],[]))],       [])]
cl(    (     (         collideWith(Physobj1,Physobj3) initiates         on(Physobj1,Physobj3)at Time) if     cl(holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time),[])),       []).
 %  cl(    if(    initiates( collideWith(Physobj1,Physobj3),   at(on(Physobj1,Physobj3),Time)),       cl(holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time),[])),       []).
 %  % =================================.


%; An effect axiom states that
%; if a physical object collides with another
%; physical object,
%; the height of the first physical object will
%; be the height of the second physical object:
% [physobj1,physobj2,height,time]
% HoldsAt(Height(physobj2,height),time) ->
% Initiates(CollideWith(physobj1,physobj2),
%           Height(physobj1,height),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1361).
%~ From E:
%~ 
%~ holds(height(Physobj2,Height),Time) ->         initiates_at( collideWith(Physobj1,Physobj2),   height(Physobj1,Height),     Time)
%~ cpc :- holds(height(Physobj2,Height),Time)
%~ ooo :- [   cl([holds(height(Physobj2,Height),Time)],[])]
%~ cpc :- if(    initiates( collideWith(Physobj1,Physobj2),   at(height(Physobj1,Height),Time)),       cl([holds(height(Physobj2,Height),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates( collideWith(Physobj1,Physobj2),   at(height(Physobj1,Height),Time)),       cl([holds(height(Physobj2,Height),Time)],[]))],       [])]
cl(    (     (         collideWith(Physobj1,Physobj2) initiates         height(Physobj1,Height)at Time) if     cl(holds(height(Physobj2,Height),Time),[])),       []).
 %  cl(    if(    initiates( collideWith(Physobj1,Physobj2),   at(height(Physobj1,Height),Time)),       cl(holds(height(Physobj2,Height),Time),[])),       []).
 %  % =================================.


%;[physobj1,physobj2,height1,height2,time]
%;HoldsAt(Height(physobj2,height1),time) &
%;height1 != height2 ->
%;Terminates(CollideWith(physobj1,physobj2),
%;           Height(physobj1,height2),
%;           time).
%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will no longer be
%; falling from the second physical object to the
%; third physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Terminates(CollideWith(physobj1,physobj3),
%            FallingFromTo(physobj1,physobj2,physobj3),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1383).
%~ From E:
%~ 
%~ holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time) ->         terminates_at( collideWith(Physobj1,Physobj3),   fallingFromTo(Physobj1,Physobj2,Physobj3),     Time)
%~ cpc :- holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)
%~ ooo :- [   cl([holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)],[])]
%~ cpc :- if(    terminates( collideWith(Physobj1,Physobj3),   at(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)),       cl([holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates( collideWith(Physobj1,Physobj3),   at(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)),       cl([holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)],[]))],       [])]
cl(    (     (         collideWith(Physobj1,Physobj3) terminates         fallingFromTo(Physobj1,Physobj2,Physobj3)at Time) if     cl(holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time),[])),       []).
 %  cl(    if(    terminates( collideWith(Physobj1,Physobj3),   at(fallingFromTo(Physobj1,Physobj2,Physobj3),Time)),       cl(holds(fallingFromTo(Physobj1,Physobj2,Physobj3),Time),[])),       []).
 %  % =================================.


%; flying
%; agent is flying from physobj1 to physobj2.

% fluent FlyingFromTo(agent,physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1391).
%~ From E:
%~ 
%~ fluent( flyingFromTo(agent,physobj,physobj))
%~ cpc :- fluents([flyingFromTo/3])
%~ ooo :- [   cl([fluents([flyingFromTo/3])],[])]
%~ cpc :- mpred_prop(flyingFromTo(agent,physobj,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(flyingFromTo(agent,physobj,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1391).
cl(mpred_prop(flyingFromTo(agent,physobj,physobj),fluent),[]),cl(fluents(flyingFromTo/3),[]).


%; agent starts flying from physobj1 to physobj2.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1394).
% event StartFlyingFromTo(agent,physobj,physobj)
%~ From E:
%~ 
%~ event( startFlyingFromTo(agent,physobj,physobj))
%~ cpc :- events([startFlyingFromTo/3])
%~ ooo :- [   cl([events([startFlyingFromTo/3])],[])]
%~ cpc :- actions([startFlyingFromTo/3])
%~ ooo :- [   cl([actions([startFlyingFromTo/3])],[])]
%~ cpc :- mpred_prop(startFlyingFromTo(agent,physobj,physobj),action)
%~ ooo :- [   cl([mpred_prop(startFlyingFromTo(agent,physobj,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1394).
( cl(events(startFlyingFromTo/3),[])  ,    cl(mpred_prop(startFlyingFromTo(agent,physobj,physobj),action),[]) ,     cl(actions(startFlyingFromTo/3),[])).


%; agent reaches physobj.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1396).
% event Reach(agent,physobj)
%~ From E:
%~ 
%~ event( reach(agent,physobj))
%~ cpc :- events([reach/2])
%~ ooo :- [   cl([events([reach/2])],[])]
%~ cpc :- actions([reach/2])
%~ ooo :- [   cl([actions([reach/2])],[])]
%~ cpc :- mpred_prop(reach(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(reach(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1396).
( cl(events(reach/2),[])  ,    cl(mpred_prop(reach(agent,physobj),action),[]) ,     cl(actions(reach/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1398).
%; An effect axiom states that if an agent starts
%; flying from a physical object to another physical object,
%; the agent will be flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(StartFlyingFromTo(agent,physobj1,physobj2),
%           FlyingFromTo(agent,physobj1,physobj2),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1402).
%~ From E:
%~ 
%~ initiates_at( startFlyingFromTo(Agent,Physobj1,Physobj2),   flyingFromTo(Agent,Physobj1,Physobj2),     Time)
%~ cpc :- initiates( startFlyingFromTo(Agent,Physobj1,Physobj2),   flyingFromTo(Agent,Physobj1,Physobj2),     Time)
%~ ooo :- [   cl(    [   initiates( startFlyingFromTo(Agent,Physobj1,Physobj2),   flyingFromTo(Agent,Physobj1,Physobj2),     Time)],       [])]
cl(    initiates( startFlyingFromTo(Agent,Physobj1,Physobj2),   flyingFromTo(Agent,Physobj1,Physobj2),     Time),       []).
 %  cl(    initiates( startFlyingFromTo(Agent,Physobj1,Physobj2),   flyingFromTo(Agent,Physobj1,Physobj2),     Time),       []).
 %  % =================================.


%; A precondition axiom states that for
%; an agent to start flying from a physical object to
%; another physical object,
%; the height of the agent and
%; the first physical object must be the same:
% [agent,physobj1,physobj2,height1,height2,time]
% Happens(StartFlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height1),time) &
% HoldsAt(Height(physobj1,height2),time) ->
% height1=height2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1412).
%~ From E:
%~ 
%~ ( happens(startFlyingFromTo(Agent,Physobj1,Physobj2),Time)  ,    holds(height(Agent,Height1),Time) ,     holds(height(Physobj1,Height2),Time)) ->         Height1=Height2
%~ cpc :- ( happens(startFlyingFromTo(Agent,Physobj1,Physobj2),Time)  ,    holds(height(Agent,Height1),Time) ,     holds(height(Physobj1,Height2),Time)) ->         Height1=Height2
%~ ooo :- [   cl(    [   equals(Height1,Height2)],       [      happens(startFlyingFromTo(Agent,Physobj1,Physobj2),Time),           holds(height(Agent,Height1),Time),           holds(height(Physobj1,Height2),Time)])]
cl( equals(Height1,Height2),   ( happens(startFlyingFromTo(Agent,Physobj1,Physobj2),Time)  ,    holds(height(Agent,Height1),Time) ,     holds(height(Physobj1,Height2),Time))).
 %  cl( equals(Height1,Height2),   ( happens(startFlyingFromTo(Agent,Physobj1,Physobj2),Time)  ,    holds(height(Agent,Height1),Time) ,     holds(height(Physobj1,Height2),Time))).
 %  % =================================.


%; A state constraint says that an agent
%; cannot fly from and to the same physical object:
% [agent,physobj1,physobj2,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1420).
%~ From E:
%~ 
%~ holds(flyingFromTo(Agent,Physobj1,Physobj2),Time) ->         Physobj1\=Physobj2
%~ cpc :- holds(flyingFromTo(Agent,Physobj1,Physobj2),Time) ->         Physobj1\=Physobj2
%~ ooo :- [   cl(    [   {   dif(Physobj1,Physobj2) }],       [      holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)])]
cl(    {   dif(Physobj1,Physobj2) },       holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)).
 %  cl(    {   dif(Physobj1,Physobj2) },       holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)).
 %  % =================================.


%; A releases axiom states that if an agent
%; starts flying from a physical object to another
%; physical object, the height of the agent will
%; be released from inertia:
% [agent,physobj1,physobj2,height,time]
% Releases(StartFlyingFromTo(agent,physobj1,physobj2),
%          Height(agent,height),
%          time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1428).
%~ From E:
%~ 
%~ releases_at( startFlyingFromTo(Agent,Physobj1,Physobj2),   height(Agent,Height),     Time)
%~ cpc :- releases( startFlyingFromTo(Agent,Physobj1,Physobj2),   height(Agent,Height),     Time)
%~ ooo :- [   cl(    [   releases( startFlyingFromTo(Agent,Physobj1,Physobj2),   height(Agent,Height),     Time)],       [])]
cl(    releases( startFlyingFromTo(Agent,Physobj1,Physobj2),   height(Agent,Height),     Time),       []).
 %  cl(    releases( startFlyingFromTo(Agent,Physobj1,Physobj2),   height(Agent,Height),     Time),       []).
 %  % =================================.


%; A trajectory axiom states that
%; if an agent starts flying from
%; from a physical object
%; to another physical object
%; at a time and
%; the agent has a height at the time,
%; then the agent will have a height
%; equal to the height plus an offset
%; at a time equal to the time plus the offset:
% [agent,physobj1,physobj2,height1,height2,offset,time]
% HoldsAt(Height(agent,height1),time) &
% height2=height1+offset ->
% Trajectory(FlyingFromTo(agent,physobj1,physobj2),time,
%            Height(agent,height2),offset).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1442).
%~ From E:
%~ 
%~ (     holds(height(Agent,Height1),Time) ,       Height2 =             Height1+Offset) ->         trajectory( flyingFromTo(Agent,Physobj1,Physobj2),   Time, height(Agent,Height2),Offset)
%~ cpc :- (     holds(height(Agent,Height1),Time) ,       Height2 =             Height1+Offset) ->         trajectory( flyingFromTo(Agent,Physobj1,Physobj2),   Time, height(Agent,Height2),Offset)
%~ ooo :- [   cl(    [   trajectory( flyingFromTo(Agent,Physobj1,Physobj2),   Time, height(Agent,Height2),Offset)],       [      holds(height(Agent,Height1),Time),           equals(Height2,Height1+Offset)])]
cl(    trajectory( flyingFromTo(Agent,Physobj1,Physobj2),   Time, height(Agent,Height2),Offset),       (           holds(height(Agent,Height1),Time) ,           equals(Height2,Height1+Offset))).
 %  cl(    trajectory( flyingFromTo(Agent,Physobj1,Physobj2),   Time, height(Agent,Height2),Offset),       (           holds(height(Agent,Height1),Time) ,           equals(Height2,Height1+Offset))).
 %  % =================================.


%; A trigger axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the height of the agent
%; is the same as the height of the second physical object,
%; the agent reaches the second physical object:
% [agent,physobj1,physobj2,height,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height),time) &
% HoldsAt(Height(physobj2,height),time) ->
% Happens(Reach(agent,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1455).
%~ From E:
%~ 
%~ ( holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)  ,    holds(height(Agent,Height),Time) ,     holds(height(Physobj2,Height),Time)) ->         happens(reach(Agent,Physobj2),Time)
%~ cpc :- ( holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)  ,    holds(height(Agent,Height),Time) ,     holds(height(Physobj2,Height),Time)) ->         happens(reach(Agent,Physobj2),Time)
%~ ooo :- [   cl(    [   happens(reach(Agent,Physobj2),Time)],       [      holds(flyingFromTo(Agent,Physobj1,Physobj2),Time),           holds(height(Agent,Height),Time),           holds(height(Physobj2,Height),Time)])]
cl(    happens(reach(Agent,Physobj2),Time),       ( holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)  ,          holds(height(Agent,Height),Time) ,           holds(height(Physobj2,Height),Time))).
 %  cl(    happens(reach(Agent,Physobj2),Time),       ( holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)  ,          holds(height(Agent,Height),Time) ,           holds(height(Physobj2,Height),Time))).
 %  % =================================.


%; An effect axiom states that
%; if an agent reaches a physical object,
%; the height of the agent will be the
%; height of the physical object:
% [agent,physobj,height,time]
% HoldsAt(Height(physobj,height),time) ->
% Initiates(Reach(agent,physobj),Height(agent,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1465).
%~ From E:
%~ 
%~ holds(height(Physobj,Height),Time) ->         initiates_at(reach(Agent,Physobj),height(Agent,Height),Time)
%~ cpc :- holds(height(Physobj,Height),Time)
%~ ooo :- [   cl([holds(height(Physobj,Height),Time)],[])]
%~ cpc :- if(    initiates(reach(Agent,Physobj),at(height(Agent,Height),Time)),       cl([holds(height(Physobj,Height),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(reach(Agent,Physobj),at(height(Agent,Height),Time)),       cl([holds(height(Physobj,Height),Time)],[]))],       [])]
cl(    (     reach(Agent,Physobj)initiates height(Agent,Height)at Time if     cl(holds(height(Physobj,Height),Time),[])),       []).
 %  cl(    if(    initiates(reach(Agent,Physobj),at(height(Agent,Height),Time)),       cl(holds(height(Physobj,Height),Time),[])),       []).
 %  % =================================.


%;[agent,physobj,height1,height2,time]
%;HoldsAt(Height(physobj,height1),time) &
%;height1!=height2 ->
%;Terminates(Reach(agent,physobj),Height(agent,height2),time).
%; An effect axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the agent reaches the second physical object,
%; the agent will no longer be
%; flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% Terminates(Reach(agent,physobj2),
%            FlyingFromTo(agent,physobj1,physobj2),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1482).
%~ From E:
%~ 
%~ holds(flyingFromTo(Agent,Physobj1,Physobj2),Time) ->         terminates_at( reach(Agent,Physobj2),   flyingFromTo(Agent,Physobj1,Physobj2),     Time)
%~ cpc :- holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)
%~ ooo :- [   cl([holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)],[])]
%~ cpc :- if(    terminates( reach(Agent,Physobj2),   at(flyingFromTo(Agent,Physobj1,Physobj2),Time)),       cl([holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates( reach(Agent,Physobj2),   at(flyingFromTo(Agent,Physobj1,Physobj2),Time)),       cl([holds(flyingFromTo(Agent,Physobj1,Physobj2),Time)],[]))],       [])]
cl(    (     (         reach(Agent,Physobj2) terminates         flyingFromTo(Agent,Physobj1,Physobj2)at Time) if     cl(holds(flyingFromTo(Agent,Physobj1,Physobj2),Time),[])),       []).
 %  cl(    if(    terminates( reach(Agent,Physobj2),   at(flyingFromTo(Agent,Physobj1,Physobj2),Time)),       cl(holds(flyingFromTo(Agent,Physobj1,Physobj2),Time),[])),       []).
 %  % =================================.


%; A releases axiom states that
%; if an agent holds a physical object,
%; the height of the physical object is released from inertia:
% [agent,physobj,height,time]
% Releases(Hold(agent,physobj),Height(physobj,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1491).
%~ From E:
%~ 
%~ releases_at(hold(Agent,Physobj),height(Physobj,Height),Time)
%~ cpc :- releases(hold(Agent,Physobj),height(Physobj,Height),Time)
%~ ooo :- [   cl(    [   releases(hold(Agent,Physobj),height(Physobj,Height),Time)],       [])]
cl(releases(hold(Agent,Physobj),height(Physobj,Height),Time),[]).
 %  cl(releases(hold(Agent,Physobj),height(Physobj,Height),Time),[]).
 %  % =================================.


%;[agent,physobj,height1,height2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(Height(physobj,height1),time) &
%;height1 != height2 ->
%;Terminates(LetGoOf(agent,physobj),Height(physobj,height2),time).
% [agent,physobj,height,time]
% (!{object} PartOf(physobj,object)) &
% HoldsAt(Height(physobj,height),time) ->
% Initiates(LetGoOf(agent,physobj),Height(physobj,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1500).
%~ From E:
%~ 
%~ (     not( thereExists(Object,partOf(Physobj,Object))) ,     holds(height(Physobj,Height),Time)) ->         initiates_at(letGoOf(Agent,Physobj),height(Physobj,Height),Time)
%~ cpc :- not( thereExists(Object,partOf(Physobj,Object)))
%~ ooo :- [   cl([exists(Object,not(partOf(Physobj,Object)))],[])]
%~ cpc :- holds(height(Physobj,Height),Time)
%~ ooo :- [   cl([holds(height(Physobj,Height),Time)],[])]
%~ cpc :- if(    initiates(letGoOf(Agent,Physobj),at(height(Physobj,Height),Time)),       (           cl([exists(Object,not(partOf(Physobj,Object)))],[]) ,           cl([holds(height(Physobj,Height),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates(letGoOf(Agent,Physobj),at(height(Physobj,Height),Time)),       (           cl([exists(Object,not(partOf(Physobj,Object)))],[]) ,           cl([holds(height(Physobj,Height),Time)],[])))],       [])]
cl(    (     letGoOf(Agent,Physobj)initiates height(Physobj,Height)at Time if     (         cl(exists(Object,not partOf(Physobj,Object)),[]) ,         cl(holds(height(Physobj,Height),Time),[]))),       []).
 %  cl(    if(    initiates(letGoOf(Agent,Physobj),at(height(Physobj,Height),Time)),       (           cl(exists(Object,not(partOf(Physobj,Object))),[]) ,           cl(holds(height(Physobj,Height),Time),[]))),       []).
 %  % =================================.


%; A state constraint says that
%; if an agent is holding a physical object and
%; the height of the agent is height,
%; the height of the physical object is height:
% [agent,physobj,height,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(Height(agent,height),time) ->
% HoldsAt(Height(physobj,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1509).
%~ From E:
%~ 
%~ (     holds(holding(Agent,Physobj),Time) ,     holds(height(Agent,Height),Time)) ->         holds(height(Physobj,Height),Time)
%~ cpc :- (     holds(holding(Agent,Physobj),Time) ,     holds(height(Agent,Height),Time)) ->         holds(height(Physobj,Height),Time)
%~ ooo :- [   cl(    [   holds(height(Physobj,Height),Time)],       [      holds(holding(Agent,Physobj),Time),           holds(height(Agent,Height),Time)])]
cl(    holds(height(Physobj,Height),Time),       (           holds(holding(Agent,Physobj),Time) ,           holds(height(Agent,Height),Time))).
 %  cl(    holds(height(Physobj,Height),Time),       (           holds(holding(Agent,Physobj),Time) ,           holds(height(Agent,Height),Time))).
 %  % =================================.


%; A state constraint says that if a physical object
%; is part of an object,
%; the height of the physical object
%; is the same as the height of the object:
% [physobj,object,height,time]
% PartOf(physobj,object) &
% HoldsAt(Height(object,height),time) ->
% HoldsAt(Height(physobj,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1518).
%~ From E:
%~ 
%~ partOf(Physobj,Object),holds(height(Object,Height),Time) ->         holds(height(Physobj,Height),Time)
%~ cpc :- partOf(Physobj,Object),holds(height(Object,Height),Time) ->         holds(height(Physobj,Height),Time)
%~ ooo :- [   cl(    [   holds(height(Physobj,Height),Time)],       [      partOf(Physobj,Object),           holds(height(Object,Height),Time)])]
cl(    holds(height(Physobj,Height),Time),       partOf(Physobj,Object),holds(height(Object,Height),Time)).
 %  cl(    holds(height(Physobj,Height),Time),       partOf(Physobj,Object),holds(height(Object,Height),Time)).
 %  % =================================.


%;event Catch(agent,physobj)
%;event HitFromTo(agent,physobj,object,object)
%;fluent Distance(physobj,physobj,distance)
%;fluent FlyingAcrossFromTo(physobj,object,object)
%;[agent,physobj1,physobj2,physobj3,time]
%;Initiates(HitFromTo(agent,physobj1,physobj2,physobj3),
%;          FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;          time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj2,distance),
%;         time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj3,distance),
%;         time).
%;[physobj1,physobj2,physobj3,offset,time]
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj2,offset),offset).
%;[physobj1,physobj2,physobj3,distance1,distance2,offset,time]
%;HoldsAt(Distance(physobj2,physobj3,distance1),time) &
%;distance2 = distance1 - time ->
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj3,distance2),offset).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Initiates(Catch(agent,physobj1),
%;          Holding(agent,physobj1),
%;          time).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Terminates(Catch(agent,physobj1),
%;           FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;           time).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/GSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; GSpace: grid space
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1594).
% sort coord: integer
%~ From E:
%~ 
%~ subsort(coord,integer)
subsort(coord,integer).

% sort grid
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1594).
%~ From E:
%~ 
%~ sort(grid)
sort(grid).
%; object is at (coord1, coord2) in grid.

% fluent GridAt(grid,object,coord,coord)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1597).
%~ From E:
%~ 
%~ fluent( gridAt(grid,object,coord,coord))
%~ cpc :- fluents([gridAt/4])
%~ ooo :- [   cl([fluents([gridAt/4])],[])]
%~ cpc :- mpred_prop(gridAt(grid,object,coord,coord),fluent)
%~ ooo :- [   cl([mpred_prop(gridAt(grid,object,coord,coord),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1597).
cl(mpred_prop(gridAt(grid,object,coord,coord),fluent),[]),cl(fluents(gridAt/4),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1600).
%; agent walks from (coord1, coord2)
%; to (coord3, coord4) in grid.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1602).
% event GridWalk(grid,agent,coord,coord,coord,coord)
%~ From E:
%~ 
%~ event( gridWalk(grid,agent,coord,coord,coord,coord))
%~ cpc :- events([gridWalk/6])
%~ ooo :- [   cl([events([gridWalk/6])],[])]
%~ cpc :- mpred_prop(gridWalk(grid,agent,coord,coord,coord,coord),event)
%~ ooo :- [   cl([mpred_prop(gridWalk(grid,agent,coord,coord,coord,coord),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1602).
cl(mpred_prop(gridWalk(grid,agent,coord,coord,coord,coord),event),[]),cl(events(gridWalk/6),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1604).
%; A state constraint says that for a given grid an
%; object is at one cell in that grid at a time:
% [grid,object,coord1,coord2,coord3,coord4,time]
% HoldsAt(GridAt(grid,object,coord1,coord2),time) &
% HoldsAt(GridAt(grid,object,coord3,coord4),time) ->
% coord1=coord3 & coord2=coord4.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1606).
%~ From E:
%~ 
%~ (     holds(gridAt(Grid,Object,Coord1,Coord2),Time) ,     holds(gridAt(Grid,Object,Coord3,Coord4),Time)) ->         Coord1=Coord3,Coord2=Coord4
%~ cpc :- (     holds(gridAt(Grid,Object,Coord1,Coord2),Time) ,     holds(gridAt(Grid,Object,Coord3,Coord4),Time)) ->         Coord1=Coord3,Coord2=Coord4
%~ ooo :- [   cl(    [   equals(Coord1,Coord3)],       [      holds(gridAt(Grid,Object,Coord1,Coord2),Time),           holds(gridAt(Grid,Object,Coord3,Coord4),Time)]),     cl(      [   equals(Coord2,Coord4)],           [        holds(gridAt(Grid,Object,Coord1,Coord2),Time),               holds(gridAt(Grid,Object,Coord3,Coord4),Time)])]
(     cl( equals(Coord1,Coord3),     (     holds(gridAt(Grid,Object,Coord1,Coord2),Time) ,     holds(gridAt(Grid,Object,Coord3,Coord4),Time))) ,     cl( equals(Coord2,Coord4),     (     holds(gridAt(Grid,Object,Coord1,Coord2),Time) ,     holds(gridAt(Grid,Object,Coord3,Coord4),Time)))).
 %  (     cl( equals(Coord1,Coord3),     (     holds(gridAt(Grid,Object,Coord1,Coord2),Time) ,     holds(gridAt(Grid,Object,Coord3,Coord4),Time))) ,     cl( equals(Coord2,Coord4),     (     holds(gridAt(Grid,Object,Coord1,Coord2),Time) ,     holds(gridAt(Grid,Object,Coord3,Coord4),Time)))).
 %  % =================================.


%; An effect axiom states that
%; if an agent walks from one cell in a grid to another cell,
%; the agent will be at second cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% Initiates(GridWalk(grid,agent,coord1,coord2,coord3,coord4),
%           GridAt(grid,agent,coord3,coord4),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1614).
%~ From E:
%~ 
%~ initiates_at(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord3,Coord4),       Time)
%~ cpc :- initiates(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord3,Coord4),       Time)
%~ ooo :- [   cl(    [   initiates(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord3,Coord4),       Time)],       [])]
cl(    initiates(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord3,Coord4),       Time),       []).
 %  cl(    initiates(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord3,Coord4),       Time),       []).
 %  % =================================.


%; An effect axiom states that
%; if an agent walks from one cell in a grid to another cell,
%; the agent will no longer be at the first cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% Terminates(GridWalk(grid,agent,coord1,coord2,coord3,coord4),
%            GridAt(grid,agent,coord1,coord2),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1622).
%~ From E:
%~ 
%~ terminates_at(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord1,Coord2),       Time)
%~ cpc :- terminates(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord1,Coord2),       Time)
%~ ooo :- [   cl(    [   terminates(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord1,Coord2),       Time)],       [])]
cl(    terminates(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord1,Coord2),       Time),       []).
 %  cl(    terminates(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       gridAt(Grid,Agent,Coord1,Coord2),       Time),       []).
 %  % =================================.


%; A precondition axiom states that for an agent to walk
%; from one cell in a grid to another cell, the agent
%; must be at the first cell, the second cell must not
%; be occupied, and the first cell must be adjacent to
%; the second cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% Happens(GridWalk(grid,agent,coord1,coord2,coord3,coord4),time) ->
% HoldsAt(GridAt(grid,agent,coord1,coord2),time) &
% (!{object} HoldsAt(GridAt(grid,object,coord3,coord4),time)) &
% (coord1=coord3 |
%  coord1=coord3+1 |
%  coord1=coord3-1) &
% (coord2=coord4 |
%  coord2=coord4+1 |
%  coord2=coord4-1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1632).
%~ From E:
%~ 
%~ happens(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       Time) ->         ( holds(gridAt(Grid,Agent,Coord1,Coord2),Time)  ,    not( thereExists( Object,   holds(gridAt(Grid,Object,Coord3,Coord4),Time))) ,     ( Coord1=Coord3  ;            Coord1 =                 Coord3+1 ;             Coord1 =                 Coord3-1) ,     ( Coord2=Coord4  ;            Coord2 =                 Coord4+1 ;             Coord2 =                 Coord4-1))
%~ cpc :- happens(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       Time) ->         ( holds(gridAt(Grid,Agent,Coord1,Coord2),Time)  ,    not( thereExists( Object,   holds(gridAt(Grid,Object,Coord3,Coord4),Time))) ,     ( Coord1=Coord3  ;            Coord1 =                 Coord3+1 ;             Coord1 =                 Coord3-1) ,     ( Coord2=Coord4  ;            Coord2 =                 Coord4+1 ;             Coord2 =                 Coord4-1))
%~ ooo :- [   cl(    [   exists( Object,   (     ( holds(gridAt(Grid,Agent,Coord1,Coord2),Time)  ,        not( holds(gridAt(Grid,Object,Coord3,Coord4),Time)) ,         ( equals(Coord1,Coord3)  ;            equals(Coord1,Coord3+1) ;             equals(Coord1,Coord3-1)) ,         ( equals(Coord2,Coord4)  ;            equals(Coord2,Coord4+1) ;             equals(Coord2,Coord4-1))) ;     not( happens(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       Time))))],       [])]
cl(    exists( Object,   (     ( holds(gridAt(Grid,Agent,Coord1,Coord2),Time)  ,        not( holds(gridAt(Grid,Object,Coord3,Coord4),Time)) ,         ( equals(Coord1,Coord3)  ;            equals(Coord1,Coord3+1) ;             equals(Coord1,Coord3-1)) ,         ( equals(Coord2,Coord4)  ;            equals(Coord2,Coord4+1) ;             equals(Coord2,Coord4-1))) ;     not( happens(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       Time)))),       []).
 %  cl(    exists( Object,   (     ( holds(gridAt(Grid,Agent,Coord1,Coord2),Time)  ,        not( holds(gridAt(Grid,Object,Coord3,Coord4),Time)) ,         ( equals(Coord1,Coord3)  ;            equals(Coord1,Coord3+1) ;             equals(Coord1,Coord3-1)) ,         ( equals(Coord2,Coord4)  ;            equals(Coord2,Coord4+1) ;             equals(Coord2,Coord4-1))) ;     not( happens(    gridWalk(Grid,Agent,Coord1,Coord2,Coord3,Coord4),       Time)))),       []).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/PolySpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% sort object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1670).
%~ From E:
%~ 
%~ sort(object)
sort(object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1672).
% sort xcoord: integer
%~ From E:
%~ 
%~ subsort(xcoord,integer)
subsort(xcoord,integer).

% sort ycoord: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1672).
%~ From E:
%~ 
%~ subsort(ycoord,integer)
subsort(ycoord,integer).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1674).
% sort grid
%~ From E:
%~ 
%~ sort(grid)
sort(grid).

% sort shape
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1674).
%~ From E:
%~ 
%~ sort(shape)
sort(shape).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1676).
% sort color
%~ From E:
%~ 
%~ sort(color)
sort(color).
%; constants

% shape Round,Square
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1678).
%~ From E:
%~ 
%~ t(shape,round)
isa(round,shape).
%~ From E:
%~ 
%~ t(shape,square)
isa(square,shape).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1680).
% color Red,Green
%~ From E:
%~ 
%~ t(color,red)
isa(red,color).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1680).
%~ From E:
%~ 
%~ t(color,green)
isa(green,color).
%; predicates, fluents, and events

% predicate Equal(object,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1682).
%~ From E:
%~ 
%~ predicate( equal(object,object))
%~ cpc :- predicates([equal/2])
%~ ooo :- [   cl([predicates([equal/2])],[])]
%~ cpc :- mpred_prop(equal(object,object),predicate)
%~ ooo :- [   cl([mpred_prop(equal(object,object),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1682).
cl(mpred_prop(equal(object,object),predicate),[]),cl(predicates(equal/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1684).
% predicate Shape(object,shape)
%~ From E:
%~ 
%~ predicate( shape(object,shape))
%~ cpc :- predicates([shape/2])
%~ ooo :- [   cl([predicates([shape/2])],[])]
%~ cpc :- mpred_prop(shape(object,shape),predicate)
%~ ooo :- [   cl([mpred_prop(shape(object,shape),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1684).
cl(mpred_prop(shape(object,shape),predicate),[]),cl(predicates(shape/2),[]).

% predicate Color(object,color)
%~ From E:
%~ 
%~ predicate( color(object,color))
%~ cpc :- predicates([color/2])
%~ ooo :- [   cl([predicates([color/2])],[])]
%~ cpc :- mpred_prop(color(object,color),predicate)
%~ ooo :- [   cl([mpred_prop(color(object,color),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1684).
cl(mpred_prop(color(object,color),predicate),[]),cl(predicates(color/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1686).
% fluent Location(grid,object,xcoord,ycoord)
%~ From E:
%~ 
%~ fluent( location(grid,object,xcoord,ycoord))
%~ cpc :- fluents([location/4])
%~ ooo :- [   cl([fluents([location/4])],[])]
%~ cpc :- mpred_prop(location(grid,object,xcoord,ycoord),fluent)
%~ ooo :- [   cl([mpred_prop(location(grid,object,xcoord,ycoord),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1686).
cl(mpred_prop(location(grid,object,xcoord,ycoord),fluent),[]),cl(fluents(location/4),[]).

% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
%~ From E:
%~ 
%~ event( move(grid,object,xcoord,ycoord,xcoord,ycoord))
%~ cpc :- events([move/6])
%~ ooo :- [   cl([events([move/6])],[])]
%~ cpc :- mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event)
%~ ooo :- [   cl([mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1686).
cl(mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event),[]),cl(events(move/6),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1689).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1691).
%~ From E:
%~ 
%~ equal(Object1,Object2) ->         equal(Object2,Object1)
%~ cpc :- equal(Object1,Object2) ->         equal(Object2,Object1)
%~ ooo :- [   cl([equal(Object2,Object1)],[equal(Object1,Object2)])]
cl(equal(Object2,Object1),equal(Object1,Object2)).
 %  cl(equal(Object2,Object1),equal(Object1,Object2)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1693).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1695).
%~ From E:
%~ 
%~ shape(Object,Shape1),shape(Object,Shape2) ->         Shape1=Shape2
%~ cpc :- shape(Object,Shape1),shape(Object,Shape2) ->         Shape1=Shape2
%~ ooo :- [   cl(    [   equals(Shape1,Shape2)],       [      shape(Object,Shape1),           shape(Object,Shape2)])]
cl( equals(Shape1,Shape2),   shape(Object,Shape1),shape(Object,Shape2)).
 %  cl( equals(Shape1,Shape2),   shape(Object,Shape1),shape(Object,Shape2)).
 %  % =================================.


%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1699).
%~ From E:
%~ 
%~ color(Object,Color1),color(Object,Color2) ->         Color1=Color2
%~ cpc :- color(Object,Color1),color(Object,Color2) ->         Color1=Color2
%~ ooo :- [   cl(    [   equals(Color1,Color2)],       [      color(Object,Color1),           color(Object,Color2)])]
cl( equals(Color1,Color2),   color(Object,Color1),color(Object,Color2)).
 %  cl( equals(Color1,Color2),   color(Object,Color1),color(Object,Color2)).
 %  % =================================.


%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1704).
%~ From E:
%~ 
%~ equal(Object1,Object2) ->         thereExists(Shape,(shape(Object1,Shape),shape(Object2,Shape)))
%~ cpc :- equal(Object1,Object2) ->         thereExists(Shape,(shape(Object1,Shape),shape(Object2,Shape)))
%~ ooo :- [   cl(    [   exists( Shape,   (     shape(Object1,Shape),shape(Object2,Shape) ;     not(equal(Object1,Object2))))],       [])]
cl(    exists( Shape,   (     shape(Object1,Shape),shape(Object2,Shape) ;     not equal(Object1,Object2))),       []).
 %  cl(    exists( Shape,   (     shape(Object1,Shape),shape(Object2,Shape) ;     not(equal(Object1,Object2)))),       []).
 %  % =================================.


%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1709).
%~ From E:
%~ 
%~ equal(Object1,Object2) ->         thereExists(Color,(color(Object1,Color),color(Object2,Color)))
%~ cpc :- equal(Object1,Object2) ->         thereExists(Color,(color(Object1,Color),color(Object2,Color)))
%~ ooo :- [   cl(    [   exists( Color,   (     color(Object1,Color),color(Object2,Color) ;     not(equal(Object1,Object2))))],       [])]
cl(    exists( Color,   (     color(Object1,Color),color(Object2,Color) ;     not equal(Object1,Object2))),       []).
 %  cl(    exists( Color,   (     color(Object1,Color),color(Object2,Color) ;     not(equal(Object1,Object2)))),       []).
 %  % =================================.


%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1714).
%~ From E:
%~ 
%~ ( equal(Object1,Object2)  ->    (         holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,         holds(location(Grid,Object2,Xcoord2,Ycoord2),Time)) ->     Xcoord1=Xcoord2,Ycoord1=Ycoord2)
%~ cpc :- ( equal(Object1,Object2)  ->    (         holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,         holds(location(Grid,Object2,Xcoord2,Ycoord2),Time)) ->     Xcoord1=Xcoord2,Ycoord1=Ycoord2)
%~ ooo :- [   cl(    [   equals(Xcoord1,Xcoord2)],       [      holds(location(Grid,Object1,Xcoord1,Ycoord1),Time),           holds(location(Grid,Object2,Xcoord2,Ycoord2),Time),           equal(Object1,Object2)]),     cl(      [   equals(Ycoord1,Ycoord2)],           [        holds(location(Grid,Object1,Xcoord1,Ycoord1),Time),               holds(location(Grid,Object2,Xcoord2,Ycoord2),Time),               equal(Object1,Object2)])]
(     cl( equals(Xcoord1,Xcoord2),     ( holds(location(Grid,Object1,Xcoord1,Ycoord1),Time)  ,    holds(location(Grid,Object2,Xcoord2,Ycoord2),Time) ,     equal(Object1,Object2))) ,     cl( equals(Ycoord1,Ycoord2),     ( holds(location(Grid,Object1,Xcoord1,Ycoord1),Time)  ,    holds(location(Grid,Object2,Xcoord2,Ycoord2),Time) ,     equal(Object1,Object2)))).
 %  (     cl( equals(Xcoord1,Xcoord2),     ( holds(location(Grid,Object1,Xcoord1,Ycoord1),Time)  ,    holds(location(Grid,Object2,Xcoord2,Ycoord2),Time) ,     equal(Object1,Object2))) ,     cl( equals(Ycoord1,Ycoord2),     ( holds(location(Grid,Object1,Xcoord1,Ycoord1),Time)  ,    holds(location(Grid,Object2,Xcoord2,Ycoord2),Time) ,     equal(Object1,Object2)))).
 %  % =================================.


%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1721).
%~ From E:
%~ 
%~ (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time)) ->         Xcoord1=Xcoord2,Ycoord1=Ycoord2
%~ cpc :- (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time)) ->         Xcoord1=Xcoord2,Ycoord1=Ycoord2
%~ ooo :- [   cl(    [   equals(Xcoord1,Xcoord2)],       [      holds(location(Grid,Object,Xcoord1,Ycoord1),Time),           holds(location(Grid,Object,Xcoord2,Ycoord2),Time)]),     cl(      [   equals(Ycoord1,Ycoord2)],           [        holds(location(Grid,Object,Xcoord1,Ycoord1),Time),               holds(location(Grid,Object,Xcoord2,Ycoord2),Time)])]
(     cl( equals(Xcoord1,Xcoord2),     (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time))) ,     cl( equals(Ycoord1,Ycoord2),     (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time)))).
 %  (     cl( equals(Xcoord1,Xcoord2),     (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time))) ,     cl( equals(Ycoord1,Ycoord2),     (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time)))).
 %  % =================================.


%; objects have locations
% [grid,object,time]
% (% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1727).
%~ From E:
%~ 
%~ exists( [Xcoord,Ycoord],   holds(location(Grid,Object,Xcoord,Ycoord),Time))
%~ cpc :- exists( [Xcoord,Ycoord],   holds(location(Grid,Object,Xcoord,Ycoord),Time))
%~ ooo :- [   cl(    [   exists( Xcoord,   exists( Ycoord,   holds(location(Grid,Object,Xcoord,Ycoord),Time)))],       [])]
cl(    exists( Xcoord,   exists( Ycoord,   holds(location(Grid,Object,Xcoord,Ycoord),Time))),       []).
 %  cl(    exists( Xcoord,   exists( Ycoord,   holds(location(Grid,Object,Xcoord,Ycoord),Time))),       []).
 %  % =================================.


%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1731).
%~ From E:
%~ 
%~ (     holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object2,Xcoord1,Ycoord1),Time)) ->         equal(Object1,Object2)
%~ cpc :- (     holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object2,Xcoord1,Ycoord1),Time)) ->         equal(Object1,Object2)
%~ ooo :- [   cl(    [   equal(Object1,Object2)],       [      holds(location(Grid,Object1,Xcoord1,Ycoord1),Time),           holds(location(Grid,Object2,Xcoord1,Ycoord1),Time)])]
cl( equal(Object1,Object2),   (     holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object2,Xcoord1,Ycoord1),Time))).
 %  cl( equal(Object1,Object2),   (     holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object2,Xcoord1,Ycoord1),Time))).
 %  % =================================.


%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1737).
%~ From E:
%~ 
%~ initiates_at(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time)
%~ cpc :- initiates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time)
%~ ooo :- [   cl(    [   initiates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time)],       [])]
cl(    initiates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time),       []).
 %  cl(    initiates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time),       []).
 %  % =================================.


%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1744).
%~ From E:
%~ 
%~ terminates_at(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time)
%~ cpc :- terminates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time)
%~ ooo :- [   cl(    [   terminates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time)],       [])]
cl(    terminates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time),       []).
 %  cl(    terminates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time),       []).
 %  % =================================.


%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1762).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
%~ From E:
%~ 
%~ happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time) ->         (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     (         (             Xcoord1=Xcoord2 ,             Ycoord1=Ycoord2+1;Ycoord1=Ycoord2-1) ;         (             Ycoord1=Ycoord2 ,             Xcoord1=Xcoord2+1;Xcoord1=Xcoord2-1)))
%~ cpc :- happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time) ->         (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     (         (             Xcoord1=Xcoord2 ,             Ycoord1=Ycoord2+1;Ycoord1=Ycoord2-1) ;         (             Ycoord1=Ycoord2 ,             Xcoord1=Xcoord2+1;Xcoord1=Xcoord2-1)))
%~ ooo :- [   cl(    [   holds(location(Grid,Object,Xcoord1,Ycoord1),Time)],       [      happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)]),     cl(      [   equals(Xcoord1,Xcoord2),     equals(Ycoord1,Ycoord2)],           [        happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)]),     cl(      [   equals(Xcoord1,Xcoord2),     equals(Xcoord1,Xcoord2+1),     equals(Xcoord1,Xcoord2-1)],           [        happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)]),     cl(      [   equals(Ycoord1,Ycoord2+1),     equals(Ycoord1,Ycoord2-1),     equals(Ycoord1,Ycoord2)],           [        happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)]),     cl(      [   equals(Ycoord1,Ycoord2+1),     equals(Ycoord1,Ycoord2-1),     equals(Xcoord1,Xcoord2+1),     equals(Xcoord1,Xcoord2-1)],           [        happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)])]
( cl(    holds(location(Grid,Object,Xcoord1,Ycoord1),Time),       happens(       move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),             Time))  ,    cl(      equals(Xcoord1,Xcoord2),equals(Ycoord1,Ycoord2),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Xcoord1,Xcoord2)  ,    equals(Xcoord1,Xcoord2+1) ,     equals(Xcoord1,Xcoord2-1)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Ycoord1,Ycoord2+1)  ,    equals(Ycoord1,Ycoord2-1) ,     equals(Ycoord1,Ycoord2)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Ycoord1,Ycoord2+1)  ,    equals(Ycoord1,Ycoord2-1) ,     equals(Xcoord1,Xcoord2+1) ,     equals(Xcoord1,Xcoord2-1)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time))).
 %  ( cl(    holds(location(Grid,Object,Xcoord1,Ycoord1),Time),       happens(       move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),             Time))  ,    cl(      equals(Xcoord1,Xcoord2),equals(Ycoord1,Ycoord2),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Xcoord1,Xcoord2)  ,    equals(Xcoord1,Xcoord2+1) ,     equals(Xcoord1,Xcoord2-1)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Ycoord1,Ycoord2+1)  ,    equals(Ycoord1,Ycoord2-1) ,     equals(Ycoord1,Ycoord2)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Ycoord1,Ycoord2+1)  ,    equals(Ycoord1,Ycoord2-1) ,     equals(Xcoord1,Xcoord2+1) ,     equals(Xcoord1,Xcoord2-1)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time))).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/HandTo.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1786).
% event HandTo(agent,agent,physobj)
%~ From E:
%~ 
%~ event( handTo(agent,agent,physobj))
%~ cpc :- events([handTo/3])
%~ ooo :- [   cl([events([handTo/3])],[])]
%~ cpc :- actions([handTo/3])
%~ ooo :- [   cl([actions([handTo/3])],[])]
%~ cpc :- mpred_prop(handTo(agent,agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(handTo(agent,agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1786).
( cl(events(handTo/3),[])  ,    cl(mpred_prop(handTo(agent,agent,physobj),action),[]) ,     cl(actions(handTo/3),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1788).
% [agent1,agent2,physobj,time]
% Initiates(HandTo(agent1,agent2,physobj),
%           Holding(agent2,physobj),
%           time).
%~ From E:
%~ 
%~ initiates_at( handTo(Agent1,Agent2,Physobj),   holding(Agent2,Physobj),     Time)
%~ cpc :- initiates( handTo(Agent1,Agent2,Physobj),   holding(Agent2,Physobj),     Time)
%~ ooo :- [   cl(    [   initiates( handTo(Agent1,Agent2,Physobj),   holding(Agent2,Physobj),     Time)],       [])]
cl(    initiates( handTo(Agent1,Agent2,Physobj),   holding(Agent2,Physobj),     Time),       []).
 %  cl(    initiates( handTo(Agent1,Agent2,Physobj),   holding(Agent2,Physobj),     Time),       []).
 %  % =================================.


% [agent1,agent2,physobj,time]
% Terminates(HandTo(agent1,agent2,physobj),
%            Holding(agent1,physobj),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1794).
%~ From E:
%~ 
%~ terminates_at( handTo(Agent1,Agent2,Physobj),   holding(Agent1,Physobj),     Time)
%~ cpc :- terminates( handTo(Agent1,Agent2,Physobj),   holding(Agent1,Physobj),     Time)
%~ ooo :- [   cl(    [   terminates( handTo(Agent1,Agent2,Physobj),   holding(Agent1,Physobj),     Time)],       [])]
cl(    terminates( handTo(Agent1,Agent2,Physobj),   holding(Agent1,Physobj),     Time),       []).
 %  cl(    terminates( handTo(Agent1,Agent2,Physobj),   holding(Agent1,Physobj),     Time),       []).
 %  % =================================.


% [agent1,agent2,physobj,time]
% Happens(HandTo(agent1,agent2,physobj),time) ->
% HoldsAt(Holding(agent1,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1799).
%~ From E:
%~ 
%~ happens(handTo(Agent1,Agent2,Physobj),Time) ->         holds(holding(Agent1,Physobj),Time)
%~ cpc :- happens(handTo(Agent1,Agent2,Physobj),Time) ->         holds(holding(Agent1,Physobj),Time)
%~ ooo :- [   cl(    [   holds(holding(Agent1,Physobj),Time)],       [      happens(handTo(Agent1,Agent2,Physobj),Time)])]
cl(    holds(holding(Agent1,Physobj),Time),       happens(handTo(Agent1,Agent2,Physobj),Time)).
 %  cl(    holds(holding(Agent1,Physobj),Time),       happens(handTo(Agent1,Agent2,Physobj),Time)).
 %  % =================================.

% event ShakeHands(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1801).
%~ From E:
%~ 
%~ event( shakeHands(agent,agent))
%~ cpc :- events([shakeHands/2])
%~ ooo :- [   cl([events([shakeHands/2])],[])]
%~ cpc :- actions([shakeHands/2])
%~ ooo :- [   cl([actions([shakeHands/2])],[])]
%~ cpc :- mpred_prop(shakeHands(agent,agent),action)
%~ ooo :- [   cl([mpred_prop(shakeHands(agent,agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1801).
( cl(events(shakeHands/2),[])  ,    cl(mpred_prop(shakeHands(agent,agent),action),[]) ,     cl(actions(shakeHands/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1804).
% event WriteOn(agent,paper,pen)
%~ From E:
%~ 
%~ event( writeOn(agent,paper,pen))
%~ cpc :- events([writeOn/3])
%~ ooo :- [   cl([events([writeOn/3])],[])]
%~ cpc :- actions([writeOn/3])
%~ ooo :- [   cl([actions([writeOn/3])],[])]
%~ cpc :- mpred_prop(writeOn(agent,paper,pen),action)
%~ ooo :- [   cl([mpred_prop(writeOn(agent,paper,pen),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1804).
( cl(events(writeOn/3),[])  ,    cl(mpred_prop(writeOn(agent,paper,pen),action),[]) ,     cl(actions(writeOn/3),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1808).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Container.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%;
%; Container: container
%;
%; linkage to OTSpace(M):
% [agent,container1,container2,time]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1828).
% Happens(TakeOutOf(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
%~ From E:
%~ 
%~ happens(takeOutOf(Agent,Container1,Container2),Time) ->         holds(containerIsOpen(Container2),Time)
%~ cpc :- happens(takeOutOf(Agent,Container1,Container2),Time) ->         holds(containerIsOpen(Container2),Time)
%~ ooo :- [   cl(    [   holds(containerIsOpen(Container2),Time)],       [      happens(takeOutOf(Agent,Container1,Container2),Time)])]
cl(    holds(containerIsOpen(Container2),Time),       happens(takeOutOf(Agent,Container1,Container2),Time)).
 %  cl(    holds(containerIsOpen(Container2),Time),       happens(takeOutOf(Agent,Container1,Container2),Time)).
 %  % =================================.


% [agent,container1,container2,time]
% Happens(PutInside(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1832).
%~ From E:
%~ 
%~ happens(putInside(Agent,Container1,Container2),Time) ->         holds(containerIsOpen(Container2),Time)
%~ cpc :- happens(putInside(Agent,Container1,Container2),Time) ->         holds(containerIsOpen(Container2),Time)
%~ ooo :- [   cl(    [   holds(containerIsOpen(Container2),Time)],       [      happens(putInside(Agent,Container1,Container2),Time)])]
cl(    holds(containerIsOpen(Container2),Time),       happens(putInside(Agent,Container1,Container2),Time)).
 %  cl(    holds(containerIsOpen(Container2),Time),       happens(putInside(Agent,Container1,Container2),Time)).
 %  % =================================.


%; agent opens container.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1836).
% event ContainerOpen(agent,container)
%~ From E:
%~ 
%~ event( containerOpen(agent,container))
%~ cpc :- events([containerOpen/2])
%~ ooo :- [   cl([events([containerOpen/2])],[])]
%~ cpc :- actions([containerOpen/2])
%~ ooo :- [   cl([actions([containerOpen/2])],[])]
%~ cpc :- mpred_prop(containerOpen(agent,container),action)
%~ ooo :- [   cl([mpred_prop(containerOpen(agent,container),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1836).
( cl(events(containerOpen/2),[])  ,    cl(mpred_prop(containerOpen(agent,container),action),[]) ,     cl(actions(containerOpen/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1838).
%; agent closes container.

% event ContainerClose(agent,container)
%~ From E:
%~ 
%~ event( containerClose(agent,container))
%~ cpc :- events([containerClose/2])
%~ ooo :- [   cl([events([containerClose/2])],[])]
%~ cpc :- actions([containerClose/2])
%~ ooo :- [   cl([actions([containerClose/2])],[])]
%~ cpc :- mpred_prop(containerClose(agent,container),action)
%~ ooo :- [   cl([mpred_prop(containerClose(agent,container),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1838).
( cl(events(containerClose/2),[])  ,    cl(mpred_prop(containerClose(agent,container),action),[]) ,     cl(actions(containerClose/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1841).
%; container is open.

% fluent ContainerIsOpen(container)
%~ From E:
%~ 
%~ fluent( containerIsOpen(container))
%~ cpc :- fluents([containerIsOpen/1])
%~ ooo :- [   cl([fluents([containerIsOpen/1])],[])]
%~ cpc :- mpred_prop(containerIsOpen(container),fluent)
%~ ooo :- [   cl([mpred_prop(containerIsOpen(container),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1841).
cl(mpred_prop(containerIsOpen(container),fluent),[]),cl(fluents(containerIsOpen/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1844).
% fluent ContainerClosed(container)
%~ From E:
%~ 
%~ fluent( containerClosed(container))
%~ cpc :- fluents([containerClosed/1])
%~ ooo :- [   cl([fluents([containerClosed/1])],[])]
%~ cpc :- mpred_prop(containerClosed(container),fluent)
%~ ooo :- [   cl([mpred_prop(containerClosed(container),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1844).
cl(mpred_prop(containerClosed(container),fluent),[]),cl(fluents(containerClosed/1),[]).

% noninertial ContainerClosed
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(containerClosed)))
:-( call_pel_directive( noninertial(containerClosed))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1847).
% [container,time]
% HoldsAt(ContainerClosed(container),time) <->
% !HoldsAt(ContainerIsOpen(container),time).
%~ From E:
%~ 
%~ (     holds(containerClosed(Container),Time) <->     holds(not(containerIsOpen(Container)),Time))
%~ cpc :- (     holds(containerClosed(Container),Time) <->     holds(not(containerIsOpen(Container)),Time))
%~ ooo :- [   cl( [], [  [   holds(containerIsOpen(Container),Time),     holds(containerClosed(Container),Time)])],     cl(      [   holds(containerClosed(Container),Time),     holds(containerIsOpen(Container),Time)],           [])]
(     cl( [],     (     holds(containerIsOpen(Container),Time) ,     holds(containerClosed(Container),Time))) ,     cl(      (     holds(containerClosed(Container),Time) ,     holds(containerIsOpen(Container),Time)),           [])).
 %  (     cl( [],     (     holds(containerIsOpen(Container),Time) ,     holds(containerClosed(Container),Time))) ,     cl(      (     holds(containerClosed(Container),Time) ,     holds(containerIsOpen(Container),Time)),           [])).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to open a container,
%; the agent must be awake,
%; the container must not already be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerOpen(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1856).
%~ From E:
%~ 
%~ happens(containerOpen(Agent,Container),Time) ->         ( holds(awake(Agent),Time)  ,    holds(not(containerIsOpen(Container)),Time) ,     holds(holding(Agent,Container),Time))
%~ cpc :- happens(containerOpen(Agent,Container),Time) ->         ( holds(awake(Agent),Time)  ,    holds(not(containerIsOpen(Container)),Time) ,     holds(holding(Agent,Container),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(containerOpen(Agent,Container),Time)]),     cl( [], [    [   holds(containerIsOpen(Container),Time),     happens(containerOpen(Agent,Container),Time)])],     cl(      [   holds(holding(Agent,Container),Time)],           [        happens(containerOpen(Agent,Container),Time)])]
( cl(    holds(awake(Agent),Time),       happens(containerOpen(Agent,Container),Time))  ,    cl( [],     (     holds(containerIsOpen(Container),Time) ,     happens(containerOpen(Agent,Container),Time))) ,     cl(      holds(holding(Agent,Container),Time),           happens(containerOpen(Agent,Container),Time))).
 %  ( cl(    holds(awake(Agent),Time),       happens(containerOpen(Agent,Container),Time))  ,    cl( [],     (     holds(containerIsOpen(Container),Time) ,     happens(containerOpen(Agent,Container),Time))) ,     cl(      holds(holding(Agent,Container),Time),           happens(containerOpen(Agent,Container),Time))).
 %  % =================================.


%; An effect axiom states that
%; if an agent opens a container,
%; the container will be open:
% [agent,container,time]
% Initiates(ContainerOpen(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1865).
%~ From E:
%~ 
%~ initiates_at(containerOpen(Agent,Container),containerIsOpen(Container),Time)
%~ cpc :- initiates(containerOpen(Agent,Container),containerIsOpen(Container),Time)
%~ ooo :- [   cl(    [   initiates(containerOpen(Agent,Container),containerIsOpen(Container),Time)],       [])]
cl(    initiates(containerOpen(Agent,Container),containerIsOpen(Container),Time),       []).
 %  cl(    initiates(containerOpen(Agent,Container),containerIsOpen(Container),Time),       []).
 %  % =================================.


%; A precondition axiom states that
%; for an agent to close a container,
%; the agent must be awake,
%; the container must be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerClose(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1873).
%~ From E:
%~ 
%~ happens(containerClose(Agent,Container),Time) ->         ( holds(awake(Agent),Time)  ,    holds(containerIsOpen(Container),Time) ,     holds(holding(Agent,Container),Time))
%~ cpc :- happens(containerClose(Agent,Container),Time) ->         ( holds(awake(Agent),Time)  ,    holds(containerIsOpen(Container),Time) ,     holds(holding(Agent,Container),Time))
%~ ooo :- [   cl(    [   holds(awake(Agent),Time)],       [      happens(containerClose(Agent,Container),Time)]),     cl(      [   holds(containerIsOpen(Container),Time)],           [        happens(containerClose(Agent,Container),Time)]),     cl(      [   holds(holding(Agent,Container),Time)],           [        happens(containerClose(Agent,Container),Time)])]
( cl(    holds(awake(Agent),Time),       happens(containerClose(Agent,Container),Time))  ,    cl(      holds(containerIsOpen(Container),Time),           happens(containerClose(Agent,Container),Time)) ,     cl(      holds(holding(Agent,Container),Time),           happens(containerClose(Agent,Container),Time))).
 %  ( cl(    holds(awake(Agent),Time),       happens(containerClose(Agent,Container),Time))  ,    cl(      holds(containerIsOpen(Container),Time),           happens(containerClose(Agent,Container),Time)) ,     cl(      holds(holding(Agent,Container),Time),           happens(containerClose(Agent,Container),Time))).
 %  % =================================.


%; An effect axiom states that
%; if an agent closes a container,
%; the container will no longer be open:
% [agent,container,time]
% Terminates(ContainerClose(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1882).
%~ From E:
%~ 
%~ terminates_at(containerClose(Agent,Container),containerIsOpen(Container),Time)
%~ cpc :- terminates(containerClose(Agent,Container),containerIsOpen(Container),Time)
%~ ooo :- [   cl(    [   terminates(containerClose(Agent,Container),containerIsOpen(Container),Time)],       [])]
cl(    terminates(containerClose(Agent,Container),containerIsOpen(Container),Time),       []).
 %  cl(    terminates(containerClose(Agent,Container),containerIsOpen(Container),Time),       []).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/SpeechAct.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The SpeechAct representation deals with a few speech acts
%; \fullcite{Searle:1969}.
%;
%; @book{Searle:1969,
%;   author = "John R. Searle",
%;   year = "1969",
%;   title = "Speech Acts: An Essay in the Philosophy of Language",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; We handle
%; the illocutionary acts of
%; inviting someone into one's house (a form of request) and
%; greeting someone,
%; and the expressive speech act of crying for joy.
%;
%; inviting in
%; agent1 invites agent2 into room.

% event InviteIn(agent,agent,room)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1923).
%~ From E:
%~ 
%~ event( inviteIn(agent,agent,room))
%~ cpc :- events([inviteIn/3])
%~ ooo :- [   cl([events([inviteIn/3])],[])]
%~ cpc :- actions([inviteIn/3])
%~ ooo :- [   cl([actions([inviteIn/3])],[])]
%~ cpc :- mpred_prop(inviteIn(agent,agent,room),action)
%~ ooo :- [   cl([mpred_prop(inviteIn(agent,agent,room),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1923).
( cl(events(inviteIn/3),[])  ,    cl(mpred_prop(inviteIn(agent,agent,room),action),[]) ,     cl(actions(inviteIn/3),[])).


%; agent1 is invited into room by agent2.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1926).
% fluent InvitedIn(agent,room,agent)
%~ From E:
%~ 
%~ fluent( invitedIn(agent,room,agent))
%~ cpc :- fluents([invitedIn/3])
%~ ooo :- [   cl([fluents([invitedIn/3])],[])]
%~ cpc :- mpred_prop(invitedIn(agent,room,agent),fluent)
%~ ooo :- [   cl([mpred_prop(invitedIn(agent,room,agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1926).
cl(mpred_prop(invitedIn(agent,room,agent),fluent),[]),cl(fluents(invitedIn/3),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1928).
%; A precondition axiom states that for
%; an agent to invite another agent into a room,
%; the first agent must be in the room and
%; there must be an outside area such that
%; the second agent is at the outside area and
%; the outside area is adjacent to the room:
% [agent1,agent2,room,time]
% Happens(InviteIn(agent1,agent2,room),time) ->
% HoldsAt(At(agent1,room),time) &
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1934).
% {outside}% 
% HoldsAt(At(agent2,outside),time) &
% Adjacent(room,outside).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1937).
%~ From E:
%~ 
%~ exists( Outside,   happens(inviteIn(Agent1,Agent2,Room),Time) ->         ( holds(at_loc(Agent1,Room),Time)  ,    holds(at_loc(Agent2,Outside),Time) ,     adjacent(Room,Outside)))
%~ cpc :- exists( Outside,   happens(inviteIn(Agent1,Agent2,Room),Time) ->         ( holds(at_loc(Agent1,Room),Time)  ,    holds(at_loc(Agent2,Outside),Time) ,     adjacent(Room,Outside)))
%~ ooo :- [   cl(    [   exists( Outside,   (     ( holds(at_loc(Agent1,Room),Time)  ,        holds(at_loc(Agent2,Outside),Time) ,         adjacent(Room,Outside)) ;     not( happens(inviteIn(Agent1,Agent2,Room),Time))))],       [])]
cl(    exists( Outside,   (     ( holds(at_loc(Agent1,Room),Time)  ,        holds(at_loc(Agent2,Outside),Time) ,         adjacent(Room,Outside)) ;     not( happens(inviteIn(Agent1,Agent2,Room),Time)))),       []).
 %  cl(    exists( Outside,   (     ( holds(at_loc(Agent1,Room),Time)  ,        holds(at_loc(Agent2,Outside),Time) ,         adjacent(Room,Outside)) ;     not( happens(inviteIn(Agent1,Agent2,Room),Time)))),       []).
 %  % =================================.


%; An effect axiom states that if
%; an agent invites another agent into a room,
%; the second agent will be invited into the room by the first agent:
% [agent1,agent2,room,time]
% Initiates(InviteIn(agent1,agent2,room),
%           InvitedIn(agent2,room,agent1),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1944).
%~ From E:
%~ 
%~ initiates_at( inviteIn(Agent1,Agent2,Room),   invitedIn(Agent2,Room,Agent1),     Time)
%~ cpc :- initiates( inviteIn(Agent1,Agent2,Room),   invitedIn(Agent2,Room,Agent1),     Time)
%~ ooo :- [   cl(    [   initiates( inviteIn(Agent1,Agent2,Room),   invitedIn(Agent2,Room,Agent1),     Time)],       [])]
cl(    initiates( inviteIn(Agent1,Agent2,Room),   invitedIn(Agent2,Room,Agent1),     Time),       []).
 %  cl(    initiates( inviteIn(Agent1,Agent2,Room),   invitedIn(Agent2,Room,Agent1),     Time),       []).
 %  % =================================.


%; agent intends to walk into room.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1950).
% event IntendToWalkIn(agent,room)
%~ From E:
%~ 
%~ event( intendToWalkIn(agent,room))
%~ cpc :- events([intendToWalkIn/2])
%~ ooo :- [   cl([events([intendToWalkIn/2])],[])]
%~ cpc :- actions([intendToWalkIn/2])
%~ ooo :- [   cl([actions([intendToWalkIn/2])],[])]
%~ cpc :- mpred_prop(intendToWalkIn(agent,room),action)
%~ ooo :- [   cl([mpred_prop(intendToWalkIn(agent,room),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1950).
( cl(events(intendToWalkIn/2),[])  ,    cl(mpred_prop(intendToWalkIn(agent,room),action),[]) ,     cl(actions(intendToWalkIn/2),[])).


%; agent has the intention to walk into room.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1952).
% fluent IntentionToWalkIn(agent,room)
%~ From E:
%~ 
%~ fluent( intentionToWalkIn(agent,room))
%~ cpc :- fluents([intentionToWalkIn/2])
%~ ooo :- [   cl([fluents([intentionToWalkIn/2])],[])]
%~ cpc :- mpred_prop(intentionToWalkIn(agent,room),fluent)
%~ ooo :- [   cl([mpred_prop(intentionToWalkIn(agent,room),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1952).
cl(mpred_prop(intentionToWalkIn(agent,room),fluent),[]),cl(fluents(intentionToWalkIn/2),[]).


%; agent acts on the intention to walk into room.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1954).
% fluent ActOnIntentionToWalkIn(agent,room)
%~ From E:
%~ 
%~ fluent( actOnIntentionToWalkIn(agent,room))
%~ cpc :- fluents([actOnIntentionToWalkIn/2])
%~ ooo :- [   cl([fluents([actOnIntentionToWalkIn/2])],[])]
%~ cpc :- mpred_prop(actOnIntentionToWalkIn(agent,room),fluent)
%~ ooo :- [   cl([mpred_prop(actOnIntentionToWalkIn(agent,room),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1954).
cl(mpred_prop(actOnIntentionToWalkIn(agent,room),fluent),[]),cl(fluents(actOnIntentionToWalkIn/2),[]).

% noninertial ActOnIntentionToWalkIn
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(actOnIntentionToWalkIn)))
:-( call_pel_directive( noninertial(actOnIntentionToWalkIn))).
%; A trigger axiom states that
%; if an agent is invited into a room by another agent,
%; the first agent likes the second agent, and
%; the first agent does not already have the intention to
%; walk into the room,
%; the first agent intends to walk into the room:
% [agent1,agent2,room,time]
% HoldsAt(InvitedIn(agent1,room,agent2),time) &
% HoldsAt(Like(agent1,agent2),time) &
% !HoldsAt(IntentionToWalkIn(agent1,room),time) ->
% Happens(IntendToWalkIn(agent1,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1963).
%~ From E:
%~ 
%~ ( holds(invitedIn(Agent1,Room,Agent2),Time)  ,    holds(like(Agent1,Agent2),Time) ,     holds(not(intentionToWalkIn(Agent1,Room)),Time)) ->         happens(intendToWalkIn(Agent1,Room),Time)
%~ cpc :- ( holds(invitedIn(Agent1,Room,Agent2),Time)  ,    holds(like(Agent1,Agent2),Time) ,     holds(not(intentionToWalkIn(Agent1,Room)),Time)) ->         happens(intendToWalkIn(Agent1,Room),Time)
%~ ooo :- [   cl(    [   happens(intendToWalkIn(Agent1,Room),Time),     holds(intentionToWalkIn(Agent1,Room),Time)],       [      holds(invitedIn(Agent1,Room,Agent2),Time),           holds(like(Agent1,Agent2),Time)])]
cl(    (     happens(intendToWalkIn(Agent1,Room),Time) ,     holds(intentionToWalkIn(Agent1,Room),Time)),       (           holds(invitedIn(Agent1,Room,Agent2),Time) ,           holds(like(Agent1,Agent2),Time))).
 %  cl(    (     happens(intendToWalkIn(Agent1,Room),Time) ,     holds(intentionToWalkIn(Agent1,Room),Time)),       (           holds(invitedIn(Agent1,Room,Agent2),Time) ,           holds(like(Agent1,Agent2),Time))).
 %  % =================================.


%; An effect axiom states that
%; if an agent intends to walk into a room,
%; the agent will have the intention to walk into the room:
% [agent,room,time]
% Initiates(IntendToWalkIn(agent,room),
%           IntentionToWalkIn(agent,room),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1972).
%~ From E:
%~ 
%~ initiates_at( intendToWalkIn(Agent,Room),   intentionToWalkIn(Agent,Room),     Time)
%~ cpc :- initiates( intendToWalkIn(Agent,Room),   intentionToWalkIn(Agent,Room),     Time)
%~ ooo :- [   cl(    [   initiates( intendToWalkIn(Agent,Room),   intentionToWalkIn(Agent,Room),     Time)],       [])]
cl(    initiates( intendToWalkIn(Agent,Room),   intentionToWalkIn(Agent,Room),     Time),       []).
 %  cl(    initiates( intendToWalkIn(Agent,Room),   intentionToWalkIn(Agent,Room),     Time),       []).
 %  % =================================.


%; Two trigger axioms state that
%; if an agent has the intention to walk into a room,
%; the agent acts on the intention to walk into the room,
%; the agent is at a location,
%; side one (two) of a door is the room,
%; side two (one) of the door is the location,
%; agent will walk through side two (one) of the door:
% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side1(door)=room &
% Side2(door)=location ->
% Happens(WalkThroughDoor21(agent,door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1984).
%~ From E:
%~ 
%~ ( holds(intentionToWalkIn(Agent,Room),Time)  ,    holds(actOnIntentionToWalkIn(Agent,Room),Time) ,     holds(at_loc(Agent,Location),Time) ,       side1(Door) =             Room ,       side2(Door) =             Location) ->         happens(walkThroughDoor21(Agent,Door),Time)
%~ cpc :- ( holds(intentionToWalkIn(Agent,Room),Time)  ,    holds(actOnIntentionToWalkIn(Agent,Room),Time) ,     holds(at_loc(Agent,Location),Time) ,       side1(Door) =             Room ,       side2(Door) =             Location) ->         happens(walkThroughDoor21(Agent,Door),Time)
%~ ooo :- [   cl(    [   happens(walkThroughDoor21(Agent,Door),Time)],       [      holds(intentionToWalkIn(Agent,Room),Time),           holds(actOnIntentionToWalkIn(Agent,Room),Time),           holds(at_loc(Agent,Location),Time),           equals(side1(Door),Room),           equals(side2(Door),Location)])]
cl(    happens(walkThroughDoor21(Agent,Door),Time),       ( holds(intentionToWalkIn(Agent,Room),Time)  ,          holds(actOnIntentionToWalkIn(Agent,Room),Time) ,           holds(at_loc(Agent,Location),Time) ,           equals(side1(Door),Room) ,           equals(side2(Door),Location))).
 %  cl(    happens(walkThroughDoor21(Agent,Door),Time),       ( holds(intentionToWalkIn(Agent,Room),Time)  ,          holds(actOnIntentionToWalkIn(Agent,Room),Time) ,           holds(at_loc(Agent,Location),Time) ,           equals(side1(Door),Room) ,           equals(side2(Door),Location))).
 %  % =================================.


% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side2(door)=room &
% Side1(door)=location ->
% Happens(WalkThroughDoor12(agent,door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',1993).
%~ From E:
%~ 
%~ ( holds(intentionToWalkIn(Agent,Room),Time)  ,    holds(actOnIntentionToWalkIn(Agent,Room),Time) ,     holds(at_loc(Agent,Location),Time) ,       side2(Door) =             Room ,       side1(Door) =             Location) ->         happens(walkThroughDoor12(Agent,Door),Time)
%~ cpc :- ( holds(intentionToWalkIn(Agent,Room),Time)  ,    holds(actOnIntentionToWalkIn(Agent,Room),Time) ,     holds(at_loc(Agent,Location),Time) ,       side2(Door) =             Room ,       side1(Door) =             Location) ->         happens(walkThroughDoor12(Agent,Door),Time)
%~ ooo :- [   cl(    [   happens(walkThroughDoor12(Agent,Door),Time)],       [      holds(intentionToWalkIn(Agent,Room),Time),           holds(actOnIntentionToWalkIn(Agent,Room),Time),           holds(at_loc(Agent,Location),Time),           equals(side2(Door),Room),           equals(side1(Door),Location)])]
cl(    happens(walkThroughDoor12(Agent,Door),Time),       ( holds(intentionToWalkIn(Agent,Room),Time)  ,          holds(actOnIntentionToWalkIn(Agent,Room),Time) ,           holds(at_loc(Agent,Location),Time) ,           equals(side2(Door),Room) ,           equals(side1(Door),Location))).
 %  cl(    happens(walkThroughDoor12(Agent,Door),Time),       ( holds(intentionToWalkIn(Agent,Room),Time)  ,          holds(actOnIntentionToWalkIn(Agent,Room),Time) ,           holds(at_loc(Agent,Location),Time) ,           equals(side2(Door),Room) ,           equals(side1(Door),Location))).
 %  % =================================.


%; Two effect axioms state that
%; if side one (two) of a door is a room and
%; an agent walks through side two (one) of the door,
%; the agent will no longer have the intention to
%; walk into the room:
% [agent,room,door,time]
% Side1(door)=room ->
% Terminates(WalkThroughDoor21(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2005).
%~ From E:
%~ 
%~ side1(Door) =         Room ->         terminates_at( walkThroughDoor21(Agent,Door),   intentionToWalkIn(Agent,Room),     Time)
%~ cpc :- if(    terminates( walkThroughDoor21(Agent,Door),   at(intentionToWalkIn(Agent,Room),Time)),       side1(Door,Room))
%~ ooo :- [   cl(    [   if(    terminates( walkThroughDoor21(Agent,Door),   at(intentionToWalkIn(Agent,Room),Time)),       side1(Door,Room))],       [])]
cl(    (     (         walkThroughDoor21(Agent,Door) terminates         intentionToWalkIn(Agent,Room)at Time) if     side1(Door,Room)),       []).
 %  cl(    if(    terminates( walkThroughDoor21(Agent,Door),   at(intentionToWalkIn(Agent,Room),Time)),       side1(Door,Room)),       []).
 %  % =================================.


% [agent,room,door,time]
% Side2(door)=room ->
% Terminates(WalkThroughDoor12(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2012).
%~ From E:
%~ 
%~ side2(Door) =         Room ->         terminates_at( walkThroughDoor12(Agent,Door),   intentionToWalkIn(Agent,Room),     Time)
%~ cpc :- if(    terminates( walkThroughDoor12(Agent,Door),   at(intentionToWalkIn(Agent,Room),Time)),       side2(Door,Room))
%~ ooo :- [   cl(    [   if(    terminates( walkThroughDoor12(Agent,Door),   at(intentionToWalkIn(Agent,Room),Time)),       side2(Door,Room))],       [])]
cl(    (     (         walkThroughDoor12(Agent,Door) terminates         intentionToWalkIn(Agent,Room)at Time) if     side2(Door,Room)),       []).
 %  cl(    if(    terminates( walkThroughDoor12(Agent,Door),   at(intentionToWalkIn(Agent,Room),Time)),       side2(Door,Room)),       []).
 %  % =================================.


%; agent greets object.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2018).
% event Greet(agent,object)
%~ From E:
%~ 
%~ event( greet(agent,object))
%~ cpc :- events([greet/2])
%~ ooo :- [   cl([events([greet/2])],[])]
%~ cpc :- actions([greet/2])
%~ ooo :- [   cl([actions([greet/2])],[])]
%~ cpc :- mpred_prop(greet(agent,object),action)
%~ ooo :- [   cl([mpred_prop(greet(agent,object),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2018).
( cl(events(greet/2),[])  ,    cl(mpred_prop(greet(agent,object),action),[]) ,     cl(actions(greet/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2020).
% event SayPleasedToMeet(agent,agent)
%~ From E:
%~ 
%~ event( sayPleasedToMeet(agent,agent))
%~ cpc :- events([sayPleasedToMeet/2])
%~ ooo :- [   cl([events([sayPleasedToMeet/2])],[])]
%~ cpc :- actions([sayPleasedToMeet/2])
%~ ooo :- [   cl([actions([sayPleasedToMeet/2])],[])]
%~ cpc :- mpred_prop(sayPleasedToMeet(agent,agent),action)
%~ ooo :- [   cl([mpred_prop(sayPleasedToMeet(agent,agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2020).
( cl(events(sayPleasedToMeet/2),[])  ,    cl(mpred_prop(sayPleasedToMeet(agent,agent),action),[]) ,     cl(actions(sayPleasedToMeet/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2022).
%; agent says goodbye to object.

% event SayGoodbye(agent,object)
%~ From E:
%~ 
%~ event( sayGoodbye(agent,object))
%~ cpc :- events([sayGoodbye/2])
%~ ooo :- [   cl([events([sayGoodbye/2])],[])]
%~ cpc :- actions([sayGoodbye/2])
%~ ooo :- [   cl([actions([sayGoodbye/2])],[])]
%~ cpc :- mpred_prop(sayGoodbye(agent,object),action)
%~ ooo :- [   cl([mpred_prop(sayGoodbye(agent,object),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2022).
( cl(events(sayGoodbye/2),[])  ,    cl(mpred_prop(sayGoodbye(agent,object),action),[]) ,     cl(actions(sayGoodbye/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2025).
% event TalkAbout(agent,content)
%~ From E:
%~ 
%~ event( talkAbout(agent,content))
%~ cpc :- events([talkAbout/2])
%~ ooo :- [   cl([events([talkAbout/2])],[])]
%~ cpc :- actions([talkAbout/2])
%~ ooo :- [   cl([actions([talkAbout/2])],[])]
%~ cpc :- mpred_prop(talkAbout(agent,content),action)
%~ ooo :- [   cl([mpred_prop(talkAbout(agent,content),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2025).
( cl(events(talkAbout/2),[])  ,    cl(mpred_prop(talkAbout(agent,content),action),[]) ,     cl(actions(talkAbout/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2027).
% event Converse(agent,agent)
%~ From E:
%~ 
%~ event( converse(agent,agent))
%~ cpc :- events([converse/2])
%~ ooo :- [   cl([events([converse/2])],[])]
%~ cpc :- actions([converse/2])
%~ ooo :- [   cl([actions([converse/2])],[])]
%~ cpc :- mpred_prop(converse(agent,agent),action)
%~ ooo :- [   cl([mpred_prop(converse(agent,agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2027).
( cl(events(converse/2),[])  ,    cl(mpred_prop(converse(agent,agent),action),[]) ,     cl(actions(converse/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2029).
% [agent1,agent2,time]
% Happens(Converse(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2031).
%~ From E:
%~ 
%~ exists( Location,   happens(converse(Agent1,Agent2),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ cpc :- exists( Location,   happens(converse(Agent1,Agent2),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(converse(Agent1,Agent2),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(converse(Agent1,Agent2),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(converse(Agent1,Agent2),Time)))),       []).
 %  % =================================.


%; A precondition axiom states that for
%; an agent to greet an object,
%; there must be a location such that
%; the agent is at the location and
%; the object is at the location:
% [agent,object,time]
% Happens(Greet(agent,object),time) ->
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2040).
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2042).
%~ From E:
%~ 
%~ exists( Location,   happens(greet(Agent,Object),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Object,Location),Time)))
%~ cpc :- exists( Location,   happens(greet(Agent,Object),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Object,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Object,Location),Time)) ;     not( happens(greet(Agent,Object),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Object,Location),Time)) ;     not( happens(greet(Agent,Object),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Object,Location),Time)) ;     not( happens(greet(Agent,Object),Time)))),       []).
 %  % =================================.


% [agent,object,time]
% Happens(SayGoodbye(agent,object),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2047).
%~ From E:
%~ 
%~ exists( Location,   happens(sayGoodbye(Agent,Object),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Object,Location),Time)))
%~ cpc :- exists( Location,   happens(sayGoodbye(Agent,Object),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Object,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Object,Location),Time)) ;     not( happens(sayGoodbye(Agent,Object),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Object,Location),Time)) ;     not( happens(sayGoodbye(Agent,Object),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Object,Location),Time)) ;     not( happens(sayGoodbye(Agent,Object),Time)))),       []).
 %  % =================================.


%; speech: expression of emotions
%; agent cries for joy.

% event CryForJoy(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2054).
%~ From E:
%~ 
%~ event( cryForJoy(agent))
%~ cpc :- events([cryForJoy/1])
%~ ooo :- [   cl([events([cryForJoy/1])],[])]
%~ cpc :- actions([cryForJoy/1])
%~ ooo :- [   cl([actions([cryForJoy/1])],[])]
%~ cpc :- mpred_prop(cryForJoy(agent),action)
%~ ooo :- [   cl([mpred_prop(cryForJoy(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2054).
( cl(events(cryForJoy/1),[])  ,    cl(mpred_prop(cryForJoy(agent),action),[]) ,     cl(actions(cryForJoy/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2057).
%; A precondition axiom states that for
%; an agent to cry for joy,
%; the agent must be happy:
% [agent,time]
% Happens(CryForJoy(agent),time) ->
% HoldsAt(Happy(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2060).
%~ From E:
%~ 
%~ happens(cryForJoy(Agent),Time) ->         holds(happy(Agent),Time)
%~ cpc :- happens(cryForJoy(Agent),Time) ->         holds(happy(Agent),Time)
%~ ooo :- [   cl([holds(happy(Agent),Time)],[happens(cryForJoy(Agent),Time)])]
cl(holds(happy(Agent),Time),happens(cryForJoy(Agent),Time)).
 %  cl(holds(happy(Agent),Time),happens(cryForJoy(Agent),Time)).
 %  % =================================.

% event Threaten(agent,agent,weapon)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2063).
%~ From E:
%~ 
%~ event( threaten(agent,agent,weapon))
%~ cpc :- events([threaten/3])
%~ ooo :- [   cl([events([threaten/3])],[])]
%~ cpc :- actions([threaten/3])
%~ ooo :- [   cl([actions([threaten/3])],[])]
%~ cpc :- mpred_prop(threaten(agent,agent,weapon),action)
%~ ooo :- [   cl([mpred_prop(threaten(agent,agent,weapon),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2063).
( cl(events(threaten/3),[])  ,    cl(mpred_prop(threaten(agent,agent,weapon),action),[]) ,     cl(actions(threaten/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2066).
% event ReleaseFromThreat(agent,agent)
%~ From E:
%~ 
%~ event( releaseFromThreat(agent,agent))
%~ cpc :- events([releaseFromThreat/2])
%~ ooo :- [   cl([events([releaseFromThreat/2])],[])]
%~ cpc :- actions([releaseFromThreat/2])
%~ ooo :- [   cl([actions([releaseFromThreat/2])],[])]
%~ cpc :- mpred_prop(releaseFromThreat(agent,agent),action)
%~ ooo :- [   cl([mpred_prop(releaseFromThreat(agent,agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2066).
( cl(events(releaseFromThreat/2),[])  ,    cl(mpred_prop(releaseFromThreat(agent,agent),action),[]) ,     cl(actions(releaseFromThreat/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2068).
% fluent ThreatenedBy(agent,agent)
%~ From E:
%~ 
%~ fluent( threatenedBy(agent,agent))
%~ cpc :- fluents([threatenedBy/2])
%~ ooo :- [   cl([fluents([threatenedBy/2])],[])]
%~ cpc :- mpred_prop(threatenedBy(agent,agent),fluent)
%~ ooo :- [   cl([mpred_prop(threatenedBy(agent,agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2068).
cl(mpred_prop(threatenedBy(agent,agent),fluent),[]),cl(fluents(threatenedBy/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2070).
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% HoldsAt(Holding(agent1,weapon),time) &
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2073).
%~ From E:
%~ 
%~ exists( Location,   happens(threaten(Agent1,Agent2,Weapon),Time) ->         ( holds(holding(Agent1,Weapon),Time)  ,    holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ cpc :- exists( Location,   happens(threaten(Agent1,Agent2,Weapon),Time) ->         ( holds(holding(Agent1,Weapon),Time)  ,    holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( holds(holding(Agent1,Weapon),Time)  ,        holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(threaten(Agent1,Agent2,Weapon),Time))))],       [])]
cl(    exists( Location,   (     ( holds(holding(Agent1,Weapon),Time)  ,        holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(threaten(Agent1,Agent2,Weapon),Time)))),       []).
 %  cl(    exists( Location,   (     ( holds(holding(Agent1,Weapon),Time)  ,        holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(threaten(Agent1,Agent2,Weapon),Time)))),       []).
 %  % =================================.


% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% Happens(BecomeAngryAt(agent2,agent1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2078).
%~ From E:
%~ 
%~ happens(threaten(Agent1,Agent2,Weapon),Time) ->         happens(becomeAngryAt(Agent2,Agent1),Time)
%~ cpc :- happens(threaten(Agent1,Agent2,Weapon),Time) ->         happens(becomeAngryAt(Agent2,Agent1),Time)
%~ ooo :- [   cl(    [   happens(becomeAngryAt(Agent2,Agent1),Time)],       [      happens(threaten(Agent1,Agent2,Weapon),Time)])]
cl(    happens(becomeAngryAt(Agent2,Agent1),Time),       happens(threaten(Agent1,Agent2,Weapon),Time)).
 %  cl(    happens(becomeAngryAt(Agent2,Agent1),Time),       happens(threaten(Agent1,Agent2,Weapon),Time)).
 %  % =================================.


% [agent1,agent2,weapon,time]
% Initiates(Threaten(agent1,agent2,weapon),
%           ThreatenedBy(agent2,agent1),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2082).
%~ From E:
%~ 
%~ initiates_at( threaten(Agent1,Agent2,Weapon),   threatenedBy(Agent2,Agent1),     Time)
%~ cpc :- initiates( threaten(Agent1,Agent2,Weapon),   threatenedBy(Agent2,Agent1),     Time)
%~ ooo :- [   cl(    [   initiates( threaten(Agent1,Agent2,Weapon),   threatenedBy(Agent2,Agent1),     Time)],       [])]
cl(    initiates( threaten(Agent1,Agent2,Weapon),   threatenedBy(Agent2,Agent1),     Time),       []).
 %  cl(    initiates( threaten(Agent1,Agent2,Weapon),   threatenedBy(Agent2,Agent1),     Time),       []).
 %  % =================================.


% [agent1,agent2,time]
% Terminates(ReleaseFromThreat(agent1,agent2),
%            ThreatenedBy(agent2,agent1),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2087).
%~ From E:
%~ 
%~ terminates_at( releaseFromThreat(Agent1,Agent2),   threatenedBy(Agent2,Agent1),     Time)
%~ cpc :- terminates( releaseFromThreat(Agent1,Agent2),   threatenedBy(Agent2,Agent1),     Time)
%~ ooo :- [   cl(    [   terminates( releaseFromThreat(Agent1,Agent2),   threatenedBy(Agent2,Agent1),     Time)],       [])]
cl(    terminates( releaseFromThreat(Agent1,Agent2),   threatenedBy(Agent2,Agent1),     Time),       []).
 %  cl(    terminates( releaseFromThreat(Agent1,Agent2),   threatenedBy(Agent2,Agent1),     Time),       []).
 %  % =================================.

% event Order(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2090).
%~ From E:
%~ 
%~ event( order(agent,agent,physobj))
%~ cpc :- events([order/3])
%~ ooo :- [   cl([events([order/3])],[])]
%~ cpc :- actions([order/3])
%~ ooo :- [   cl([actions([order/3])],[])]
%~ cpc :- mpred_prop(order(agent,agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(order(agent,agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2090).
( cl(events(order/3),[])  ,    cl(mpred_prop(order(agent,agent,physobj),action),[]) ,     cl(actions(order/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2093).
% fluent KnowOrder(agent,agent,physobj)
%~ From E:
%~ 
%~ fluent( knowOrder(agent,agent,physobj))
%~ cpc :- fluents([knowOrder/3])
%~ ooo :- [   cl([fluents([knowOrder/3])],[])]
%~ cpc :- mpred_prop(knowOrder(agent,agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(knowOrder(agent,agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2093).
cl(mpred_prop(knowOrder(agent,agent,physobj),fluent),[]),cl(fluents(knowOrder/3),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2095).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
%~ From E:
%~ 
%~ initiates_at( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time)
%~ cpc :- initiates( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time)
%~ ooo :- [   cl(    [   initiates( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time)],       [])]
cl(    initiates( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time),       []).
 %  cl(    initiates( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time),       []).
 %  % =================================.


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2101).
%~ From E:
%~ 
%~ exists( Location,   happens(order(Agent1,Agent2,Physobj),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ cpc :- exists( Location,   happens(order(Agent1,Agent2,Physobj),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(order(Agent1,Agent2,Physobj),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(order(Agent1,Agent2,Physobj),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(order(Agent1,Agent2,Physobj),Time)))),       []).
 %  % =================================.

% event Request(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2105).
%~ From E:
%~ 
%~ event( request(agent,agent,physobj))
%~ cpc :- events([request/3])
%~ ooo :- [   cl([events([request/3])],[])]
%~ cpc :- actions([request/3])
%~ ooo :- [   cl([actions([request/3])],[])]
%~ cpc :- mpred_prop(request(agent,agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(request(agent,agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2105).
( cl(events(request/3),[])  ,    cl(mpred_prop(request(agent,agent,physobj),action),[]) ,     cl(actions(request/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2108).
% fluent KnowRequest(agent,agent,physobj)
%~ From E:
%~ 
%~ fluent( knowRequest(agent,agent,physobj))
%~ cpc :- fluents([knowRequest/3])
%~ ooo :- [   cl([fluents([knowRequest/3])],[])]
%~ cpc :- mpred_prop(knowRequest(agent,agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(knowRequest(agent,agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2108).
cl(mpred_prop(knowRequest(agent,agent,physobj),fluent),[]),cl(fluents(knowRequest/3),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2110).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
%~ From E:
%~ 
%~ initiates_at( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time)
%~ cpc :- initiates( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time)
%~ ooo :- [   cl(    [   initiates( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time)],       [])]
cl(    initiates( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time),       []).
 %  cl(    initiates( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time),       []).
 %  % =================================.


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2116).
%~ From E:
%~ 
%~ exists( Location,   happens(request(Agent1,Agent2,Physobj),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ cpc :- exists( Location,   happens(request(Agent1,Agent2,Physobj),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(request(Agent1,Agent2,Physobj),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(request(Agent1,Agent2,Physobj),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(request(Agent1,Agent2,Physobj),Time)))),       []).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Sleep.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The Sleep representation deals with the activity of sleeping and
%; body posture.
%; It is similar to the finite automaton representation of sleep
%; used in ThoughtTreasure \fullcite[chap. 7]{Mueller:1998}.
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;
%; sleep
%; agent wakes up.

% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2155).
%~ From E:
%~ 
%~ event( wakeUp(agent))
%~ cpc :- events([wakeUp/1])
%~ ooo :- [   cl([events([wakeUp/1])],[])]
%~ cpc :- actions([wakeUp/1])
%~ ooo :- [   cl([actions([wakeUp/1])],[])]
%~ cpc :- mpred_prop(wakeUp(agent),action)
%~ ooo :- [   cl([mpred_prop(wakeUp(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2155).
( cl(events(wakeUp/1),[])  ,    cl(mpred_prop(wakeUp(agent),action),[]) ,     cl(actions(wakeUp/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2158).
%; agent gets tired.

% event GetTired(agent)
%~ From E:
%~ 
%~ event( getTired(agent))
%~ cpc :- events([getTired/1])
%~ ooo :- [   cl([events([getTired/1])],[])]
%~ cpc :- actions([getTired/1])
%~ ooo :- [   cl([actions([getTired/1])],[])]
%~ cpc :- mpred_prop(getTired(agent),action)
%~ ooo :- [   cl([mpred_prop(getTired(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2158).
( cl(events(getTired/1),[])  ,    cl(mpred_prop(getTired(agent),action),[]) ,     cl(actions(getTired/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2161).
%; agent falls asleep.

% event FallAsleep(agent)
%~ From E:
%~ 
%~ event( fallAsleep(agent))
%~ cpc :- events([fallAsleep/1])
%~ ooo :- [   cl([events([fallAsleep/1])],[])]
%~ cpc :- actions([fallAsleep/1])
%~ ooo :- [   cl([actions([fallAsleep/1])],[])]
%~ cpc :- mpred_prop(fallAsleep(agent),action)
%~ ooo :- [   cl([mpred_prop(fallAsleep(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2161).
( cl(events(fallAsleep/1),[])  ,    cl(mpred_prop(fallAsleep(agent),action),[]) ,     cl(actions(fallAsleep/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2164).
%; agent is asleep.

% fluent Sleep0(agent)
%~ From E:
%~ 
%~ fluent( sleep0(agent))
%~ cpc :- fluents([sleep0/1])
%~ ooo :- [   cl([fluents([sleep0/1])],[])]
%~ cpc :- mpred_prop(sleep0(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sleep0(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2164).
cl(mpred_prop(sleep0(agent),fluent),[]),cl(fluents(sleep0/1),[]).


%; agent is awake and in bed.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2167).
% fluent Sleep1(agent)
%~ From E:
%~ 
%~ fluent( sleep1(agent))
%~ cpc :- fluents([sleep1/1])
%~ ooo :- [   cl([fluents([sleep1/1])],[])]
%~ cpc :- mpred_prop(sleep1(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sleep1(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2167).
cl(mpred_prop(sleep1(agent),fluent),[]),cl(fluents(sleep1/1),[]).


%; agent is awake, out of bed, and undressed.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2169).
% fluent Sleep2(agent)
%~ From E:
%~ 
%~ fluent( sleep2(agent))
%~ cpc :- fluents([sleep2/1])
%~ ooo :- [   cl([fluents([sleep2/1])],[])]
%~ cpc :- mpred_prop(sleep2(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sleep2(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2169).
cl(mpred_prop(sleep2(agent),fluent),[]),cl(fluents(sleep2/1),[]).


%; agent is awake and dressed.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2171).
% fluent Sleep3(agent)
%~ From E:
%~ 
%~ fluent( sleep3(agent))
%~ cpc :- fluents([sleep3/1])
%~ ooo :- [   cl([fluents([sleep3/1])],[])]
%~ cpc :- mpred_prop(sleep3(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sleep3(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2171).
cl(mpred_prop(sleep3(agent),fluent),[]),cl(fluents(sleep3/1),[]).


%; agent is tired and dressed.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2173).
% fluent Sleep4(agent)
%~ From E:
%~ 
%~ fluent( sleep4(agent))
%~ cpc :- fluents([sleep4/1])
%~ ooo :- [   cl([fluents([sleep4/1])],[])]
%~ cpc :- mpred_prop(sleep4(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sleep4(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2173).
cl(mpred_prop(sleep4(agent),fluent),[]),cl(fluents(sleep4/1),[]).


%; agent is tired and undressed.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2175).
% fluent Sleep5(agent)
%~ From E:
%~ 
%~ fluent( sleep5(agent))
%~ cpc :- fluents([sleep5/1])
%~ ooo :- [   cl([fluents([sleep5/1])],[])]
%~ cpc :- mpred_prop(sleep5(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sleep5(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2175).
cl(mpred_prop(sleep5(agent),fluent),[]),cl(fluents(sleep5/1),[]).


%; agent is in bed, waiting to fall asleep.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2177).
% fluent Sleep6(agent)
%~ From E:
%~ 
%~ fluent( sleep6(agent))
%~ cpc :- fluents([sleep6/1])
%~ ooo :- [   cl([fluents([sleep6/1])],[])]
%~ cpc :- mpred_prop(sleep6(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sleep6(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2177).
cl(mpred_prop(sleep6(agent),fluent),[]),cl(fluents(sleep6/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2179).
%; At any time, an agent is in one of seven sleep states:

% xor Sleep0, Sleep1, Sleep2, Sleep3, Sleep4, Sleep5, Sleep6
%~ From E:
%~ 
%~ xor( [   sleep0, sleep1,sleep2,sleep3,sleep4,sleep5,
%~       sleep6])
%~ cpc :- xor( [   sleep0, sleep1,sleep2,sleep3,sleep4,sleep5,
%~       sleep6])
%~ ooo :- [   cl(    [   xor( [   sleep0, sleep1,sleep2,sleep3,sleep4,sleep5,
%~       sleep6])],       [])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2179).
cl(xor((sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6)),[]).
%; constraints
%; agent is asleep.

% fluent Asleep(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2184).
%~ From E:
%~ 
%~ fluent( asleep(agent))
%~ cpc :- fluents([asleep/1])
%~ ooo :- [   cl([fluents([asleep/1])],[])]
%~ cpc :- mpred_prop(asleep(agent),fluent)
%~ ooo :- [   cl([mpred_prop(asleep(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2184).
cl(mpred_prop(asleep(agent),fluent),[]),cl(fluents(asleep/1),[]).


%; agent is awake.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2187).
% fluent Awake(agent)
%~ From E:
%~ 
%~ fluent( awake(agent))
%~ cpc :- fluents([awake/1])
%~ ooo :- [   cl([fluents([awake/1])],[])]
%~ cpc :- mpred_prop(awake(agent),fluent)
%~ ooo :- [   cl([mpred_prop(awake(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2187).
cl(mpred_prop(awake(agent),fluent),[]),cl(fluents(awake/1),[]).

% noninertial Asleep
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(asleep)))
:-( call_pel_directive( noninertial(asleep))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2189).
% noninertial Awake
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(awake)))
:-( call_pel_directive( noninertial(awake))).
%; Sleep0 indicates that the agent is asleep:
% [agent,time]
 % HoldsAt(Asleep(agent),time) <-> HoldsAt(Sleep0(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2191).
%~ From E:
%~ 
%~ <->(holds(asleep(Agent),Time),holds(sleep0(Agent),Time))
%~ cpc :- <->(holds(asleep(Agent),Time),holds(sleep0(Agent),Time))
%~ ooo :- [   cl([holds(sleep0(Agent),Time)],[holds(asleep(Agent),Time)]),     cl([holds(asleep(Agent),Time)],[holds(sleep0(Agent),Time)])]
(     cl(holds(sleep0(Agent),Time),holds(asleep(Agent),Time)) ,     cl(holds(asleep(Agent),Time),holds(sleep0(Agent),Time))).
 %  (     cl(holds(sleep0(Agent),Time),holds(asleep(Agent),Time)) ,     cl(holds(asleep(Agent),Time),holds(sleep0(Agent),Time))).
 %  % =================================.


%; In all other sleep states, the agent is awake:
% [agent,time]
% HoldsAt(Awake(agent),time) <->
% HoldsAt(Sleep1(agent),time) |
% HoldsAt(Sleep2(agent),time) |
% HoldsAt(Sleep3(agent),time) |
% HoldsAt(Sleep4(agent),time) |
% HoldsAt(Sleep5(agent),time) |
% HoldsAt(Sleep6(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
%~ From E:
%~ 
%~ (     holds(awake(Agent),Time) <->     ( holds(sleep1(Agent),Time)  ;        holds(sleep2(Agent),Time) ;         holds(sleep3(Agent),Time) ;         holds(sleep4(Agent),Time) ;         holds(sleep5(Agent),Time) ;         holds(sleep6(Agent),Time)))
%~ cpc :- (     holds(awake(Agent),Time) <->     ( holds(sleep1(Agent),Time)  ;        holds(sleep2(Agent),Time) ;         holds(sleep3(Agent),Time) ;         holds(sleep4(Agent),Time) ;         holds(sleep5(Agent),Time) ;         holds(sleep6(Agent),Time)))
%~ ooo :- [   cl(    [   holds(sleep1(Agent),Time),     holds(sleep2(Agent),Time),     holds(sleep3(Agent),Time),     holds(sleep4(Agent),Time),     holds(sleep5(Agent),Time),     holds(sleep6(Agent),Time)],       [      holds(awake(Agent),Time)]),     cl([holds(awake(Agent),Time)],[holds(sleep1(Agent),Time)]),     cl([holds(awake(Agent),Time)],[holds(sleep2(Agent),Time)]),     cl([holds(awake(Agent),Time)],[holds(sleep3(Agent),Time)]),     cl([holds(awake(Agent),Time)],[holds(sleep4(Agent),Time)]),     cl([holds(awake(Agent),Time)],[holds(sleep5(Agent),Time)]),     cl([holds(awake(Agent),Time)],[holds(sleep6(Agent),Time)])]
( cl(    ( holds(sleep1(Agent),Time)  ,    holds(sleep2(Agent),Time) ,     holds(sleep3(Agent),Time) ,     holds(sleep4(Agent),Time) ,     holds(sleep5(Agent),Time) ,     holds(sleep6(Agent),Time)),       holds(awake(Agent),Time))  ,    cl(holds(awake(Agent),Time),holds(sleep1(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep2(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep3(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep4(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep5(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep6(Agent),Time))).
 %  ( cl(    ( holds(sleep1(Agent),Time)  ,    holds(sleep2(Agent),Time) ,     holds(sleep3(Agent),Time) ,     holds(sleep4(Agent),Time) ,     holds(sleep5(Agent),Time) ,     holds(sleep6(Agent),Time)),       holds(awake(Agent),Time))  ,    cl(holds(awake(Agent),Time),holds(sleep1(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep2(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep3(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep4(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep5(Agent),Time)) ,     cl(holds(awake(Agent),Time),holds(sleep6(Agent),Time))).
 %  % =================================.


%; A number of axioms are used to specify the transitions of
%; a finite automaton.
%;--
%; Waking up causes a transition from Sleep0
%; to Sleep1:
% [agent,time]
 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2210).
% Terminates(WakeUp(agent),Sleep0(agent),time).
%~ From E:
%~ 
%~ terminates_at(wakeUp(Agent),sleep0(Agent),Time)
%~ cpc :- terminates(wakeUp(Agent),sleep0(Agent),Time)
%~ ooo :- [   cl([terminates(wakeUp(Agent),sleep0(Agent),Time)],[])]
cl(terminates(wakeUp(Agent),sleep0(Agent),Time),[]).
 %  cl(terminates(wakeUp(Agent),sleep0(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2212).
% [agent,time]
 % Initiates(WakeUp(agent),Sleep1(agent),time).
%~ From E:
%~ 
%~ initiates_at(wakeUp(Agent),sleep1(Agent),Time)
%~ cpc :- initiates(wakeUp(Agent),sleep1(Agent),Time)
%~ ooo :- [   cl([initiates(wakeUp(Agent),sleep1(Agent),Time)],[])]
cl(initiates(wakeUp(Agent),sleep1(Agent),Time),[]).
 %  cl(initiates(wakeUp(Agent),sleep1(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2214).
% [agent,time]
 % Happens(WakeUp(agent),time) -> HoldsAt(Sleep0(agent),time).
%~ From E:
%~ 
%~ happens(wakeUp(Agent),Time) ->         holds(sleep0(Agent),Time)
%~ cpc :- happens(wakeUp(Agent),Time) ->         holds(sleep0(Agent),Time)
%~ ooo :- [   cl([holds(sleep0(Agent),Time)],[happens(wakeUp(Agent),Time)])]
cl(holds(sleep0(Agent),Time),happens(wakeUp(Agent),Time)).
 %  cl(holds(sleep0(Agent),Time),happens(wakeUp(Agent),Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2216).
%;--
%; Getting out of bed causes a transition from Sleep1
%; to Sleep2:
% [agent,bed,time]
 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2220).
% Terminates(RiseFrom(agent,bed),Sleep1(agent),time).
%~ From E:
%~ 
%~ terminates_at(riseFrom(Agent,Bed),sleep1(Agent),Time)
%~ cpc :- terminates(riseFrom(Agent,Bed),sleep1(Agent),Time)
%~ ooo :- [   cl([terminates(riseFrom(Agent,Bed),sleep1(Agent),Time)],[])]
cl(terminates(riseFrom(Agent,Bed),sleep1(Agent),Time),[]).
 %  cl(terminates(riseFrom(Agent,Bed),sleep1(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2222).
% [agent,bed,time]
 % Initiates(RiseFrom(agent,bed),Sleep2(agent),time).
%~ From E:
%~ 
%~ initiates_at(riseFrom(Agent,Bed),sleep2(Agent),Time)
%~ cpc :- initiates(riseFrom(Agent,Bed),sleep2(Agent),Time)
%~ ooo :- [   cl([initiates(riseFrom(Agent,Bed),sleep2(Agent),Time)],[])]
cl(initiates(riseFrom(Agent,Bed),sleep2(Agent),Time),[]).
 %  cl(initiates(riseFrom(Agent,Bed),sleep2(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2224).
% [agent,bed,time]
% Happens(RiseFrom(agent,bed),time) -> HoldsAt(Sleep1(agent),time).
%~ From E:
%~ 
%~ happens(riseFrom(Agent,Bed),Time) ->         holds(sleep1(Agent),Time)
%~ cpc :- happens(riseFrom(Agent,Bed),Time) ->         holds(sleep1(Agent),Time)
%~ ooo :- [   cl(    [   holds(sleep1(Agent),Time)],       [      happens(riseFrom(Agent,Bed),Time)])]
cl(holds(sleep1(Agent),Time),happens(riseFrom(Agent,Bed),Time)).
 %  cl(holds(sleep1(Agent),Time),happens(riseFrom(Agent,Bed),Time)).
 %  % =================================.


%;--
%; Getting dressed causes a transition from Sleep2
%; to Sleep3, the normal state of awakeness:
% [agent,time]
 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2231).
% Terminates(GetDressed(agent),Sleep2(agent),time).
%~ From E:
%~ 
%~ terminates_at(getDressed(Agent),sleep2(Agent),Time)
%~ cpc :- terminates(getDressed(Agent),sleep2(Agent),Time)
%~ ooo :- [   cl([terminates(getDressed(Agent),sleep2(Agent),Time)],[])]
cl(terminates(getDressed(Agent),sleep2(Agent),Time),[]).
 %  cl(terminates(getDressed(Agent),sleep2(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2233).
% [agent,time]
 % Initiates(GetDressed(agent),Sleep3(agent),time).
%~ From E:
%~ 
%~ initiates_at(getDressed(Agent),sleep3(Agent),Time)
%~ cpc :- initiates(getDressed(Agent),sleep3(Agent),Time)
%~ ooo :- [   cl([initiates(getDressed(Agent),sleep3(Agent),Time)],[])]
cl(initiates(getDressed(Agent),sleep3(Agent),Time),[]).
 %  cl(initiates(getDressed(Agent),sleep3(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2235).
% [agent,time]
 % Happens(GetDressed(agent),time) -> HoldsAt(Sleep2(agent),time).
%~ From E:
%~ 
%~ happens(getDressed(Agent),Time) ->         holds(sleep2(Agent),Time)
%~ cpc :- happens(getDressed(Agent),Time) ->         holds(sleep2(Agent),Time)
%~ ooo :- [   cl(    [   holds(sleep2(Agent),Time)],       [      happens(getDressed(Agent),Time)])]
cl(holds(sleep2(Agent),Time),happens(getDressed(Agent),Time)).
 %  cl(holds(sleep2(Agent),Time),happens(getDressed(Agent),Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2237).
%;--
%; Getting tired causes a transition from Sleep3
%; to Sleep4:
% [agent,time]
 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2241).
% Terminates(GetTired(agent),Sleep3(agent),time).
%~ From E:
%~ 
%~ terminates_at(getTired(Agent),sleep3(Agent),Time)
%~ cpc :- terminates(getTired(Agent),sleep3(Agent),Time)
%~ ooo :- [   cl([terminates(getTired(Agent),sleep3(Agent),Time)],[])]
cl(terminates(getTired(Agent),sleep3(Agent),Time),[]).
 %  cl(terminates(getTired(Agent),sleep3(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2243).
% [agent,time]
 % Initiates(GetTired(agent),Sleep4(agent),time).
%~ From E:
%~ 
%~ initiates_at(getTired(Agent),sleep4(Agent),Time)
%~ cpc :- initiates(getTired(Agent),sleep4(Agent),Time)
%~ ooo :- [   cl([initiates(getTired(Agent),sleep4(Agent),Time)],[])]
cl(initiates(getTired(Agent),sleep4(Agent),Time),[]).
 %  cl(initiates(getTired(Agent),sleep4(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2245).
% [agent,time]
 % Happens(GetTired(agent),time) -> HoldsAt(Sleep3(agent),time).
%~ From E:
%~ 
%~ happens(getTired(Agent),Time) ->         holds(sleep3(Agent),Time)
%~ cpc :- happens(getTired(Agent),Time) ->         holds(sleep3(Agent),Time)
%~ ooo :- [   cl([holds(sleep3(Agent),Time)],[happens(getTired(Agent),Time)])]
cl(holds(sleep3(Agent),Time),happens(getTired(Agent),Time)).
 %  cl(holds(sleep3(Agent),Time),happens(getTired(Agent),Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2247).
%;--
%; Getting undressed causes a transition from Sleep4
%; to Sleep5:
% [agent,time]
 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2251).
% Terminates(GetUndressed(agent),Sleep4(agent),time).
%~ From E:
%~ 
%~ terminates_at(getUndressed(Agent),sleep4(Agent),Time)
%~ cpc :- terminates(getUndressed(Agent),sleep4(Agent),Time)
%~ ooo :- [   cl([terminates(getUndressed(Agent),sleep4(Agent),Time)],[])]
cl(terminates(getUndressed(Agent),sleep4(Agent),Time),[]).
 %  cl(terminates(getUndressed(Agent),sleep4(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2253).
% [agent,time]
 % Initiates(GetUndressed(agent),Sleep5(agent),time).
%~ From E:
%~ 
%~ initiates_at(getUndressed(Agent),sleep5(Agent),Time)
%~ cpc :- initiates(getUndressed(Agent),sleep5(Agent),Time)
%~ ooo :- [   cl([initiates(getUndressed(Agent),sleep5(Agent),Time)],[])]
cl(initiates(getUndressed(Agent),sleep5(Agent),Time),[]).
 %  cl(initiates(getUndressed(Agent),sleep5(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2255).
% [agent,time]
 % Happens(GetUndressed(agent),time) -> HoldsAt(Sleep4(agent),time).
%~ From E:
%~ 
%~ happens(getUndressed(Agent),Time) ->         holds(sleep4(Agent),Time)
%~ cpc :- happens(getUndressed(Agent),Time) ->         holds(sleep4(Agent),Time)
%~ ooo :- [   cl(    [   holds(sleep4(Agent),Time)],       [      happens(getUndressed(Agent),Time)])]
cl(holds(sleep4(Agent),Time),happens(getUndressed(Agent),Time)).
 %  cl(holds(sleep4(Agent),Time),happens(getUndressed(Agent),Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2257).
%;--
%; Lying on a bed causes a transition from Sleep5
%; to Sleep6:
% [agent,bed,time]
 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2261).
% Terminates(LieOn(agent,bed),Sleep5(agent),time).
%~ From E:
%~ 
%~ terminates_at(lieOn(Agent,Bed),sleep5(Agent),Time)
%~ cpc :- terminates(lieOn(Agent,Bed),sleep5(Agent),Time)
%~ ooo :- [   cl([terminates(lieOn(Agent,Bed),sleep5(Agent),Time)],[])]
cl(terminates(lieOn(Agent,Bed),sleep5(Agent),Time),[]).
 %  cl(terminates(lieOn(Agent,Bed),sleep5(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2263).
% [agent,bed,time]
 % Initiates(LieOn(agent,bed),Sleep6(agent),time).
%~ From E:
%~ 
%~ initiates_at(lieOn(Agent,Bed),sleep6(Agent),Time)
%~ cpc :- initiates(lieOn(Agent,Bed),sleep6(Agent),Time)
%~ ooo :- [   cl([initiates(lieOn(Agent,Bed),sleep6(Agent),Time)],[])]
cl(initiates(lieOn(Agent,Bed),sleep6(Agent),Time),[]).
 %  cl(initiates(lieOn(Agent,Bed),sleep6(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2265).
% [agent,bed,time]
 % Happens(LieOn(agent,bed),time) -> HoldsAt(Sleep5(agent),time).
%~ From E:
%~ 
%~ happens(lieOn(Agent,Bed),Time) ->         holds(sleep5(Agent),Time)
%~ cpc :- happens(lieOn(Agent,Bed),Time) ->         holds(sleep5(Agent),Time)
%~ ooo :- [   cl(    [   holds(sleep5(Agent),Time)],       [      happens(lieOn(Agent,Bed),Time)])]
cl(holds(sleep5(Agent),Time),happens(lieOn(Agent,Bed),Time)).
 %  cl(holds(sleep5(Agent),Time),happens(lieOn(Agent,Bed),Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2267).
%;--
%; Falling asleep causes a transition from Sleep6
%; to Sleep0:
% [agent,time]
 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2271).
% Terminates(FallAsleep(agent),Sleep6(agent),time).
%~ From E:
%~ 
%~ terminates_at(fallAsleep(Agent),sleep6(Agent),Time)
%~ cpc :- terminates(fallAsleep(Agent),sleep6(Agent),Time)
%~ ooo :- [   cl([terminates(fallAsleep(Agent),sleep6(Agent),Time)],[])]
cl(terminates(fallAsleep(Agent),sleep6(Agent),Time),[]).
 %  cl(terminates(fallAsleep(Agent),sleep6(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2273).
% [agent,time]
 % Initiates(FallAsleep(agent),Sleep0(agent),time).
%~ From E:
%~ 
%~ initiates_at(fallAsleep(Agent),sleep0(Agent),Time)
%~ cpc :- initiates(fallAsleep(Agent),sleep0(Agent),Time)
%~ ooo :- [   cl([initiates(fallAsleep(Agent),sleep0(Agent),Time)],[])]
cl(initiates(fallAsleep(Agent),sleep0(Agent),Time),[]).
 %  cl(initiates(fallAsleep(Agent),sleep0(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2275).
% [agent,time]
 % Happens(FallAsleep(agent),time) -> HoldsAt(Sleep6(agent),time).
%~ From E:
%~ 
%~ happens(fallAsleep(Agent),Time) ->         holds(sleep6(Agent),Time)
%~ cpc :- happens(fallAsleep(Agent),Time) ->         holds(sleep6(Agent),Time)
%~ ooo :- [   cl(    [   holds(sleep6(Agent),Time)],       [      happens(fallAsleep(Agent),Time)])]
cl(holds(sleep6(Agent),Time),happens(fallAsleep(Agent),Time)).
 %  cl(holds(sleep6(Agent),Time),happens(fallAsleep(Agent),Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2277).
%;--
%; agent acts on being in state Sleep5.

% fluent ActOnSleep5(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2279).
%~ From E:
%~ 
%~ fluent( actOnSleep5(agent))
%~ cpc :- fluents([actOnSleep5/1])
%~ ooo :- [   cl([fluents([actOnSleep5/1])],[])]
%~ cpc :- mpred_prop(actOnSleep5(agent),fluent)
%~ ooo :- [   cl([mpred_prop(actOnSleep5(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2279).
cl(mpred_prop(actOnSleep5(agent),fluent),[]),cl(fluents(actOnSleep5/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2281).
% noninertial ActOnSleep5
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(actOnSleep5)))
:-( call_pel_directive( noninertial(actOnSleep5))).
%; We reduce the number of models by asserting that
%; an agent only acts on being in state Sleep5 while in
%; that state:
% [agent,time]
% !HoldsAt(Sleep5(agent),time) ->
% !HoldsAt(ActOnSleep5(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2286).
%~ From E:
%~ 
%~ holds(not(sleep5(Agent)),Time) ->         holds(not(actOnSleep5(Agent)),Time)
%~ cpc :- holds(not(sleep5(Agent)),Time) ->         holds(not(actOnSleep5(Agent)),Time)
%~ ooo :- [   cl(    [   holds(sleep5(Agent),Time)],       [      holds(actOnSleep5(Agent),Time)])]
cl(holds(sleep5(Agent),Time),holds(actOnSleep5(Agent),Time)).
 %  cl(holds(sleep5(Agent),Time),holds(actOnSleep5(Agent),Time)).
 %  % =================================.


%; Undressed is like IntentionToPlay
%; ActOnSleep5 is like ActOnIntentionToPlay
%; A trigger axiom states that if an agent is in state Sleep5,
%; the agent acts on this state, the agent is in a room, and
%; a bed is at the room, the agent lies on the bed:
% [agent,room,bed,time]
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(bed,room),time) ->
% Happens(LieOn(agent,bed),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2296).
%~ From E:
%~ 
%~ ( holds(sleep5(Agent),Time)  ,    holds(actOnSleep5(Agent),Time) ,     holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Bed,Room),Time)) ->         happens(lieOn(Agent,Bed),Time)
%~ cpc :- ( holds(sleep5(Agent),Time)  ,    holds(actOnSleep5(Agent),Time) ,     holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Bed,Room),Time)) ->         happens(lieOn(Agent,Bed),Time)
%~ ooo :- [   cl(    [   happens(lieOn(Agent,Bed),Time)],       [      holds(sleep5(Agent),Time),           holds(actOnSleep5(Agent),Time),           holds(at_loc(Agent,Room),Time),           holds(at_loc(Bed,Room),Time)])]
cl(    happens(lieOn(Agent,Bed),Time),       ( holds(sleep5(Agent),Time)  ,          holds(actOnSleep5(Agent),Time) ,           holds(at_loc(Agent,Room),Time) ,           holds(at_loc(Bed,Room),Time))).
 %  cl(    happens(lieOn(Agent,Bed),Time),       ( holds(sleep5(Agent),Time)  ,          holds(actOnSleep5(Agent),Time) ,           holds(at_loc(Agent,Room),Time) ,           holds(at_loc(Bed,Room),Time))).
 %  % =================================.


%; A precondition axiom states that for
%; an agent to lie on a bed,
%; the agent must be in state Sleep5,
%; the agent must act on this state, and
%; there must be a room such that
%; the agent is in the room and the bed is in the room:
% [agent,bed,time]
% Happens(LieOn(agent,bed),time) ->
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2309).
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(bed,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2313).
%~ From E:
%~ 
%~ exists( Room,   happens(lieOn(Agent,Bed),Time) ->         ( holds(sleep5(Agent),Time)  ,    holds(actOnSleep5(Agent),Time) ,     holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Bed,Room),Time)))
%~ cpc :- exists( Room,   happens(lieOn(Agent,Bed),Time) ->         ( holds(sleep5(Agent),Time)  ,    holds(actOnSleep5(Agent),Time) ,     holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Bed,Room),Time)))
%~ ooo :- [   cl(    [   exists( Room,   (     ( holds(sleep5(Agent),Time)  ,        holds(actOnSleep5(Agent),Time) ,         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Bed,Room),Time)) ;     not( happens(lieOn(Agent,Bed),Time))))],       [])]
cl(    exists( Room,   (     ( holds(sleep5(Agent),Time)  ,        holds(actOnSleep5(Agent),Time) ,         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Bed,Room),Time)) ;     not( happens(lieOn(Agent,Bed),Time)))),       []).
 %  cl(    exists( Room,   (     ( holds(sleep5(Agent),Time)  ,        holds(actOnSleep5(Agent),Time) ,         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Bed,Room),Time)) ;     not( happens(lieOn(Agent,Bed),Time)))),       []).
 %  % =================================.


%; (body) posture
%; agent lies on physobj.

% event LieOn(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2319).
%~ From E:
%~ 
%~ event( lieOn(agent,physobj))
%~ cpc :- events([lieOn/2])
%~ ooo :- [   cl([events([lieOn/2])],[])]
%~ cpc :- actions([lieOn/2])
%~ ooo :- [   cl([actions([lieOn/2])],[])]
%~ cpc :- mpred_prop(lieOn(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(lieOn(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2319).
( cl(events(lieOn/2),[])  ,    cl(mpred_prop(lieOn(agent,physobj),action),[]) ,     cl(actions(lieOn/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2322).
%; agent sits on physobj.

% event SitOn(agent,physobj)
%~ From E:
%~ 
%~ event( sitOn(agent,physobj))
%~ cpc :- events([sitOn/2])
%~ ooo :- [   cl([events([sitOn/2])],[])]
%~ cpc :- actions([sitOn/2])
%~ ooo :- [   cl([actions([sitOn/2])],[])]
%~ cpc :- mpred_prop(sitOn(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(sitOn(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2322).
( cl(events(sitOn/2),[])  ,    cl(mpred_prop(sitOn(agent,physobj),action),[]) ,     cl(actions(sitOn/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2325).
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2327).
%~ From E:
%~ 
%~ exists( Location,   happens(sitOn(Agent,Physobj),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj,Location),Time)))
%~ cpc :- exists( Location,   happens(sitOn(Agent,Physobj),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj,Location),Time)) ;     not( happens(sitOn(Agent,Physobj),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj,Location),Time)) ;     not( happens(sitOn(Agent,Physobj),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj,Location),Time)) ;     not( happens(sitOn(Agent,Physobj),Time)))),       []).
 %  % =================================.


%; agent rises from physobj.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2332).
% event RiseFrom(agent,physobj)
%~ From E:
%~ 
%~ event( riseFrom(agent,physobj))
%~ cpc :- events([riseFrom/2])
%~ ooo :- [   cl([events([riseFrom/2])],[])]
%~ cpc :- actions([riseFrom/2])
%~ ooo :- [   cl([actions([riseFrom/2])],[])]
%~ cpc :- mpred_prop(riseFrom(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(riseFrom(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2332).
( cl(events(riseFrom/2),[])  ,    cl(mpred_prop(riseFrom(agent,physobj),action),[]) ,     cl(actions(riseFrom/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2334).
%; agent is lying on physobj.

% fluent LyingOn(agent,physobj)
%~ From E:
%~ 
%~ fluent( lyingOn(agent,physobj))
%~ cpc :- fluents([lyingOn/2])
%~ ooo :- [   cl([fluents([lyingOn/2])],[])]
%~ cpc :- mpred_prop(lyingOn(agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(lyingOn(agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2334).
cl(mpred_prop(lyingOn(agent,physobj),fluent),[]),cl(fluents(lyingOn/2),[]).


%; agent is sitting on physobj.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2337).
% fluent SittingOn(agent,physobj)
%~ From E:
%~ 
%~ fluent( sittingOn(agent,physobj))
%~ cpc :- fluents([sittingOn/2])
%~ ooo :- [   cl([fluents([sittingOn/2])],[])]
%~ cpc :- mpred_prop(sittingOn(agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(sittingOn(agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2337).
cl(mpred_prop(sittingOn(agent,physobj),fluent),[]),cl(fluents(sittingOn/2),[]).


%; agent is standing.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2339).
% fluent Standing(agent)
%~ From E:
%~ 
%~ fluent( standing(agent))
%~ cpc :- fluents([standing/1])
%~ ooo :- [   cl([fluents([standing/1])],[])]
%~ cpc :- mpred_prop(standing(agent),fluent)
%~ ooo :- [   cl([mpred_prop(standing(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2339).
cl(mpred_prop(standing(agent),fluent),[]),cl(fluents(standing/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2341).
%; agent is lying down.

% fluent Lying(agent)
%~ From E:
%~ 
%~ fluent( lying(agent))
%~ cpc :- fluents([lying/1])
%~ ooo :- [   cl([fluents([lying/1])],[])]
%~ cpc :- mpred_prop(lying(agent),fluent)
%~ ooo :- [   cl([mpred_prop(lying(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2341).
cl(mpred_prop(lying(agent),fluent),[]),cl(fluents(lying/1),[]).


%; agent is sitting.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2344).
% fluent Sitting(agent)
%~ From E:
%~ 
%~ fluent( sitting(agent))
%~ cpc :- fluents([sitting/1])
%~ ooo :- [   cl([fluents([sitting/1])],[])]
%~ cpc :- mpred_prop(sitting(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sitting(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2344).
cl(mpred_prop(sitting(agent),fluent),[]),cl(fluents(sitting/1),[]).

% noninertial Lying
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(lying)))
:-( call_pel_directive( noninertial(lying))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2346).
% noninertial Sitting
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(sitting)))
:-( call_pel_directive( noninertial(sitting))).
%; At any time, an agent is either lying, sitting, or standing:

% xor Lying, Sitting, Standing
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2348).
%~ From E:
%~ 
%~ xor( [lying,sitting,standing])
%~ cpc :- xor( [lying,sitting,standing])
%~ ooo :- [   cl([xor([lying,sitting,standing])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2348).
cl(xor((lying,sitting,standing)),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2351).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
%~ From E:
%~ 
%~ holds(lyingOn(Agent,Physobj),Time) ->         holds(lying(Agent),Time)
%~ cpc :- holds(lyingOn(Agent,Physobj),Time) ->         holds(lying(Agent),Time)
%~ ooo :- [   cl(    [   holds(lying(Agent),Time)],       [      holds(lyingOn(Agent,Physobj),Time)])]
cl(holds(lying(Agent),Time),holds(lyingOn(Agent,Physobj),Time)).
 %  cl(holds(lying(Agent),Time),holds(lyingOn(Agent,Physobj),Time)).
 %  % =================================.


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2356).
%~ From E:
%~ 
%~ holds(sittingOn(Agent,Physobj),Time) ->         holds(sitting(Agent),Time)
%~ cpc :- holds(sittingOn(Agent,Physobj),Time) ->         holds(sitting(Agent),Time)
%~ ooo :- [   cl(    [   holds(sitting(Agent),Time)],       [      holds(sittingOn(Agent,Physobj),Time)])]
cl(holds(sitting(Agent),Time),holds(sittingOn(Agent,Physobj),Time)).
 %  cl(holds(sitting(Agent),Time),holds(sittingOn(Agent,Physobj),Time)).
 %  % =================================.


%; State constraints represent that an agent can lie or sit
%; on at most one object at a time:
% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2361).
%~ From E:
%~ 
%~ (     holds(lyingOn(Agent,Physobj1),Time) ,     holds(lyingOn(Agent,Physobj2),Time)) ->         Physobj1=Physobj2
%~ cpc :- (     holds(lyingOn(Agent,Physobj1),Time) ,     holds(lyingOn(Agent,Physobj2),Time)) ->         Physobj1=Physobj2
%~ ooo :- [   cl(    [   equals(Physobj1,Physobj2)],       [      holds(lyingOn(Agent,Physobj1),Time),           holds(lyingOn(Agent,Physobj2),Time)])]
cl( equals(Physobj1,Physobj2),   (     holds(lyingOn(Agent,Physobj1),Time) ,     holds(lyingOn(Agent,Physobj2),Time))).
 %  cl( equals(Physobj1,Physobj2),   (     holds(lyingOn(Agent,Physobj1),Time) ,     holds(lyingOn(Agent,Physobj2),Time))).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2367).
%~ From E:
%~ 
%~ (     holds(sittingOn(Agent,Physobj1),Time) ,     holds(sittingOn(Agent,Physobj2),Time)) ->         Physobj1=Physobj2
%~ cpc :- (     holds(sittingOn(Agent,Physobj1),Time) ,     holds(sittingOn(Agent,Physobj2),Time)) ->         Physobj1=Physobj2
%~ ooo :- [   cl(    [   equals(Physobj1,Physobj2)],       [      holds(sittingOn(Agent,Physobj1),Time),           holds(sittingOn(Agent,Physobj2),Time)])]
cl( equals(Physobj1,Physobj2),   (     holds(sittingOn(Agent,Physobj1),Time) ,     holds(sittingOn(Agent,Physobj2),Time))).
 %  cl( equals(Physobj1,Physobj2),   (     holds(sittingOn(Agent,Physobj1),Time) ,     holds(sittingOn(Agent,Physobj2),Time))).
 %  % =================================.


%; An effect axiom states that if an agent is standing and
%; lies on a physical object, the agent will be lying on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2374).
%~ From E:
%~ 
%~ holds(standing(Agent),Time) ->         initiates_at(lieOn(Agent,Physobj),lyingOn(Agent,Physobj),Time)
%~ cpc :- holds(standing(Agent),Time)
%~ ooo :- [   cl([holds(standing(Agent),Time)],[])]
%~ cpc :- if(    initiates(lieOn(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl([holds(standing(Agent),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(lieOn(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl([holds(standing(Agent),Time)],[]))],       [])]
cl(    (     lieOn(Agent,Physobj)initiates lyingOn(Agent,Physobj)at Time if     cl(holds(standing(Agent),Time),[])),       []).
 %  cl(    if(    initiates(lieOn(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl(holds(standing(Agent),Time),[])),       []).
 %  % =================================.


%; An effect axiom states that if an agent
%; lies on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2383).
%~ From E:
%~ 
%~ terminates_at(lieOn(Agent,Physobj),standing(Agent),Time)
%~ cpc :- terminates(lieOn(Agent,Physobj),standing(Agent),Time)
%~ ooo :- [   cl([terminates(lieOn(Agent,Physobj),standing(Agent),Time)],[])]
cl(terminates(lieOn(Agent,Physobj),standing(Agent),Time),[]).
 %  cl(terminates(lieOn(Agent,Physobj),standing(Agent),Time),[]).
 %  % =================================.


%; An effect axiom states that if an agent is standing and
%; sits on a physical object, the agent will be sitting on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2391).
%~ From E:
%~ 
%~ holds(standing(Agent),Time) ->         initiates_at(sitOn(Agent,Physobj),sittingOn(Agent,Physobj),Time)
%~ cpc :- holds(standing(Agent),Time)
%~ ooo :- [   cl([holds(standing(Agent),Time)],[])]
%~ cpc :- if(    initiates(sitOn(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl([holds(standing(Agent),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(sitOn(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl([holds(standing(Agent),Time)],[]))],       [])]
cl(    (     sitOn(Agent,Physobj)initiates sittingOn(Agent,Physobj)at Time if     cl(holds(standing(Agent),Time),[])),       []).
 %  cl(    if(    initiates(sitOn(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl(holds(standing(Agent),Time),[])),       []).
 %  % =================================.


%; An effect axiom states that if an agent
%; sits on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2400).
%~ From E:
%~ 
%~ terminates_at(sitOn(Agent,Physobj),standing(Agent),Time)
%~ cpc :- terminates(sitOn(Agent,Physobj),standing(Agent),Time)
%~ ooo :- [   cl([terminates(sitOn(Agent,Physobj),standing(Agent),Time)],[])]
cl(terminates(sitOn(Agent,Physobj),standing(Agent),Time),[]).
 %  cl(terminates(sitOn(Agent,Physobj),standing(Agent),Time),[]).
 %  % =================================.


%; An effect axiom states that if an agent
%; is sitting or lying on a physical object and
%; the agent rises from the physical object,
%; the agent will be standing:
% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2409).
%~ From E:
%~ 
%~ (     holds(sittingOn(Agent,Physobj),Time) ;     holds(lyingOn(Agent,Physobj),Time)) ->         initiates_at(riseFrom(Agent,Physobj),standing(Agent),Time)
%~ cpc :- holds(lyingOn(Agent,Physobj),Time)
%~ ooo :- [   cl([holds(lyingOn(Agent,Physobj),Time)],[])]
%~ cpc :- not( holds(sittingOn(Agent,Physobj),Time))
%~ ooo :- [   cl([],[holds(sittingOn(Agent,Physobj),Time)])]
%~ cpc :- (     holds(sittingOn(Agent,Physobj),Time) ;     holds(lyingOn(Agent,Physobj),Time))
%~ ooo :- [   cl(    [   holds(sittingOn(Agent,Physobj),Time),     holds(lyingOn(Agent,Physobj),Time)],       [])]
%~ cpc :- if(    initiates(riseFrom(Agent,Physobj),at(standing(Agent),Time)),       cl(       [   holds(sittingOn(Agent,Physobj),Time),     holds(lyingOn(Agent,Physobj),Time)],             []))
%~ ooo :- [   cl(    [   if(    initiates(riseFrom(Agent,Physobj),at(standing(Agent),Time)),       cl(       [   holds(sittingOn(Agent,Physobj),Time),     holds(lyingOn(Agent,Physobj),Time)],             []))],       [])]
cl(    (     riseFrom(Agent,Physobj)initiates standing(Agent)at Time if     cl(      (     holds(sittingOn(Agent,Physobj),Time) ,     holds(lyingOn(Agent,Physobj),Time)),           [])),       []).
 %  cl(    if(    initiates(riseFrom(Agent,Physobj),at(standing(Agent),Time)),       cl(       (     holds(sittingOn(Agent,Physobj),Time) ,     holds(lyingOn(Agent,Physobj),Time)),             [])),       []).
 %  % =================================.


%; An effect axiom states that if an agent is sitting on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be sitting on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2420).
%~ From E:
%~ 
%~ holds(sittingOn(Agent,Physobj),Time) ->         terminates_at(riseFrom(Agent,Physobj),sittingOn(Agent,Physobj),Time)
%~ cpc :- holds(sittingOn(Agent,Physobj),Time)
%~ ooo :- [   cl([holds(sittingOn(Agent,Physobj),Time)],[])]
%~ cpc :- if(    terminates(riseFrom(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl([holds(sittingOn(Agent,Physobj),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(riseFrom(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl([holds(sittingOn(Agent,Physobj),Time)],[]))],       [])]
cl(    (     (         riseFrom(Agent,Physobj) terminates         sittingOn(Agent,Physobj)at Time) if     cl(holds(sittingOn(Agent,Physobj),Time),[])),       []).
 %  cl(    if(    terminates(riseFrom(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl(holds(sittingOn(Agent,Physobj),Time),[])),       []).
 %  % =================================.


%; An effect axiom states that if an agent is lying on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be lying on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2430).
%~ From E:
%~ 
%~ holds(lyingOn(Agent,Physobj),Time) ->         terminates_at(riseFrom(Agent,Physobj),lyingOn(Agent,Physobj),Time)
%~ cpc :- holds(lyingOn(Agent,Physobj),Time)
%~ ooo :- [   cl([holds(lyingOn(Agent,Physobj),Time)],[])]
%~ cpc :- if(    terminates(riseFrom(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl([holds(lyingOn(Agent,Physobj),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(riseFrom(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl([holds(lyingOn(Agent,Physobj),Time)],[]))],       [])]
cl(    (     riseFrom(Agent,Physobj)terminates lyingOn(Agent,Physobj)at Time if     cl(holds(lyingOn(Agent,Physobj),Time),[])),       []).
 %  cl(    if(    terminates(riseFrom(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl(holds(lyingOn(Agent,Physobj),Time),[])),       []).
 %  % =================================.


%; dressing
%; agent gets undressed.

% event GetDressed(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2438).
%~ From E:
%~ 
%~ event( getDressed(agent))
%~ cpc :- events([getDressed/1])
%~ ooo :- [   cl([events([getDressed/1])],[])]
%~ cpc :- actions([getDressed/1])
%~ ooo :- [   cl([actions([getDressed/1])],[])]
%~ cpc :- mpred_prop(getDressed(agent),action)
%~ ooo :- [   cl([mpred_prop(getDressed(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2438).
( cl(events(getDressed/1),[])  ,    cl(mpred_prop(getDressed(agent),action),[]) ,     cl(actions(getDressed/1),[])).


%; agent gets dressed.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2441).
% event GetUndressed(agent)
%~ From E:
%~ 
%~ event( getUndressed(agent))
%~ cpc :- events([getUndressed/1])
%~ ooo :- [   cl([events([getUndressed/1])],[])]
%~ cpc :- actions([getUndressed/1])
%~ ooo :- [   cl([actions([getUndressed/1])],[])]
%~ cpc :- mpred_prop(getUndressed(agent),action)
%~ ooo :- [   cl([mpred_prop(getUndressed(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2441).
( cl(events(getUndressed/1),[])  ,    cl(mpred_prop(getUndressed(agent),action),[]) ,     cl(actions(getUndressed/1),[])).


%; agent is dressed.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2443).
% fluent Dressed(agent)
%~ From E:
%~ 
%~ fluent( dressed(agent))
%~ cpc :- fluents([dressed/1])
%~ ooo :- [   cl([fluents([dressed/1])],[])]
%~ cpc :- mpred_prop(dressed(agent),fluent)
%~ ooo :- [   cl([mpred_prop(dressed(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2443).
cl(mpred_prop(dressed(agent),fluent),[]),cl(fluents(dressed/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2445).
%; Effect axioms deal with getting dressed and undressed:
% [agent,time]
 % Initiates(GetDressed(agent),Dressed(agent),time).
%~ From E:
%~ 
%~ initiates_at(getDressed(Agent),dressed(Agent),Time)
%~ cpc :- initiates(getDressed(Agent),dressed(Agent),Time)
%~ ooo :- [   cl([initiates(getDressed(Agent),dressed(Agent),Time)],[])]
cl(initiates(getDressed(Agent),dressed(Agent),Time),[]).
 %  cl(initiates(getDressed(Agent),dressed(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2447).
% [agent,time]
 % Terminates(GetUndressed(agent),Dressed(agent),time).
%~ From E:
%~ 
%~ terminates_at(getUndressed(Agent),dressed(Agent),Time)
%~ cpc :- terminates(getUndressed(Agent),dressed(Agent),Time)
%~ ooo :- [   cl([terminates(getUndressed(Agent),dressed(Agent),Time)],[])]
cl(terminates(getUndressed(Agent),dressed(Agent),Time),[]).
 %  cl(terminates(getUndressed(Agent),dressed(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2449).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Sleeping.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2478).
% option modeldiff on
%~ From E:
%~ 
%~ :-( call_pel_directive( option(modeldiff,on)))
:-( call_pel_directive( option(modeldiff,on))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2480).
% ignore Love, ThreatenedBy
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(love)))
:-( call_pel_directive( ignore(love))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2480).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(threatenedBy)))
:-( call_pel_directive( ignore(threatenedBy))).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2480).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(lookOutOnto)))
:-( call_pel_directive( ignore(lookOutOnto))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(floor)))
:-( call_pel_directive( ignore(floor))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2480).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(buildingOf)))
:-( call_pel_directive( ignore(buildingOf))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(skyOf)))
:-( call_pel_directive( ignore(skyOf))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2480).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(groundOf)))
:-( call_pel_directive( ignore(groundOf))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2482).
% ignore Inside, Near
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(inside)))
:-( call_pel_directive( ignore(inside))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2482).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(near)))
:-( call_pel_directive( ignore(near))).

% ignore See
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2482).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(see)))
:-( call_pel_directive( ignore(see))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2485).
% ignore ActOnSleep5
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(actOnSleep5)))
:-( call_pel_directive( ignore(actOnSleep5))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2487).
% option renaming off
%~ From E:
%~ 
%~ :-( call_pel_directive( option(renaming,off)))
:-( call_pel_directive( option(renaming,off))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2489).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2489).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2491).
% load answers/Mueller2003/Ontology.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2003/Ontology.e')))
:-( call_pel_directive( load('answers/Mueller2003/Ontology.e'))).

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2491).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2004c/RTSpaceM.e')))
:-( call_pel_directive( load('answers/Mueller2004c/RTSpaceM.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2493).
% load answers/Mueller2004c/OTSpaceM.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2004c/OTSpaceM.e')))
:-( call_pel_directive( load('answers/Mueller2004c/OTSpaceM.e'))).

% load answers/Mueller2004c/Cognition.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2493).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2004c/Cognition.e')))
:-( call_pel_directive( load('answers/Mueller2004c/Cognition.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2495).
% load answers/Mueller2003/Sleep.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2003/Sleep.e')))
:-( call_pel_directive( load('answers/Mueller2003/Sleep.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2497).
% door Door1
%~ From E:
%~ 
%~ t(door,door1)
isa(door1,door).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2499).
% room Room0
%~ From E:
%~ 
%~ t(room,room0)
isa(room0,room).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2501).
% room Room1
%~ From E:
%~ 
%~ t(room,room1)
isa(room1,room).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2503).
% Side1(Door1)=Room0.
%~ From E:
%~ 
%~ side1(door1) =         room0
side1(door1,room0).


% Side2(Door1)=Room1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2503).
%~ From E:
%~ 
%~ side2(door1) =         room1
side2(door1,room1).

% agent Sleeper1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2505).
%~ From E:
%~ 
%~ t(agent,sleeper1)
isa(sleeper1,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2508).
% bed Bed1
%~ From E:
%~ 
%~ t(bed,bed1)
isa(bed1,bed).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2510).
% outside Outside1
%~ From E:
%~ 
%~ t(outside,outside1)
isa(outside1,outside).
%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2512).
%~ From E:
%~ 
%~ holds(not(holding(Agent,Object)),0)
%~ cpc :- holds(not(holding(Agent,Object)),0)
%~ ooo :- [   cl([],[holds(holding(Agent,Object),0)])]
cl([],holds(holding(Agent,Object),0)).
 %  cl([],holds(holding(Agent,Object),0)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2514).
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
%~ From E:
%~ 
%~ holds(not(sittingOn(Agent,Physobj)),0)
%~ cpc :- holds(not(sittingOn(Agent,Physobj)),0)
%~ ooo :- [   cl([],[holds(sittingOn(Agent,Physobj),0)])]
cl([],holds(sittingOn(Agent,Physobj),0)).
 %  cl([],holds(sittingOn(Agent,Physobj),0)).
 %  % =================================.


% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2514).
%~ From E:
%~ 
%~ holds(not(lyingOn(Agent,Physobj)),0)
%~ cpc :- holds(not(lyingOn(Agent,Physobj)),0)
%~ ooo :- [   cl([],[holds(lyingOn(Agent,Physobj),0)])]
cl([],holds(lyingOn(Agent,Physobj),0)).
 %  cl([],holds(lyingOn(Agent,Physobj),0)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2516).
% HoldsAt(Dressed(Sleeper1),0).
%~ From E:
%~ 
%~ holds(dressed(sleeper1),0)
initially( dressed(sleeper1)).
 %  initial_state([dressed(sleeper1)]).
 %  % =================================.


% HoldsAt(Awake(Sleeper1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2516).
%~ From E:
%~ 
%~ holds(awake(sleeper1),0)
initially( awake(sleeper1)).
 %  initial_state([awake(sleeper1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2518).
% HoldsAt(Sleep3(Sleeper1),0).
%~ From E:
%~ 
%~ holds(sleep3(sleeper1),0)
initially( sleep3(sleeper1)).
 %  initial_state([sleep3(sleeper1)]).
 %  % =================================.


% HoldsAt(Standing(Sleeper1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2518).
%~ From E:
%~ 
%~ holds(standing(sleeper1),0)
initially( standing(sleeper1)).
 %  initial_state([standing(sleeper1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2520).
% HoldsAt(DoorUnlocked(Door1),0).
%~ From E:
%~ 
%~ holds(doorUnlocked(door1),0)
initially( doorUnlocked(door1)).
 %  initial_state([doorUnlocked(door1)]).
 %  % =================================.


% HoldsAt(DoorIsOpen(Door1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2520).
%~ From E:
%~ 
%~ holds(doorIsOpen(door1),0)
initially( doorIsOpen(door1)).
 %  initial_state([doorIsOpen(door1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2522).
% HoldsAt(At(Sleeper1,Room0),0).
%~ From E:
%~ 
%~ holds(at_loc(sleeper1,room0),0)
initially( at_loc(sleeper1,room0)).
 %  initial_state([at_loc(sleeper1,room0)]).
 %  % =================================.


% HoldsAt(At(Bed1,Room1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2522).
%~ From E:
%~ 
%~ holds(at_loc(bed1,room1),0)
initially( at_loc(bed1,room1)).
 %  initial_state([at_loc(bed1,room1)]).
 %  % =================================.


%; narrative


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2526).
% Happens(GetTired(Sleeper1),0).
%~ From E:
%~ 
%~ happens(getTired(sleeper1),0)
observe( getTired(sleeper1)at 0).
 %  observe([getTired(sleeper1)],0).
 %  % =================================.


% Happens(WalkThroughDoor12(Sleeper1,Door1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2526).
%~ From E:
%~ 
%~ happens(walkThroughDoor12(sleeper1,door1),1)
observe( walkThroughDoor12(sleeper1,door1)at 1).
 %  observe([walkThroughDoor12(sleeper1,door1)],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2528).
% Happens(GetUndressed(Sleeper1),2).
%~ From E:
%~ 
%~ happens(getUndressed(sleeper1),2)
observe( getUndressed(sleeper1)at 2).
 %  observe([getUndressed(sleeper1)],2).
 %  % =================================.


% Happens(LieOn(Sleeper1,Bed1),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2528).
%~ From E:
%~ 
%~ happens(lieOn(sleeper1,bed1),3)
observe( lieOn(sleeper1,bed1)at 3).
 %  observe([lieOn(sleeper1,bed1)],3).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2530).
% Happens(FallAsleep(Sleeper1),4).
%~ From E:
%~ 
%~ happens(fallAsleep(sleeper1),4)
observe( fallAsleep(sleeper1)at 4).
 %  observe([fallAsleep(sleeper1)],4).
 %  % =================================.


% Happens(Dream(Sleeper1),5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2530).
%~ From E:
%~ 
%~ happens(dream(sleeper1),5)
observe( dream(sleeper1)at 5).
 %  observe([dream(sleeper1)],5).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2532).
% Happens(WakeUp(Sleeper1),6).
%~ From E:
%~ 
%~ happens(wakeUp(sleeper1),6)
observe( wakeUp(sleeper1)at 6).
 %  observe([wakeUp(sleeper1)],6).
 %  % =================================.


% Happens(RiseFrom(Sleeper1,Bed1),7).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2532).
%~ From E:
%~ 
%~ happens(riseFrom(sleeper1,bed1),7)
observe( riseFrom(sleeper1,bed1)at 7).
 %  observe([riseFrom(sleeper1,bed1)],7).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2534).
% Happens(GetDressed(Sleeper1),8).
%~ From E:
%~ 
%~ happens(getDressed(sleeper1),8)
observe( getDressed(sleeper1)at 8).
 %  observe([getDressed(sleeper1)],8).
 %  % =================================.


% Happens(WalkThroughDoor21(Sleeper1,Door1),9).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2534).
%~ From E:
%~ 
%~ happens(walkThroughDoor21(sleeper1,door1),9)
observe( walkThroughDoor21(sleeper1,door1)at 9).
 %  observe([walkThroughDoor21(sleeper1,door1)],9).
 %  % =================================.

% range time 0 10
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2536).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,10)))
:-( call_pel_directive( range(time,0,10))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2538).
% range offset 0 0
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,0,0)))
:-( call_pel_directive( range(offset,0,0))).

% range diameter 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2538).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(diameter,0,0)))
:-( call_pel_directive( range(diameter,0,0))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2541).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Rest.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2569).
% option renaming off
%~ From E:
%~ 
%~ :-( call_pel_directive( option(renaming,off)))
:-( call_pel_directive( option(renaming,off))).

% option encoding 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2569).
%~ From E:
%~ 
%~ :-( call_pel_directive( option(encoding,3)))
:-( call_pel_directive( option(encoding,3))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2572).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2572).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2574).
% load answers/Mueller2003/Ontology.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2003/Ontology.e')))
:-( call_pel_directive( load('answers/Mueller2003/Ontology.e'))).

% load answers/MuellerInPress/RepRest.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2574).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/MuellerInPress/RepRest.e')))
:-( call_pel_directive( load('answers/MuellerInPress/RepRest.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2577).
% door MainEntrance1
%~ From E:
%~ 
%~ t(door,mainEntrance1)
isa(mainEntrance1,door).
%; room-scale topological space

% outside Street1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2579).
%~ From E:
%~ 
%~ t(outside,street1)
isa(street1,outside).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2581).
% room DiningRoom1
%~ From E:
%~ 
%~ t(room,diningRoom1)
isa(diningRoom1,room).

% door KitchenDoor1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2581).
%~ From E:
%~ 
%~ t(door,kitchenDoor1)
isa(kitchenDoor1,door).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2583).
% room Kitchen1
%~ From E:
%~ 
%~ t(room,kitchen1)
isa(kitchen1,room).


% Side1(MainEntrance1)=Street1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2583).
%~ From E:
%~ 
%~ side1(mainEntrance1) =         street1
side1(mainEntrance1,street1).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2585).
% Side2(MainEntrance1)=DiningRoom1.
%~ From E:
%~ 
%~ side2(mainEntrance1) =         diningRoom1
side2(mainEntrance1,diningRoom1).


% Side1(KitchenDoor1)=DiningRoom1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2585).
%~ From E:
%~ 
%~ side1(kitchenDoor1) =         diningRoom1
side1(kitchenDoor1,diningRoom1).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2587).
% Side2(KitchenDoor1)=Kitchen1.
%~ From E:
%~ 
%~ side2(kitchenDoor1) =         kitchen1
side2(kitchenDoor1,kitchen1).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2589).
% agent Customer1
%~ From E:
%~ 
%~ t(agent,customer1)
isa(customer1,agent).

% menu Menu1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2589).
%~ From E:
%~ 
%~ t(menu,menu1)
isa(menu1,menu).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2591).
% chair Chair1
%~ From E:
%~ 
%~ t(chair,chair1)
isa(chair1,chair).

% food Food1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2591).
%~ From E:
%~ 
%~ t(food,food1)
isa(food1,food).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2593).
% HoldsAt(At(Customer1,Street1),0).
%~ From E:
%~ 
%~ holds(at_loc(customer1,street1),0)
initially( at_loc(customer1,street1)).
 %  initial_state([at_loc(customer1,street1)]).
 %  % =================================.


% HoldsAt(Hungry(Customer1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2593).
%~ From E:
%~ 
%~ holds(hungry(customer1),0)
initially( hungry(customer1)).
 %  initial_state([hungry(customer1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2595).
% HoldsAt(At(Chair1,DiningRoom1),0).
%~ From E:
%~ 
%~ holds(at_loc(chair1,diningRoom1),0)
initially( at_loc(chair1,diningRoom1)).
 %  initial_state([at_loc(chair1,diningRoom1)]).
 %  % =================================.


% HoldsAt(At(Menu1,DiningRoom1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2595).
%~ From E:
%~ 
%~ holds(at_loc(menu1,diningRoom1),0)
initially( at_loc(menu1,diningRoom1)).
 %  initial_state([at_loc(menu1,diningRoom1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2597).
% HoldsAt(On(Menu1,Table1),0).
%~ From E:
%~ 
%~ holds(on(menu1,table1),0)
initially( on(menu1,table1)).
 %  initial_state([on(menu1,table1)]).
 %  % =================================.


% HoldsAt(At(Food1,Kitchen1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2597).
%~ From E:
%~ 
%~ holds(at_loc(food1,kitchen1),0)
initially( at_loc(food1,kitchen1)).
 %  initial_state([at_loc(food1,kitchen1)]).
 %  % =================================.

% waiter Waiter1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2599).
%~ From E:
%~ 
%~ t(waiter,waiter1)
isa(waiter1,waiter).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2601).
% cook Cook1
%~ From E:
%~ 
%~ t(cook,cook1)
isa(cook1,cook).
%; props

% table Table1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2603).
%~ From E:
%~ 
%~ t(table,table1)
isa(table1,table).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2605).
% bill Bill1
%~ From E:
%~ 
%~ t(bill,bill1)
isa(bill1,bill).
%; restaurant

% restaurant Restaurant1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2607).
%~ From E:
%~ 
%~ t(restaurant,restaurant1)
isa(restaurant1,restaurant).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2609).
% CookOf(Restaurant1)=Cook1.
%~ From E:
%~ 
%~ cookOf(restaurant1) =         cook1
cookOf(restaurant1,cook1).


% TableOf(Restaurant1)=Table1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2609).
%~ From E:
%~ 
%~ tableOf(restaurant1) =         table1
tableOf(restaurant1,table1).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2611).
% WaiterOf(Restaurant1)=Waiter1.
%~ From E:
%~ 
%~ waiterOf(restaurant1) =         waiter1
waiterOf(restaurant1,waiter1).


% KitchenDoorOf(Restaurant1)=KitchenDoor1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2611).
%~ From E:
%~ 
%~ kitchenDoorOf(restaurant1) =         kitchenDoor1
kitchenDoorOf(restaurant1,kitchenDoor1).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2613).
% BillOf(Restaurant1)=Bill1.
%~ From E:
%~ 
%~ billOf(restaurant1) =         bill1
billOf(restaurant1,bill1).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2615).
%; prune

% sort ona, onb
%~ From E:
%~ 
%~ sort(ona)
sort(ona).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2615).
%~ From E:
%~ 
%~ sort(onb)
sort(onb).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2617).
% fluent! On(ona,onb)
%~ From E:
%~ 
%~ fluent( on(ona,onb))
%~ cpc :- fluents([on/2])
%~ ooo :- [   cl([fluents([on/2])],[])]
%~ cpc :- mpred_prop(on(ona,onb),fluent)
%~ ooo :- [   cl([mpred_prop(on(ona,onb),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2617).
cl(mpred_prop(on(ona,onb),fluent),[]),cl(fluents(on/2),[]).

% event! PlaceOn(agent,ona,onb)
%~ From E:
%~ 
%~ event( placeOn(agent,ona,onb))
%~ cpc :- events([placeOn/3])
%~ ooo :- [   cl([events([placeOn/3])],[])]
%~ cpc :- actions([placeOn/3])
%~ ooo :- [   cl([actions([placeOn/3])],[])]
%~ cpc :- mpred_prop(placeOn(agent,ona,onb),action)
%~ ooo :- [   cl([mpred_prop(placeOn(agent,ona,onb),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2617).
( cl(events(placeOn/3),[])  ,    cl(mpred_prop(placeOn(agent,ona,onb),action),[]) ,     cl(actions(placeOn/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2619).
% event! TakeOffOf(agent,ona,onb)
%~ From E:
%~ 
%~ event( takeOffOf(agent,ona,onb))
%~ cpc :- events([takeOffOf/3])
%~ ooo :- [   cl([events([takeOffOf/3])],[])]
%~ cpc :- actions([takeOffOf/3])
%~ ooo :- [   cl([actions([takeOffOf/3])],[])]
%~ cpc :- mpred_prop(takeOffOf(agent,ona,onb),action)
%~ ooo :- [   cl([mpred_prop(takeOffOf(agent,ona,onb),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2619).
( cl(events(takeOffOf/3),[])  ,    cl(mpred_prop(takeOffOf(agent,ona,onb),action),[]) ,     cl(actions(takeOffOf/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2621).
% sort ordera, orderb, orderc
%~ From E:
%~ 
%~ sort(ordera)
sort(ordera).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2621).
%~ From E:
%~ 
%~ sort(orderb)
sort(orderb).
%~ From E:
%~ 
%~ sort(orderc)
sort(orderc).

% event! Order(ordera,orderb,orderc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2621).
%~ From E:
%~ 
%~ event( order(ordera,orderb,orderc))
%~ cpc :- events([order/3])
%~ ooo :- [   cl([events([order/3])],[])]
%~ cpc :- mpred_prop(order(ordera,orderb,orderc),event)
%~ ooo :- [   cl([mpred_prop(order(ordera,orderb,orderc),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2621).
cl(mpred_prop(order(ordera,orderb,orderc),event),[]),cl(events(order/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2623).
% fluent! KnowOrder(orderb,ordera,orderc)
%~ From E:
%~ 
%~ fluent( knowOrder(orderb,ordera,orderc))
%~ cpc :- fluents([knowOrder/3])
%~ ooo :- [   cl([fluents([knowOrder/3])],[])]
%~ cpc :- mpred_prop(knowOrder(orderb,ordera,orderc),fluent)
%~ ooo :- [   cl([mpred_prop(knowOrder(orderb,ordera,orderc),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2623).
cl(mpred_prop(knowOrder(orderb,ordera,orderc),fluent),[]),cl(fluents(knowOrder/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2625).
% sort requesta, requestb, requestc
%~ From E:
%~ 
%~ sort(requesta)
sort(requesta).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2625).
%~ From E:
%~ 
%~ sort(requestb)
sort(requestb).
%~ From E:
%~ 
%~ sort(requestc)
sort(requestc).

% event! Request(requesta,requestb,requestc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2625).
%~ From E:
%~ 
%~ event( request(requesta,requestb,requestc))
%~ cpc :- events([request/3])
%~ ooo :- [   cl([events([request/3])],[])]
%~ cpc :- mpred_prop(request(requesta,requestb,requestc),event)
%~ ooo :- [   cl([mpred_prop(request(requesta,requestb,requestc),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2625).
cl(mpred_prop(request(requesta,requestb,requestc),event),[]),cl(events(request/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2627).
% fluent! KnowRequest(requestb,requesta,requestc)
%~ From E:
%~ 
%~ fluent( knowRequest(requestb,requesta,requestc))
%~ cpc :- fluents([knowRequest/3])
%~ ooo :- [   cl([fluents([knowRequest/3])],[])]
%~ cpc :- mpred_prop(knowRequest(requestb,requesta,requestc),fluent)
%~ ooo :- [   cl([mpred_prop(knowRequest(requestb,requesta,requestc),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2627).
cl(mpred_prop(knowRequest(requestb,requesta,requestc),fluent),[]),cl(fluents(knowRequest/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2629).
% sort holda, holdb, holdc
%~ From E:
%~ 
%~ sort(holda)
sort(holda).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2629).
%~ From E:
%~ 
%~ sort(holdb)
sort(holdb).
%~ From E:
%~ 
%~ sort(holdc)
sort(holdc).

% event! TakeOffOf(holda,holdb,holdc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2629).
%~ From E:
%~ 
%~ event( takeOffOf(holda,holdb,holdc))
%~ cpc :- events([takeOffOf/3])
%~ ooo :- [   cl([events([takeOffOf/3])],[])]
%~ cpc :- mpred_prop(takeOffOf(holda,holdb,holdc),event)
%~ ooo :- [   cl([mpred_prop(takeOffOf(holda,holdb,holdc),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2629).
cl(mpred_prop(takeOffOf(holda,holdb,holdc),event),[]),cl(events(takeOffOf/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2631).
% event! PickUp(holda,holdb)
%~ From E:
%~ 
%~ event( pickUp(holda,holdb))
%~ cpc :- events([pickUp/2])
%~ ooo :- [   cl([events([pickUp/2])],[])]
%~ cpc :- mpred_prop(pickUp(holda,holdb),event)
%~ ooo :- [   cl([mpred_prop(pickUp(holda,holdb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2631).
cl(mpred_prop(pickUp(holda,holdb),event),[]),cl(events(pickUp/2),[]).

% event! LetGoOf(holda,holdb)
%~ From E:
%~ 
%~ event( letGoOf(holda,holdb))
%~ cpc :- events([letGoOf/2])
%~ ooo :- [   cl([events([letGoOf/2])],[])]
%~ cpc :- mpred_prop(letGoOf(holda,holdb),event)
%~ ooo :- [   cl([mpred_prop(letGoOf(holda,holdb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2631).
cl(mpred_prop(letGoOf(holda,holdb),event),[]),cl(events(letGoOf/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2633).
% event! Hold(holda,holdb)
%~ From E:
%~ 
%~ event( hold(holda,holdb))
%~ cpc :- events([hold/2])
%~ ooo :- [   cl([events([hold/2])],[])]
%~ cpc :- mpred_prop(hold(holda,holdb),event)
%~ ooo :- [   cl([mpred_prop(hold(holda,holdb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2633).
cl(mpred_prop(hold(holda,holdb),event),[]),cl(events(hold/2),[]).

% fluent! Holding(holda,holdb)
%~ From E:
%~ 
%~ fluent( holding(holda,holdb))
%~ cpc :- fluents([holding/2])
%~ ooo :- [   cl([fluents([holding/2])],[])]
%~ cpc :- mpred_prop(holding(holda,holdb),fluent)
%~ ooo :- [   cl([mpred_prop(holding(holda,holdb),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2633).
cl(mpred_prop(holding(holda,holdb),fluent),[]),cl(fluents(holding/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2636).
% sort sita, sitb
%~ From E:
%~ 
%~ sort(sita)
sort(sita).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2636).
%~ From E:
%~ 
%~ sort(sitb)
sort(sitb).

% event! LieOn(sita,sitb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2636).
%~ From E:
%~ 
%~ event( lieOn(sita,sitb))
%~ cpc :- events([lieOn/2])
%~ ooo :- [   cl([events([lieOn/2])],[])]
%~ cpc :- mpred_prop(lieOn(sita,sitb),event)
%~ ooo :- [   cl([mpred_prop(lieOn(sita,sitb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2636).
cl(mpred_prop(lieOn(sita,sitb),event),[]),cl(events(lieOn/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2638).
% event! SitOn(sita,sitb)
%~ From E:
%~ 
%~ event( sitOn(sita,sitb))
%~ cpc :- events([sitOn/2])
%~ ooo :- [   cl([events([sitOn/2])],[])]
%~ cpc :- mpred_prop(sitOn(sita,sitb),event)
%~ ooo :- [   cl([mpred_prop(sitOn(sita,sitb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2638).
cl(mpred_prop(sitOn(sita,sitb),event),[]),cl(events(sitOn/2),[]).

% event! RiseFrom(sita,sitb)
%~ From E:
%~ 
%~ event( riseFrom(sita,sitb))
%~ cpc :- events([riseFrom/2])
%~ ooo :- [   cl([events([riseFrom/2])],[])]
%~ cpc :- mpred_prop(riseFrom(sita,sitb),event)
%~ ooo :- [   cl([mpred_prop(riseFrom(sita,sitb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2638).
cl(mpred_prop(riseFrom(sita,sitb),event),[]),cl(events(riseFrom/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2640).
% fluent! LyingOn(sita,sitb)
%~ From E:
%~ 
%~ fluent( lyingOn(sita,sitb))
%~ cpc :- fluents([lyingOn/2])
%~ ooo :- [   cl([fluents([lyingOn/2])],[])]
%~ cpc :- mpred_prop(lyingOn(sita,sitb),fluent)
%~ ooo :- [   cl([mpred_prop(lyingOn(sita,sitb),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2640).
cl(mpred_prop(lyingOn(sita,sitb),fluent),[]),cl(fluents(lyingOn/2),[]).

% fluent! SittingOn(sita,sitb)
%~ From E:
%~ 
%~ fluent( sittingOn(sita,sitb))
%~ cpc :- fluents([sittingOn/2])
%~ ooo :- [   cl([fluents([sittingOn/2])],[])]
%~ cpc :- mpred_prop(sittingOn(sita,sitb),fluent)
%~ ooo :- [   cl([mpred_prop(sittingOn(sita,sitb),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2640).
cl(mpred_prop(sittingOn(sita,sitb),fluent),[]),cl(fluents(sittingOn/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2643).
% sort greeta, greetb
%~ From E:
%~ 
%~ sort(greeta)
sort(greeta).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2643).
%~ From E:
%~ 
%~ sort(greetb)
sort(greetb).

% event! Greet(greeta,greetb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2643).
%~ From E:
%~ 
%~ event( greet(greeta,greetb))
%~ cpc :- events([greet/2])
%~ ooo :- [   cl([events([greet/2])],[])]
%~ cpc :- mpred_prop(greet(greeta,greetb),event)
%~ ooo :- [   cl([mpred_prop(greet(greeta,greetb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2643).
cl(mpred_prop(greet(greeta,greetb),event),[]),cl(events(greet/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2646).
% ona! Menu1, Food1, Bill1
%~ From E:
%~ 
%~ t(ona,menu1)
isa(menu1,ona).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2646).
%~ From E:
%~ 
%~ t(ona,food1)
isa(food1,ona).
%~ From E:
%~ 
%~ t(ona,bill1)
isa(bill1,ona).

% onb! Table1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2646).
%~ From E:
%~ 
%~ t(onb,table1)
isa(table1,onb).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2648).
% ordera! Customer1, Waiter1
%~ From E:
%~ 
%~ t(ordera,customer1)
isa(customer1,ordera).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2648).
%~ From E:
%~ 
%~ t(ordera,waiter1)
isa(waiter1,ordera).

% orderb! Waiter1, Cook1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2648).
%~ From E:
%~ 
%~ t(orderb,waiter1)
isa(waiter1,orderb).
%~ From E:
%~ 
%~ t(orderb,cook1)
isa(cook1,orderb).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2650).
% orderc! Food1
%~ From E:
%~ 
%~ t(orderc,food1)
isa(food1,orderc).

% requesta! Customer1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2650).
%~ From E:
%~ 
%~ t(requesta,customer1)
isa(customer1,requesta).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2652).
% requestb! Waiter1
%~ From E:
%~ 
%~ t(requestb,waiter1)
isa(waiter1,requestb).

% requestc! Bill1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2652).
%~ From E:
%~ 
%~ t(requestc,bill1)
isa(bill1,requestc).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2654).
% holda! Customer1, Waiter1
%~ From E:
%~ 
%~ t(holda,customer1)
isa(customer1,holda).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2654).
%~ From E:
%~ 
%~ t(holda,waiter1)
isa(waiter1,holda).

% holdb! Menu1, Food1, Bill1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2654).
%~ From E:
%~ 
%~ t(holdb,menu1)
isa(menu1,holdb).
%~ From E:
%~ 
%~ t(holdb,food1)
isa(food1,holdb).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2654).
%~ From E:
%~ 
%~ t(holdb,bill1)
isa(bill1,holdb).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2656).
% holdc! Table1
%~ From E:
%~ 
%~ t(holdc,table1)
isa(table1,holdc).

% sita! Customer1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2656).
%~ From E:
%~ 
%~ t(sita,customer1)
isa(customer1,sita).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2658).
% sitb! Chair1
%~ From E:
%~ 
%~ t(sitb,chair1)
isa(chair1,sitb).

% greeta! Customer1, Waiter1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2658).
%~ From E:
%~ 
%~ t(greeta,customer1)
isa(customer1,greeta).
%~ From E:
%~ 
%~ t(greeta,waiter1)
isa(waiter1,greeta).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2660).
% greetb! Customer1, Waiter1
%~ From E:
%~ 
%~ t(greetb,customer1)
isa(customer1,greetb).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2660).
%~ From E:
%~ 
%~ t(greetb,waiter1)
isa(waiter1,greetb).
%; initial situation


% HoldsAt(At(Waiter1,DiningRoom1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2662).
%~ From E:
%~ 
%~ holds(at_loc(waiter1,diningRoom1),0)
initially( at_loc(waiter1,diningRoom1)).
 %  initial_state([at_loc(waiter1,diningRoom1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2664).
% HoldsAt(At(Cook1,Kitchen1),0).
%~ From E:
%~ 
%~ holds(at_loc(cook1,kitchen1),0)
initially( at_loc(cook1,kitchen1)).
 %  initial_state([at_loc(cook1,kitchen1)]).
 %  % =================================.


% HoldsAt(At(Table1,DiningRoom1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2664).
%~ From E:
%~ 
%~ holds(at_loc(table1,diningRoom1),0)
initially( at_loc(table1,diningRoom1)).
 %  initial_state([at_loc(table1,diningRoom1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2666).
% !HoldsAt(On(Bill1,Table1),0).
%~ From E:
%~ 
%~ holds(not(on(bill1,table1)),0)
initially( not on(bill1,table1)).
 %  initial_state([not(on(bill1,table1))]).
 %  % =================================.


% HoldsAt(At(Bill1,DiningRoom1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2666).
%~ From E:
%~ 
%~ holds(at_loc(bill1,diningRoom1),0)
initially( at_loc(bill1,diningRoom1)).
 %  initial_state([at_loc(bill1,diningRoom1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2668).
% [agent]
 % HoldsAt(Standing(agent),0).
%~ From E:
%~ 
%~ holds(standing(Agent),0)
%~ cpc :- holds(standing(Agent),0)
%~ ooo :- [   cl([holds(standing(Agent),0)],[])]
cl(holds(standing(Agent),0),[]).
 %  cl(holds(standing(Agent),0),[]).
 %  % =================================.


% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2668).
%~ From E:
%~ 
%~ holds(not(holding(Agent,Object)),0)
%~ cpc :- holds(not(holding(Agent,Object)),0)
%~ ooo :- [   cl([],[holds(holding(Agent,Object),0)])]
cl([],holds(holding(Agent,Object),0)).
 %  cl([],holds(holding(Agent,Object),0)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2670).
% [agent1,agent2,physobj]
 % !HoldsAt(KnowOrder(agent1,agent2,physobj),0).
%~ From E:
%~ 
%~ holds(not(knowOrder(Agent1,Agent2,Physobj)),0)
%~ cpc :- holds(not(knowOrder(Agent1,Agent2,Physobj)),0)
%~ ooo :- [   cl([],[holds(knowOrder(Agent1,Agent2,Physobj),0)])]
cl([],holds(knowOrder(Agent1,Agent2,Physobj),0)).
 %  cl([],holds(knowOrder(Agent1,Agent2,Physobj),0)).
 %  % =================================.


% [agent1,agent2,physobj]
 % !HoldsAt(KnowRequest(agent1,agent2,physobj),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2670).
%~ From E:
%~ 
%~ holds(not(knowRequest(Agent1,Agent2,Physobj)),0)
%~ cpc :- holds(not(knowRequest(Agent1,Agent2,Physobj)),0)
%~ ooo :- [   cl([],[holds(knowRequest(Agent1,Agent2,Physobj),0)])]
cl([],holds(knowRequest(Agent1,Agent2,Physobj),0)).
 %  cl([],holds(knowRequest(Agent1,Agent2,Physobj),0)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2672).
% HoldsAt(BeWaiter0(Waiter1),0).
%~ From E:
%~ 
%~ holds(beWaiter0(waiter1),0)
initially( beWaiter0(waiter1)).
 %  initial_state([beWaiter0(waiter1)]).
 %  % =================================.


% HoldsAt(BeCook0(Cook1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2672).
%~ From E:
%~ 
%~ holds(beCook0(cook1),0)
initially( beCook0(cook1)).
 %  initial_state([beCook0(cook1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2674).
% [food]
 % !HoldsAt(FoodPrepared(food),0).
%~ From E:
%~ 
%~ holds(not(foodPrepared(Food)),0)
%~ cpc :- holds(not(foodPrepared(Food)),0)
%~ ooo :- [   cl([],[holds(foodPrepared(Food),0)])]
cl([],holds(foodPrepared(Food),0)).
 %  cl([],holds(foodPrepared(Food),0)).
 %  % =================================.


% !HoldsAt(Hungry(Cook1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2674).
%~ From E:
%~ 
%~ holds(not(hungry(cook1)),0)
initially( not hungry(cook1)).
 %  initial_state([not(hungry(cook1))]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2676).
% !HoldsAt(Hungry(Waiter1),0).
%~ From E:
%~ 
%~ holds(not(hungry(waiter1)),0)
initially( not hungry(waiter1)).
 %  initial_state([not(hungry(waiter1))]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2678).
% Happens(WalkThroughDoor12(Customer1,MainEntrance1),0).
%~ From E:
%~ 
%~ happens(walkThroughDoor12(customer1,mainEntrance1),0)
observe( walkThroughDoor12(customer1,mainEntrance1)at 0).
 %  observe([walkThroughDoor12(customer1,mainEntrance1)],0).
 %  % =================================.


% Happens(Greet(Waiter1,Customer1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2678).
%~ From E:
%~ 
%~ happens(greet(waiter1,customer1),1)
observe( greet(waiter1,customer1)at 1).
 %  observe([greet(waiter1,customer1)],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2680).
% Happens(SitOn(Customer1,Chair1),2).
%~ From E:
%~ 
%~ happens(sitOn(customer1,chair1),2)
observe( sitOn(customer1,chair1)at 2).
 %  observe([sitOn(customer1,chair1)],2).
 %  % =================================.


% Happens(TakeOffOf(Customer1,Menu1,Table1),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2680).
%~ From E:
%~ 
%~ happens(takeOffOf(customer1,menu1,table1),3)
observe( takeOffOf(customer1,menu1,table1)at 3).
 %  observe([takeOffOf(customer1,menu1,table1)],3).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2682).
% Happens(Order(Customer1,Waiter1,Food1),4).
%~ From E:
%~ 
%~ happens(order(customer1,waiter1,food1),4)
observe( order(customer1,waiter1,food1)at 4).
 %  observe([order(customer1,waiter1,food1)],4).
 %  % =================================.


% Happens(PlaceOn(Customer1,Menu1,Table1),5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2682).
%~ From E:
%~ 
%~ happens(placeOn(customer1,menu1,table1),5)
observe( placeOn(customer1,menu1,table1)at 5).
 %  observe([placeOn(customer1,menu1,table1)],5).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2684).
% Happens(Eat(Customer1,Food1),11).
%~ From E:
%~ 
%~ happens(eat(customer1,food1),11)
observe( eat(customer1,food1)at 11).
 %  observe([eat(customer1,food1)],11).
 %  % =================================.


% Happens(Request(Customer1,Waiter1,Bill1),12).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2684).
%~ From E:
%~ 
%~ happens(request(customer1,waiter1,bill1),12)
observe( request(customer1,waiter1,bill1)at 12).
 %  observe([request(customer1,waiter1,bill1)],12).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2686).
% Happens(Pay(Customer1,Waiter1),15).
%~ From E:
%~ 
%~ happens(pay(customer1,waiter1),15)
observe( pay(customer1,waiter1)at 15).
 %  observe([pay(customer1,waiter1)],15).
 %  % =================================.


% Happens(Tip(Customer1,Waiter1),15).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2686).
%~ From E:
%~ 
%~ happens(tip(customer1,waiter1),15)
observe( tip(customer1,waiter1)at 15).
 %  observe([tip(customer1,waiter1)],15).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2688).
% Happens(RiseFrom(Customer1,Chair1),16).
%~ From E:
%~ 
%~ happens(riseFrom(customer1,chair1),16)
observe( riseFrom(customer1,chair1)at 16).
 %  observe([riseFrom(customer1,chair1)],16).
 %  % =================================.


% Happens(SayGoodbye(Customer1,Waiter1),17).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2688).
%~ From E:
%~ 
%~ happens(sayGoodbye(customer1,waiter1),17)
observe( sayGoodbye(customer1,waiter1)at 17).
 %  observe([sayGoodbye(customer1,waiter1)],17).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2690).
% Happens(WalkThroughDoor21(Customer1,MainEntrance1),18).
%~ From E:
%~ 
%~ happens(walkThroughDoor21(customer1,mainEntrance1),18)
observe( walkThroughDoor21(customer1,mainEntrance1)at 18).
 %  observe([walkThroughDoor21(customer1,mainEntrance1)],18).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2692).
% range time 0 19
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,19)))
:-( call_pel_directive( range(time,0,19))).

% range offset 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2692).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,0,0)))
:-( call_pel_directive( range(offset,0,0))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2694).
% range diameter 0 0
%~ From E:
%~ 
%~ :-( call_pel_directive( range(diameter,0,0)))
:-( call_pel_directive( range(diameter,0,0))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2696).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/RepRest.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;
%;sort boolean
%;sort integer
%;reified sort predicate
%;reified sort function
%;
%;sort time: integer
%;sort offset: integer
%;
%;reified sort fluent
%;reified sort event
%;
%;predicate Happens(event,time)
%;predicate HoldsAt(fluent,time)
%;predicate ReleasedAt(fluent,time)
%;predicate Initiates(event,fluent,time)
%;predicate Terminates(event,fluent,time)
%;predicate Releases(event,fluent,time)
%;
%;sort diameter: integer
%;
%;sort object
%;
%;sort agent: object
%;
%;sort physobj: object
%;sort bed: physobj
%;sort snowflake: physobj
%;sort sky: physobj
%;
%;sort stuff: physobj
%;
%;sort surface: physobj
%;sort ground: surface
%;
%;sort snow: stuff
%;sort ball
%;
%;sort food: physobj
%;sort fruit: food
%;sort orange: fruit
%;sort salad: food
%;
%;sort clothing: physobj
%;sort scarf: clothing
%;sort hat: clothing
%;
%;sort vegetablematter: physobj
%;sort coal: vegetablematter
%;
%;sort bodypart: physobj
%;sort hand: bodypart
%;
%;sort papertowels: physobj
%;sort device: physobj
%;sort electronicdevice: device
%;sort lamp: electronicdevice
%;
%;sort cat: physobj
%;
%;sort weapon: physobj
%;sort gun: weapon
%;sort bomb: weapon
%;sort bullet: weapon
%;
%;sort location
%;sort room: location, outside: location
%;
%;sort portal
%;sort door: portal, staircase: portal
%;sort street: portal
%;
%;sort building
%;
%;sort fire: object
%;
%;sort furniture: physobj
%;sort chair: furniture
%;sort table: furniture
%;
%;sort menu: physobj
%;sort bill: physobj
%;
%;sort script
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2808).
% fluent Holding(agent,physobj)
%~ From E:
%~ 
%~ fluent( holding(agent,physobj))
%~ cpc :- fluents([holding/2])
%~ ooo :- [   cl([fluents([holding/2])],[])]
%~ cpc :- mpred_prop(holding(agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(holding(agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2808).
cl(mpred_prop(holding(agent,physobj),fluent),[]),cl(fluents(holding/2),[]).

% event PickUp(agent,physobj)
%~ From E:
%~ 
%~ event( pickUp(agent,physobj))
%~ cpc :- events([pickUp/2])
%~ ooo :- [   cl([events([pickUp/2])],[])]
%~ cpc :- actions([pickUp/2])
%~ ooo :- [   cl([actions([pickUp/2])],[])]
%~ cpc :- mpred_prop(pickUp(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(pickUp(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2808).
( cl(events(pickUp/2),[])  ,    cl(mpred_prop(pickUp(agent,physobj),action),[]) ,     cl(actions(pickUp/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2810).
% event LetGoOf(agent,physobj)
%~ From E:
%~ 
%~ event( letGoOf(agent,physobj))
%~ cpc :- events([letGoOf/2])
%~ ooo :- [   cl([events([letGoOf/2])],[])]
%~ cpc :- actions([letGoOf/2])
%~ ooo :- [   cl([actions([letGoOf/2])],[])]
%~ cpc :- mpred_prop(letGoOf(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(letGoOf(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2810).
( cl(events(letGoOf/2),[])  ,    cl(mpred_prop(letGoOf(agent,physobj),action),[]) ,     cl(actions(letGoOf/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2812).
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).
%~ From E:
%~ 
%~ initiates_at(pickUp(Agent,Physobj),holding(Agent,Physobj),Time)
%~ cpc :- initiates(pickUp(Agent,Physobj),holding(Agent,Physobj),Time)
%~ ooo :- [   cl(    [   initiates(pickUp(Agent,Physobj),holding(Agent,Physobj),Time)],       [])]
cl(initiates(pickUp(Agent,Physobj),holding(Agent,Physobj),Time),[]).
 %  cl(initiates(pickUp(Agent,Physobj),holding(Agent,Physobj),Time),[]).
 %  % =================================.


% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2816).
%~ From E:
%~ 
%~ exists( Location,   happens(pickUp(Agent,Physobj),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj,Location),Time)))
%~ cpc :- exists( Location,   happens(pickUp(Agent,Physobj),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj,Location),Time)) ;     not( happens(pickUp(Agent,Physobj),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj,Location),Time)) ;     not( happens(pickUp(Agent,Physobj),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj,Location),Time)) ;     not( happens(pickUp(Agent,Physobj),Time)))),       []).
 %  % =================================.


% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2822).
%~ From E:
%~ 
%~ terminates_at(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time)
%~ cpc :- terminates(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time)
%~ ooo :- [   cl(    [   terminates(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time)],       [])]
cl(terminates(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time),[]).
 %  cl(terminates(letGoOf(Agent,Physobj),holding(Agent,Physobj),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2824).
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
%~ From E:
%~ 
%~ happens(letGoOf(Agent,Physobj),Time) ->         holds(holding(Agent,Physobj),Time)
%~ cpc :- happens(letGoOf(Agent,Physobj),Time) ->         holds(holding(Agent,Physobj),Time)
%~ ooo :- [   cl(    [   holds(holding(Agent,Physobj),Time)],       [      happens(letGoOf(Agent,Physobj),Time)])]
cl(    holds(holding(Agent,Physobj),Time),       happens(letGoOf(Agent,Physobj),Time)).
 %  cl(    holds(holding(Agent,Physobj),Time),       happens(letGoOf(Agent,Physobj),Time)).
 %  % =================================.


% [agent,physobj,location,time]
% Releases(PickUp(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2829).
%~ From E:
%~ 
%~ releases_at(pickUp(Agent,Physobj),at_loc(Physobj,Location),Time)
%~ cpc :- releases(pickUp(Agent,Physobj),at_loc(Physobj,Location),Time)
%~ ooo :- [   cl(    [   releases(pickUp(Agent,Physobj),at_loc(Physobj,Location),Time)],       [])]
cl(releases(pickUp(Agent,Physobj),at_loc(Physobj,Location),Time),[]).
 %  cl(releases(pickUp(Agent,Physobj),at_loc(Physobj,Location),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2831).
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
%~ From E:
%~ 
%~ (     holds(holding(Agent,Physobj),Time) ,     holds(at_loc(Agent,Location),Time)) ->         holds(at_loc(Physobj,Location),Time)
%~ cpc :- (     holds(holding(Agent,Physobj),Time) ,     holds(at_loc(Agent,Location),Time)) ->         holds(at_loc(Physobj,Location),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Physobj,Location),Time)],       [      holds(holding(Agent,Physobj),Time),           holds(at_loc(Agent,Location),Time)])]
cl(    holds(at_loc(Physobj,Location),Time),       (           holds(holding(Agent,Physobj),Time) ,           holds(at_loc(Agent,Location),Time))).
 %  cl(    holds(at_loc(Physobj,Location),Time),       (           holds(holding(Agent,Physobj),Time) ,           holds(at_loc(Agent,Location),Time))).
 %  % =================================.


%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1!=location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2841).
%~ From E:
%~ 
%~ holds(at_loc(Agent,Location),Time) ->         initiates_at(letGoOf(Agent,Physobj),at_loc(Physobj,Location),Time)
%~ cpc :- holds(at_loc(Agent,Location),Time)
%~ ooo :- [   cl([holds(at_loc(Agent,Location),Time)],[])]
%~ cpc :- if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       cl([holds(at_loc(Agent,Location),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       cl([holds(at_loc(Agent,Location),Time)],[]))],       [])]
cl(    (     letGoOf(Agent,Physobj)initiates at_loc(Physobj,Location)at Time if     cl(holds(at_loc(Agent,Location),Time),[])),       []).
 %  cl(    if(    initiates(letGoOf(Agent,Physobj),at(at_loc(Physobj,Location),Time)),       cl(holds(at_loc(Agent,Location),Time),[])),       []).
 %  % =================================.

% fluent On(physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2844).
%~ From E:
%~ 
%~ fluent( on(physobj,physobj))
%~ cpc :- fluents([on/2])
%~ ooo :- [   cl([fluents([on/2])],[])]
%~ cpc :- mpred_prop(on(physobj,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(on(physobj,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2844).
cl(mpred_prop(on(physobj,physobj),fluent),[]),cl(fluents(on/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2847).
% event PlaceOn(agent,physobj,physobj)
%~ From E:
%~ 
%~ event( placeOn(agent,physobj,physobj))
%~ cpc :- events([placeOn/3])
%~ ooo :- [   cl([events([placeOn/3])],[])]
%~ cpc :- actions([placeOn/3])
%~ ooo :- [   cl([actions([placeOn/3])],[])]
%~ cpc :- mpred_prop(placeOn(agent,physobj,physobj),action)
%~ ooo :- [   cl([mpred_prop(placeOn(agent,physobj,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2847).
( cl(events(placeOn/3),[])  ,    cl(mpred_prop(placeOn(agent,physobj,physobj),action),[]) ,     cl(actions(placeOn/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2849).
% event TakeOffOf(agent,physobj,physobj)
%~ From E:
%~ 
%~ event( takeOffOf(agent,physobj,physobj))
%~ cpc :- events([takeOffOf/3])
%~ ooo :- [   cl([events([takeOffOf/3])],[])]
%~ cpc :- actions([takeOffOf/3])
%~ ooo :- [   cl([actions([takeOffOf/3])],[])]
%~ cpc :- mpred_prop(takeOffOf(agent,physobj,physobj),action)
%~ ooo :- [   cl([mpred_prop(takeOffOf(agent,physobj,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2849).
( cl(events(takeOffOf/3),[])  ,    cl(mpred_prop(takeOffOf(agent,physobj,physobj),action),[]) ,     cl(actions(takeOffOf/3),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2851).
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
%~ From E:
%~ 
%~ holds(on(Physobj1,Physobj2),Time) ->         Physobj1\=Physobj2
%~ cpc :- holds(on(Physobj1,Physobj2),Time) ->         Physobj1\=Physobj2
%~ ooo :- [   cl(    [   {   dif(Physobj1,Physobj2) }],       [      holds(on(Physobj1,Physobj2),Time)])]
cl({dif(Physobj1,Physobj2)},holds(on(Physobj1,Physobj2),Time)).
 %  cl({dif(Physobj1,Physobj2)},holds(on(Physobj1,Physobj2),Time)).
 %  % =================================.


% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2856).
%~ From E:
%~ 
%~ holds(on(Physobj1,Physobj2),Time) ->         holds(not(on(Physobj2,Physobj1)),Time)
%~ cpc :- holds(on(Physobj1,Physobj2),Time) ->         holds(not(on(Physobj2,Physobj1)),Time)
%~ ooo :- [   cl( [], [  [   holds(on(Physobj2,Physobj1),Time),     holds(on(Physobj1,Physobj2),Time)])]]
cl( [],   (     holds(on(Physobj2,Physobj1),Time) ,     holds(on(Physobj1,Physobj2),Time))).
 %  cl( [],   (     holds(on(Physobj2,Physobj1),Time) ,     holds(on(Physobj1,Physobj2),Time))).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2860).
%~ From E:
%~ 
%~ initiates_at( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)
%~ cpc :- initiates( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)
%~ ooo :- [   cl(    [   initiates( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)],       [])]
cl(    initiates( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time),       []).
 %  cl(    initiates( placeOn(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time),       []).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2864).
%~ From E:
%~ 
%~ terminates_at( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ cpc :- terminates( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ ooo :- [   cl(    [   terminates( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)],       [])]
cl(    terminates( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  cl(    terminates( placeOn(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% Happens(PlaceOn(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2868).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2870).
%~ From E:
%~ 
%~ exists( Location,   happens(placeOn(Agent,Physobj1,Physobj2),Time) ->         ( holds(holding(Agent,Physobj1),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj2,Location),Time)))
%~ cpc :- exists( Location,   happens(placeOn(Agent,Physobj1,Physobj2),Time) ->         ( holds(holding(Agent,Physobj1),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( holds(holding(Agent,Physobj1),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(placeOn(Agent,Physobj1,Physobj2),Time))))],       [])]
cl(    exists( Location,   (     ( holds(holding(Agent,Physobj1),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(placeOn(Agent,Physobj1,Physobj2),Time)))),       []).
 %  cl(    exists( Location,   (     ( holds(holding(Agent,Physobj1),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(placeOn(Agent,Physobj1,Physobj2),Time)))),       []).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2875).
%~ From E:
%~ 
%~ terminates_at( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)
%~ cpc :- terminates( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)
%~ ooo :- [   cl(    [   terminates( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time)],       [])]
cl(    terminates( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time),       []).
 %  cl(    terminates( takeOffOf(Agent,Physobj1,Physobj2),   on(Physobj1,Physobj2),     Time),       []).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2879).
%~ From E:
%~ 
%~ initiates_at( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ cpc :- initiates( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)
%~ ooo :- [   cl(    [   initiates( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time)],       [])]
cl(    initiates( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  cl(    initiates( takeOffOf(Agent,Physobj1,Physobj2),   holding(Agent,Physobj1),     Time),       []).
 %  % =================================.


% [agent,physobj1,physobj2,location,time]
% Releases(TakeOffOf(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2883).
%~ From E:
%~ 
%~ releases_at( takeOffOf(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)
%~ cpc :- releases( takeOffOf(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)
%~ ooo :- [   cl(    [   releases( takeOffOf(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)],       [])]
cl(    releases( takeOffOf(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time),       []).
 %  cl(    releases( takeOffOf(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time),       []).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2888).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2890).
%~ From E:
%~ 
%~ exists( Location,   happens(takeOffOf(Agent,Physobj1,Physobj2),Time) ->         ( holds(on(Physobj1,Physobj2),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj1,Location),Time) ,     holds(at_loc(Physobj2,Location),Time)))
%~ cpc :- exists( Location,   happens(takeOffOf(Agent,Physobj1,Physobj2),Time) ->         ( holds(on(Physobj1,Physobj2),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Physobj1,Location),Time) ,     holds(at_loc(Physobj2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( holds(on(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOffOf(Agent,Physobj1,Physobj2),Time))))],       [])]
cl(    exists( Location,   (     ( holds(on(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOffOf(Agent,Physobj1,Physobj2),Time)))),       []).
 %  cl(    exists( Location,   (     ( holds(on(Physobj1,Physobj2),Time)  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Physobj1,Location),Time) ,         holds(at_loc(Physobj2,Location),Time)) ;     not( happens(takeOffOf(Agent,Physobj1,Physobj2),Time)))),       []).
 %  % =================================.


% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2896).
%~ From E:
%~ 
%~ releases_at( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)
%~ cpc :- releases( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)
%~ ooo :- [   cl(    [   releases( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time)],       [])]
cl(    releases( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time),       []).
 %  cl(    releases( placeOn(Agent,Physobj1,Physobj2),   at_loc(Physobj1,Location),     Time),       []).
 %  % =================================.


% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2901).
%~ From E:
%~ 
%~ (     holds(on(Physobj1,Physobj2),Time) ,     holds(at_loc(Physobj2,Location),Time)) ->         holds(at_loc(Physobj1,Location),Time)
%~ cpc :- (     holds(on(Physobj1,Physobj2),Time) ,     holds(at_loc(Physobj2,Location),Time)) ->         holds(at_loc(Physobj1,Location),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Physobj1,Location),Time)],       [      holds(on(Physobj1,Physobj2),Time),           holds(at_loc(Physobj2,Location),Time)])]
cl(    holds(at_loc(Physobj1,Location),Time),       (           holds(on(Physobj1,Physobj2),Time) ,           holds(at_loc(Physobj2,Location),Time))).
 %  cl(    holds(at_loc(Physobj1,Location),Time),       (           holds(on(Physobj1,Physobj2),Time) ,           holds(at_loc(Physobj2,Location),Time))).
 %  % =================================.

% fluent At(object,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2904).
%~ From E:
%~ 
%~ fluent( at_loc(object,location))
%~ cpc :- fluents([at_loc/2])
%~ ooo :- [   cl([fluents([at_loc/2])],[])]
%~ cpc :- mpred_prop(at_loc(object,location),fluent)
%~ ooo :- [   cl([mpred_prop(at_loc(object,location),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2904).
cl(mpred_prop(at_loc(object,location),fluent),[]),cl(fluents(at_loc/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2907).
% [object,time]
% {location} % HoldsAt(At(object,location),time).
%~ From E:
%~ 
%~ exists(Location,holds(at_loc(Object,Location),Time))
%~ cpc :- exists(Location,holds(at_loc(Object,Location),Time))
%~ ooo :- [   cl([exists(Location,holds(at_loc(Object,Location),Time))],[])]
cl(exists(Location,holds(at_loc(Object,Location),Time)),[]).
 %  cl(exists(Location,holds(at_loc(Object,Location),Time)),[]).
 %  % =================================.


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2911).
%~ From E:
%~ 
%~ (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time)) ->         Location1=Location2
%~ cpc :- (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time)) ->         Location1=Location2
%~ ooo :- [   cl(    [   equals(Location1,Location2)],       [      holds(at_loc(Object,Location1),Time),           holds(at_loc(Object,Location2),Time)])]
cl( equals(Location1,Location2),   (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time))).
 %  cl( equals(Location1,Location2),   (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time))).
 %  % =================================.

% function Side1(portal): location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2914).
%~ From E:
%~ 
%~ function(side1(portal),location)
function(side1(portal),location).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2916).
% function Side2(portal): location
%~ From E:
%~ 
%~ function(side2(portal),location)
function(side2(portal),location).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2918).
% fluent NearPortal(object,portal)
%~ From E:
%~ 
%~ fluent( nearPortal(object,portal))
%~ cpc :- fluents([nearPortal/2])
%~ ooo :- [   cl([fluents([nearPortal/2])],[])]
%~ cpc :- mpred_prop(nearPortal(object,portal),fluent)
%~ ooo :- [   cl([mpred_prop(nearPortal(object,portal),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2918).
cl(mpred_prop(nearPortal(object,portal),fluent),[]),cl(fluents(nearPortal/2),[]).

% noninertial NearPortal
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(nearPortal)))
:-( call_pel_directive( noninertial(nearPortal))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2921).
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2923).
%~ From E:
%~ 
%~ exists( Location,   (     holds(nearPortal(Object,Portal),Time) <->     (         side1(Portal)=Location;side2(Portal)=Location ,         holds(at_loc(Object,Location),Time))))
%~ cpc :- exists( Location,   (     holds(nearPortal(Object,Portal),Time) <->     (         side1(Portal)=Location;side2(Portal)=Location ,         holds(at_loc(Object,Location),Time))))
%~ ooo :- [   cl(    [   exists( Location,   (     (         (             equals(side1(Portal),Location);equals(side2(Portal),Location) ,             holds(at_loc(Object,Location),Time)) ;         not( holds(nearPortal(Object,Portal),Time))) ,     ( holds(nearPortal(Object,Portal),Time)  ;        (             not( equals(side1(Portal),Location)) ,             not( equals(side2(Portal),Location))) ;         not( holds(at_loc(Object,Location),Time)))))],       [])]
cl(    exists( Location,   (     (         (             equals(side1(Portal),Location);equals(side2(Portal),Location) ,             holds(at_loc(Object,Location),Time)) ;         not( holds(nearPortal(Object,Portal),Time))) ,     ( holds(nearPortal(Object,Portal),Time)  ;        (             not( equals(side1(Portal),Location)) ,             not( equals(side2(Portal),Location))) ;         not( holds(at_loc(Object,Location),Time))))),       []).
 %  cl(    exists( Location,   (     (         (             equals(side1(Portal),Location);equals(side2(Portal),Location) ,             holds(at_loc(Object,Location),Time)) ;         not( holds(nearPortal(Object,Portal),Time))) ,     ( holds(nearPortal(Object,Portal),Time)  ;        (             not( equals(side1(Portal),Location)) ,             not( equals(side2(Portal),Location))) ;         not( holds(at_loc(Object,Location),Time))))),       []).
 %  % =================================.

% event WalkThroughDoor12(agent,door)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2927).
%~ From E:
%~ 
%~ event( walkThroughDoor12(agent,door))
%~ cpc :- events([walkThroughDoor12/2])
%~ ooo :- [   cl([events([walkThroughDoor12/2])],[])]
%~ cpc :- actions([walkThroughDoor12/2])
%~ ooo :- [   cl([actions([walkThroughDoor12/2])],[])]
%~ cpc :- mpred_prop(walkThroughDoor12(agent,door),action)
%~ ooo :- [   cl([mpred_prop(walkThroughDoor12(agent,door),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2927).
( cl(events(walkThroughDoor12/2),[])  ,    cl(mpred_prop(walkThroughDoor12(agent,door),action),[]) ,     cl(actions(walkThroughDoor12/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2929).
% event WalkThroughDoor21(agent,door)
%~ From E:
%~ 
%~ event( walkThroughDoor21(agent,door))
%~ cpc :- events([walkThroughDoor21/2])
%~ ooo :- [   cl([events([walkThroughDoor21/2])],[])]
%~ cpc :- actions([walkThroughDoor21/2])
%~ ooo :- [   cl([actions([walkThroughDoor21/2])],[])]
%~ cpc :- mpred_prop(walkThroughDoor21(agent,door),action)
%~ ooo :- [   cl([mpred_prop(walkThroughDoor21(agent,door),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2929).
( cl(events(walkThroughDoor21/2),[])  ,    cl(mpred_prop(walkThroughDoor21(agent,door),action),[]) ,     cl(actions(walkThroughDoor21/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2931).
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(door)),time).
%~ From E:
%~ 
%~ happens(walkThroughDoor12(Agent,Door),Time) ->         (     holds(standing(Agent),Time) ,     holds(at_loc(Agent,side1(Door)),Time))
%~ cpc :- happens(walkThroughDoor12(Agent,Door),Time) ->         (     holds(standing(Agent),Time) ,     holds(at_loc(Agent,side1(Door)),Time))
%~ ooo :- [   cl(    [   holds(standing(Agent),Time)],       [      happens(walkThroughDoor12(Agent,Door),Time)]),     cl(      [   holds(at_loc(Agent,side1(Door)),Time)],           [        happens(walkThroughDoor12(Agent,Door),Time)])]
(     cl(      holds(standing(Agent),Time),           happens(walkThroughDoor12(Agent,Door),Time)) ,     cl(      holds(at_loc(Agent,side1(Door)),Time),           happens(walkThroughDoor12(Agent,Door),Time))).
 %  (     cl(      holds(standing(Agent),Time),           happens(walkThroughDoor12(Agent,Door),Time)) ,     cl(      holds(at_loc(Agent,side1(Door)),Time),           happens(walkThroughDoor12(Agent,Door),Time))).
 %  % =================================.


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(door)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2937).
%~ From E:
%~ 
%~ happens(walkThroughDoor21(Agent,Door),Time) ->         (     holds(standing(Agent),Time) ,     holds(at_loc(Agent,side2(Door)),Time))
%~ cpc :- happens(walkThroughDoor21(Agent,Door),Time) ->         (     holds(standing(Agent),Time) ,     holds(at_loc(Agent,side2(Door)),Time))
%~ ooo :- [   cl(    [   holds(standing(Agent),Time)],       [      happens(walkThroughDoor21(Agent,Door),Time)]),     cl(      [   holds(at_loc(Agent,side2(Door)),Time)],           [        happens(walkThroughDoor21(Agent,Door),Time)])]
(     cl(      holds(standing(Agent),Time),           happens(walkThroughDoor21(Agent,Door),Time)) ,     cl(      holds(at_loc(Agent,side2(Door)),Time),           happens(walkThroughDoor21(Agent,Door),Time))).
 %  (     cl(      holds(standing(Agent),Time),           happens(walkThroughDoor21(Agent,Door),Time)) ,     cl(      holds(at_loc(Agent,side2(Door)),Time),           happens(walkThroughDoor21(Agent,Door),Time))).
 %  % =================================.


% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2942).
%~ From E:
%~ 
%~ side2(Door) =         Location ->         initiates_at( walkThroughDoor12(Agent,Door),   at_loc(Agent,Location),     Time)
%~ cpc :- if(    initiates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location))
%~ ooo :- [   cl(    [   if(    initiates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location))],       [])]
cl(    (     (         walkThroughDoor12(Agent,Door) initiates         at_loc(Agent,Location)at Time) if     side2(Door,Location)),       []).
 %  cl(    if(    initiates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location)),       []).
 %  % =================================.


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2946).
%~ From E:
%~ 
%~ side1(Door) =         Location ->         initiates_at( walkThroughDoor21(Agent,Door),   at_loc(Agent,Location),     Time)
%~ cpc :- if(    initiates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location))
%~ ooo :- [   cl(    [   if(    initiates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location))],       [])]
cl(    (     (         walkThroughDoor21(Agent,Door) initiates         at_loc(Agent,Location)at Time) if     side1(Door,Location)),       []).
 %  cl(    if(    initiates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location)),       []).
 %  % =================================.


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2950).
%~ From E:
%~ 
%~ side1(Door) =         Location ->         terminates_at( walkThroughDoor12(Agent,Door),   at_loc(Agent,Location),     Time)
%~ cpc :- if(    terminates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location))
%~ ooo :- [   cl(    [   if(    terminates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location))],       [])]
cl(    (     (         walkThroughDoor12(Agent,Door) terminates         at_loc(Agent,Location)at Time) if     side1(Door,Location)),       []).
 %  cl(    if(    terminates( walkThroughDoor12(Agent,Door),   at(at_loc(Agent,Location),Time)),       side1(Door,Location)),       []).
 %  % =================================.


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2954).
%~ From E:
%~ 
%~ side2(Door) =         Location ->         terminates_at( walkThroughDoor21(Agent,Door),   at_loc(Agent,Location),     Time)
%~ cpc :- if(    terminates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location))
%~ ooo :- [   cl(    [   if(    terminates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location))],       [])]
cl(    (     (         walkThroughDoor21(Agent,Door) terminates         at_loc(Agent,Location)at Time) if     side2(Door,Location)),       []).
 %  cl(    if(    terminates( walkThroughDoor21(Agent,Door),   at(at_loc(Agent,Location),Time)),       side2(Door,Location)),       []).
 %  % =================================.

% fluent Hungry(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2956).
%~ From E:
%~ 
%~ fluent( hungry(agent))
%~ cpc :- fluents([hungry/1])
%~ ooo :- [   cl([fluents([hungry/1])],[])]
%~ cpc :- mpred_prop(hungry(agent),fluent)
%~ ooo :- [   cl([mpred_prop(hungry(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2956).
cl(mpred_prop(hungry(agent),fluent),[]),cl(fluents(hungry/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2959).
% fluent Satiated(agent)
%~ From E:
%~ 
%~ fluent( satiated(agent))
%~ cpc :- fluents([satiated/1])
%~ ooo :- [   cl([fluents([satiated/1])],[])]
%~ cpc :- mpred_prop(satiated(agent),fluent)
%~ ooo :- [   cl([mpred_prop(satiated(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2959).
cl(mpred_prop(satiated(agent),fluent),[]),cl(fluents(satiated/1),[]).

% noninertial Satiated
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(satiated)))
:-( call_pel_directive( noninertial(satiated))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2962).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).
%~ From E:
%~ 
%~ <->(holds(hungry(Agent),Time),holds(not(satiated(Agent)),Time))
%~ cpc :- <->(holds(hungry(Agent),Time),holds(not(satiated(Agent)),Time))
%~ ooo :- [   cl([],[holds(satiated(Agent),Time),holds(hungry(Agent),Time)]),     cl([holds(hungry(Agent),Time),holds(satiated(Agent),Time)],[])]
(     cl([],(holds(satiated(Agent),Time),holds(hungry(Agent),Time))) ,     cl((holds(hungry(Agent),Time),holds(satiated(Agent),Time)),[])).
 %  (     cl([],(holds(satiated(Agent),Time),holds(hungry(Agent),Time))) ,     cl((holds(hungry(Agent),Time),holds(satiated(Agent),Time)),[])).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2964).
% event Eat(agent,food)
%~ From E:
%~ 
%~ event( eat(agent,food))
%~ cpc :- events([eat/2])
%~ ooo :- [   cl([events([eat/2])],[])]
%~ cpc :- actions([eat/2])
%~ ooo :- [   cl([actions([eat/2])],[])]
%~ cpc :- mpred_prop(eat(agent,food),action)
%~ ooo :- [   cl([mpred_prop(eat(agent,food),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2964).
( cl(events(eat/2),[])  ,    cl(mpred_prop(eat(agent,food),action),[]) ,     cl(actions(eat/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2966).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2968).
%~ From E:
%~ 
%~ exists( Location,   happens(eat(Agent,Food),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Food,Location),Time)))
%~ cpc :- exists( Location,   happens(eat(Agent,Food),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Food,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(eat(Agent,Food),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(eat(Agent,Food),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(eat(Agent,Food),Time)))),       []).
 %  % =================================.


% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2973).
%~ From E:
%~ 
%~ terminates_at(eat(Agent,Food),hungry(Agent),Time)
%~ cpc :- terminates(eat(Agent,Food),hungry(Agent),Time)
%~ ooo :- [   cl([terminates(eat(Agent,Food),hungry(Agent),Time)],[])]
cl(terminates(eat(Agent,Food),hungry(Agent),Time),[]).
 %  cl(terminates(eat(Agent,Food),hungry(Agent),Time),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2975).
% sort restaurant: script
%~ From E:
%~ 
%~ subsort(restaurant,script)
subsort(restaurant,script).

% sort waiter: agent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2975).
%~ From E:
%~ 
%~ subsort(waiter,agent)
subsort(waiter,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2977).
% sort cook: agent
%~ From E:
%~ 
%~ subsort(cook,agent)
subsort(cook,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2979).
% function BillOf(restaurant): bill
%~ From E:
%~ 
%~ function(billOf(restaurant),bill)
function(billOf(restaurant),bill).

% function CookOf(restaurant): cook
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2979).
%~ From E:
%~ 
%~ function(cookOf(restaurant),cook)
function(cookOf(restaurant),cook).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2981).
% function TableOf(restaurant): table
%~ From E:
%~ 
%~ function(tableOf(restaurant),table)
function(tableOf(restaurant),table).

% function WaiterOf(restaurant): waiter
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2981).
%~ From E:
%~ 
%~ function(waiterOf(restaurant),waiter)
function(waiterOf(restaurant),waiter).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2983).
% function KitchenDoorOf(restaurant): door
%~ From E:
%~ 
%~ function(kitchenDoorOf(restaurant),door)
function(kitchenDoorOf(restaurant),door).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2985).
% fluent BeWaiter0(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter0(waiter))
%~ cpc :- fluents([beWaiter0/1])
%~ ooo :- [   cl([fluents([beWaiter0/1])],[])]
%~ cpc :- mpred_prop(beWaiter0(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter0(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2985).
cl(mpred_prop(beWaiter0(waiter),fluent),[]),cl(fluents(beWaiter0/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2987).
% fluent BeWaiter1(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter1(waiter))
%~ cpc :- fluents([beWaiter1/1])
%~ ooo :- [   cl([fluents([beWaiter1/1])],[])]
%~ cpc :- mpred_prop(beWaiter1(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter1(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2987).
cl(mpred_prop(beWaiter1(waiter),fluent),[]),cl(fluents(beWaiter1/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2989).
% fluent BeWaiter2(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter2(waiter))
%~ cpc :- fluents([beWaiter2/1])
%~ ooo :- [   cl([fluents([beWaiter2/1])],[])]
%~ cpc :- mpred_prop(beWaiter2(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter2(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2989).
cl(mpred_prop(beWaiter2(waiter),fluent),[]),cl(fluents(beWaiter2/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2991).
% fluent BeWaiter3(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter3(waiter))
%~ cpc :- fluents([beWaiter3/1])
%~ ooo :- [   cl([fluents([beWaiter3/1])],[])]
%~ cpc :- mpred_prop(beWaiter3(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter3(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2991).
cl(mpred_prop(beWaiter3(waiter),fluent),[]),cl(fluents(beWaiter3/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2993).
% fluent BeWaiter4(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter4(waiter))
%~ cpc :- fluents([beWaiter4/1])
%~ ooo :- [   cl([fluents([beWaiter4/1])],[])]
%~ cpc :- mpred_prop(beWaiter4(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter4(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2993).
cl(mpred_prop(beWaiter4(waiter),fluent),[]),cl(fluents(beWaiter4/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2995).
% fluent BeWaiter5(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter5(waiter))
%~ cpc :- fluents([beWaiter5/1])
%~ ooo :- [   cl([fluents([beWaiter5/1])],[])]
%~ cpc :- mpred_prop(beWaiter5(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter5(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2995).
cl(mpred_prop(beWaiter5(waiter),fluent),[]),cl(fluents(beWaiter5/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2997).
% fluent BeWaiter6(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter6(waiter))
%~ cpc :- fluents([beWaiter6/1])
%~ ooo :- [   cl([fluents([beWaiter6/1])],[])]
%~ cpc :- mpred_prop(beWaiter6(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter6(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2997).
cl(mpred_prop(beWaiter6(waiter),fluent),[]),cl(fluents(beWaiter6/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2999).
% fluent BeWaiter7(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter7(waiter))
%~ cpc :- fluents([beWaiter7/1])
%~ ooo :- [   cl([fluents([beWaiter7/1])],[])]
%~ cpc :- mpred_prop(beWaiter7(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter7(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',2999).
cl(mpred_prop(beWaiter7(waiter),fluent),[]),cl(fluents(beWaiter7/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3001).
% fluent BeWaiter8(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter8(waiter))
%~ cpc :- fluents([beWaiter8/1])
%~ ooo :- [   cl([fluents([beWaiter8/1])],[])]
%~ cpc :- mpred_prop(beWaiter8(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter8(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3001).
cl(mpred_prop(beWaiter8(waiter),fluent),[]),cl(fluents(beWaiter8/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3003).
% fluent BeWaiter9(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter9(waiter))
%~ cpc :- fluents([beWaiter9/1])
%~ ooo :- [   cl([fluents([beWaiter9/1])],[])]
%~ cpc :- mpred_prop(beWaiter9(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter9(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3003).
cl(mpred_prop(beWaiter9(waiter),fluent),[]),cl(fluents(beWaiter9/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3005).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
%~ From E:
%~ 
%~ xor( [   beWaiter0, beWaiter1,beWaiter2,beWaiter3,beWaiter4,
%~   beWaiter5,beWaiter6,beWaiter7,beWaiter8,
%~       beWaiter9])
%~ cpc :- xor( [   beWaiter0, beWaiter1,beWaiter2,beWaiter3,beWaiter4,
%~   beWaiter5,beWaiter6,beWaiter7,beWaiter8,
%~       beWaiter9])
%~ ooo :- [   cl(    [   xor( [   beWaiter0, beWaiter1,beWaiter2,beWaiter3,beWaiter4,
%~   beWaiter5,beWaiter6,beWaiter7,beWaiter8,
%~       beWaiter9])],       [])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3005).
cl(    xor( ( beWaiter0  ,    beWaiter1 ,     beWaiter2 ,     beWaiter3 ,     beWaiter4 ,     beWaiter5 ,     beWaiter6 ,     beWaiter7 ,     beWaiter8 ,     beWaiter9)),       []).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3007).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3007).
%~ From E:
%~ 
%~ holds(beWaiter0(Waiter),Time) ->         terminates_at(greet(Waiter,Agent),beWaiter0(Waiter),Time)
%~ cpc :- holds(beWaiter0(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter0(Waiter),Time)],[])]
%~ cpc :- if(    terminates(greet(Waiter,Agent),at(beWaiter0(Waiter),Time)),       cl([holds(beWaiter0(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(greet(Waiter,Agent),at(beWaiter0(Waiter),Time)),       cl([holds(beWaiter0(Waiter),Time)],[]))],       [])]
cl(    (     greet(Waiter,Agent)terminates beWaiter0(Waiter)at Time if     cl(holds(beWaiter0(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(greet(Waiter,Agent),at(beWaiter0(Waiter),Time)),       cl(holds(beWaiter0(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3014).
%~ From E:
%~ 
%~ holds(beWaiter0(Waiter),Time) ->         initiates_at(greet(Waiter,Agent),beWaiter1(Waiter),Time)
%~ cpc :- holds(beWaiter0(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter0(Waiter),Time)],[])]
%~ cpc :- if(    initiates(greet(Waiter,Agent),at(beWaiter1(Waiter),Time)),       cl([holds(beWaiter0(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(greet(Waiter,Agent),at(beWaiter1(Waiter),Time)),       cl([holds(beWaiter0(Waiter),Time)],[]))],       [])]
cl(    (     greet(Waiter,Agent)initiates beWaiter1(Waiter)at Time if     cl(holds(beWaiter0(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(greet(Waiter,Agent),at(beWaiter1(Waiter),Time)),       cl(holds(beWaiter0(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3020).
%~ From E:
%~ 
%~ holds(beWaiter1(Waiter),Time) ->         terminates_at(order(Agent,Waiter,Food),beWaiter1(Waiter),Time)
%~ cpc :- holds(beWaiter1(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter1(Waiter),Time)],[])]
%~ cpc :- if(    terminates(order(Agent,Waiter,Food),at(beWaiter1(Waiter),Time)),       cl([holds(beWaiter1(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(order(Agent,Waiter,Food),at(beWaiter1(Waiter),Time)),       cl([holds(beWaiter1(Waiter),Time)],[]))],       [])]
cl(    (     order(Agent,Waiter,Food)terminates beWaiter1(Waiter)at Time if     cl(holds(beWaiter1(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(order(Agent,Waiter,Food),at(beWaiter1(Waiter),Time)),       cl(holds(beWaiter1(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3026).
%~ From E:
%~ 
%~ holds(beWaiter1(Waiter),Time) ->         initiates_at(order(Agent,Waiter,Food),beWaiter2(Waiter),Time)
%~ cpc :- holds(beWaiter1(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter1(Waiter),Time)],[])]
%~ cpc :- if(    initiates(order(Agent,Waiter,Food),at(beWaiter2(Waiter),Time)),       cl([holds(beWaiter1(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(order(Agent,Waiter,Food),at(beWaiter2(Waiter),Time)),       cl([holds(beWaiter1(Waiter),Time)],[]))],       [])]
cl(    (     order(Agent,Waiter,Food)initiates beWaiter2(Waiter)at Time if     cl(holds(beWaiter1(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(order(Agent,Waiter,Food),at(beWaiter2(Waiter),Time)),       cl(holds(beWaiter1(Waiter),Time),[])),       []).
 %  % =================================.


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3032).
%~ From E:
%~ 
%~ waiterOf(Restaurant)=Waiter,holds(beWaiter2(Waiter),Time) ->         happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time)
%~ cpc :- waiterOf(Restaurant)=Waiter,holds(beWaiter2(Waiter),Time) ->         happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time)
%~ ooo :- [   cl(    [   happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time)],       [      equals(waiterOf(Restaurant),Waiter),           holds(beWaiter2(Waiter),Time)])]
cl(    happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time),       equals(waiterOf(Restaurant),Waiter),holds(beWaiter2(Waiter),Time)).
 %  cl(    happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time),       equals(waiterOf(Restaurant),Waiter),holds(beWaiter2(Waiter),Time)).
 %  % =================================.


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3037).
%~ From E:
%~ 
%~ ( holds(beWaiter2(Waiter),Time)  ,      waiterOf(Restaurant) =             Waiter ,       kitchenDoorOf(Restaurant) =             Door) ->         terminates_at(walkThroughDoor12(Waiter,Door),beWaiter2(Waiter),Time)
%~ cpc :- holds(beWaiter2(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter2(Waiter),Time)],[])]
%~ cpc :- if(    terminates(walkThroughDoor12(Waiter,Door),at(beWaiter2(Waiter),Time)),       ( cl([holds(beWaiter2(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))
%~ ooo :- [   cl(    [   if(    terminates(walkThroughDoor12(Waiter,Door),at(beWaiter2(Waiter),Time)),       ( cl([holds(beWaiter2(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))],       [])]
cl(    (     walkThroughDoor12(Waiter,Door)terminates beWaiter2(Waiter)at Time if     ( cl(holds(beWaiter2(Waiter),Time),[])  ,        waiterOf(Restaurant,Waiter) ,         kitchenDoorOf(Restaurant,Door))),       []).
 %  cl(    if(    terminates(walkThroughDoor12(Waiter,Door),at(beWaiter2(Waiter),Time)),       ( cl(holds(beWaiter2(Waiter),Time),[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door))),       []).
 %  % =================================.


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3045).
%~ From E:
%~ 
%~ ( holds(beWaiter2(Waiter),Time)  ,      waiterOf(Restaurant) =             Waiter ,       kitchenDoorOf(Restaurant) =             Door) ->         initiates_at(walkThroughDoor12(Waiter,Door),beWaiter3(Waiter),Time)
%~ cpc :- holds(beWaiter2(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter2(Waiter),Time)],[])]
%~ cpc :- if(    initiates(walkThroughDoor12(Waiter,Door),at(beWaiter3(Waiter),Time)),       ( cl([holds(beWaiter2(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))
%~ ooo :- [   cl(    [   if(    initiates(walkThroughDoor12(Waiter,Door),at(beWaiter3(Waiter),Time)),       ( cl([holds(beWaiter2(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))],       [])]
cl(    (     walkThroughDoor12(Waiter,Door)initiates beWaiter3(Waiter)at Time if     ( cl(holds(beWaiter2(Waiter),Time),[])  ,        waiterOf(Restaurant,Waiter) ,         kitchenDoorOf(Restaurant,Door))),       []).
 %  cl(    if(    initiates(walkThroughDoor12(Waiter,Door),at(beWaiter3(Waiter),Time)),       ( cl(holds(beWaiter2(Waiter),Time),[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door))),       []).
 %  % =================================.


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3053).
%~ From E:
%~ 
%~ (     holds(beWaiter3(waiterOf(Restaurant)),Time) ,     thereExists( Agent,     holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time))) ->         happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)
%~ cpc :- (     holds(beWaiter3(waiterOf(Restaurant)),Time) ,     thereExists( Agent,     holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time))) ->         happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)
%~ ooo :- [   cl(    [   exists( Agent,   ( happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)  ;    not( holds(beWaiter3(waiterOf(Restaurant)),Time)) ;     not( holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time))))],       [])]
cl(    exists( Agent,   ( happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)  ;    not( holds(beWaiter3(waiterOf(Restaurant)),Time)) ;     not( holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time)))),       []).
 %  ( cl(    exists( Agent,   ( happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)  ;    not( holds(beWaiter3(waiterOf(Restaurant)),Time)) ;     not( holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time)))),       [])).
 %  % =================================.


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3058).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      cookOf(Restaurant) =             Cook ,     holds(beWaiter3(Waiter),Time)) ->         terminates_at(order(Waiter,Cook,Food),beWaiter3(Waiter),Time)
%~ cpc :- holds(beWaiter3(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter3(Waiter),Time)],[])]
%~ cpc :- if(    terminates(order(Waiter,Cook,Food),at(beWaiter3(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl([holds(beWaiter3(Waiter),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates(order(Waiter,Cook,Food),at(beWaiter3(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl([holds(beWaiter3(Waiter),Time)],[])))],       [])]
cl(    (     order(Waiter,Cook,Food)terminates beWaiter3(Waiter)at Time if     ( waiterOf(Restaurant,Waiter)  ,        cookOf(Restaurant,Cook) ,         cl(holds(beWaiter3(Waiter),Time),[]))),       []).
 %  cl(    if(    terminates(order(Waiter,Cook,Food),at(beWaiter3(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl(holds(beWaiter3(Waiter),Time),[]))),       []).
 %  % =================================.


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3066).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      cookOf(Restaurant) =             Cook ,     holds(beWaiter3(Waiter),Time)) ->         initiates_at(order(Waiter,Cook,Food),beWaiter4(Waiter),Time)
%~ cpc :- holds(beWaiter3(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter3(Waiter),Time)],[])]
%~ cpc :- if(    initiates(order(Waiter,Cook,Food),at(beWaiter4(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl([holds(beWaiter3(Waiter),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates(order(Waiter,Cook,Food),at(beWaiter4(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl([holds(beWaiter3(Waiter),Time)],[])))],       [])]
cl(    (     order(Waiter,Cook,Food)initiates beWaiter4(Waiter)at Time if     ( waiterOf(Restaurant,Waiter)  ,        cookOf(Restaurant,Cook) ,         cl(holds(beWaiter3(Waiter),Time),[]))),       []).
 %  cl(    if(    initiates(order(Waiter,Cook,Food),at(beWaiter4(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl(holds(beWaiter3(Waiter),Time),[]))),       []).
 %  % =================================.


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3074).
%~ From E:
%~ 
%~ ( holds(beWaiter4(Waiter),Time)  ,    thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)) ,     holds(foodPrepared(Food),Time)) ->         happens(pickUp(Waiter,Food),Time)
%~ cpc :- ( holds(beWaiter4(Waiter),Time)  ,    thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)) ,     holds(foodPrepared(Food),Time)) ->         happens(pickUp(Waiter,Food),Time)
%~ ooo :- [   cl(    [   exists( Agent,   ( happens(pickUp(Waiter,Food),Time)  ;    not( holds(beWaiter4(Waiter),Time)) ;     not( holds(knowOrder(Waiter,Agent,Food),Time)) ;     not( holds(foodPrepared(Food),Time))))],       [])]
cl(    exists( Agent,   ( happens(pickUp(Waiter,Food),Time)  ;    not( holds(beWaiter4(Waiter),Time)) ;     not( holds(knowOrder(Waiter,Agent,Food),Time)) ;     not( holds(foodPrepared(Food),Time)))),       []).
 %  ( cl(    exists( Agent,   ( happens(pickUp(Waiter,Food),Time)  ;    not( holds(beWaiter4(Waiter),Time)) ;     not( holds(knowOrder(Waiter,Agent,Food),Time)) ;     not( holds(foodPrepared(Food),Time)))),       [])).
 %  % =================================.


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3080).
%~ From E:
%~ 
%~ (     holds(beWaiter4(Waiter),Time) ,     thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))) ->         terminates_at(pickUp(Waiter,Food),beWaiter4(Waiter),Time)
%~ cpc :- holds(beWaiter4(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter4(Waiter),Time)],[])]
%~ cpc :- thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))
%~ ooo :- [   cl(    [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],       [])]
%~ cpc :- if(    terminates(pickUp(Waiter,Food),at(beWaiter4(Waiter),Time)),       (           cl([holds(beWaiter4(Waiter),Time)],[]) ,           cl(         [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],                 [])))
%~ ooo :- [   cl(    [   if(    terminates(pickUp(Waiter,Food),at(beWaiter4(Waiter),Time)),       (           cl([holds(beWaiter4(Waiter),Time)],[]) ,           cl(         [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],                 [])))],       [])]
cl(    (     pickUp(Waiter,Food)terminates beWaiter4(Waiter)at Time if     (         cl(holds(beWaiter4(Waiter),Time),[]) ,         cl(exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)),[]))),       []).
 %  cl(    if(    terminates(pickUp(Waiter,Food),at(beWaiter4(Waiter),Time)),       (           cl(holds(beWaiter4(Waiter),Time),[]) ,           cl(exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)),[]))),       []).
 %  % =================================.


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3087).
%~ From E:
%~ 
%~ (     holds(beWaiter4(Waiter),Time) ,     thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))) ->         initiates_at(pickUp(Waiter,Food),beWaiter5(Waiter),Time)
%~ cpc :- holds(beWaiter4(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter4(Waiter),Time)],[])]
%~ cpc :- thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))
%~ ooo :- [   cl(    [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],       [])]
%~ cpc :- if(    initiates(pickUp(Waiter,Food),at(beWaiter5(Waiter),Time)),       (           cl([holds(beWaiter4(Waiter),Time)],[]) ,           cl(         [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],                 [])))
%~ ooo :- [   cl(    [   if(    initiates(pickUp(Waiter,Food),at(beWaiter5(Waiter),Time)),       (           cl([holds(beWaiter4(Waiter),Time)],[]) ,           cl(         [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],                 [])))],       [])]
cl(    (     pickUp(Waiter,Food)initiates beWaiter5(Waiter)at Time if     (         cl(holds(beWaiter4(Waiter),Time),[]) ,         cl(exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)),[]))),       []).
 %  cl(    if(    initiates(pickUp(Waiter,Food),at(beWaiter5(Waiter),Time)),       (           cl(holds(beWaiter4(Waiter),Time),[]) ,           cl(exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)),[]))),       []).
 %  % =================================.


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3094).
%~ From E:
%~ 
%~ waiterOf(Restaurant)=Waiter,holds(beWaiter5(Waiter),Time) ->         happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time)
%~ cpc :- waiterOf(Restaurant)=Waiter,holds(beWaiter5(Waiter),Time) ->         happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time)
%~ ooo :- [   cl(    [   happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time)],       [      equals(waiterOf(Restaurant),Waiter),           holds(beWaiter5(Waiter),Time)])]
cl(    happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time),       equals(waiterOf(Restaurant),Waiter),holds(beWaiter5(Waiter),Time)).
 %  cl(    happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time),       equals(waiterOf(Restaurant),Waiter),holds(beWaiter5(Waiter),Time)).
 %  % =================================.


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3099).
%~ From E:
%~ 
%~ ( holds(beWaiter5(Waiter),Time)  ,      waiterOf(Restaurant) =             Waiter ,       kitchenDoorOf(Restaurant) =             Door) ->         terminates_at(walkThroughDoor21(Waiter,Door),beWaiter5(Waiter),Time)
%~ cpc :- holds(beWaiter5(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter5(Waiter),Time)],[])]
%~ cpc :- if(    terminates(walkThroughDoor21(Waiter,Door),at(beWaiter5(Waiter),Time)),       ( cl([holds(beWaiter5(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))
%~ ooo :- [   cl(    [   if(    terminates(walkThroughDoor21(Waiter,Door),at(beWaiter5(Waiter),Time)),       ( cl([holds(beWaiter5(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))],       [])]
cl(    (     walkThroughDoor21(Waiter,Door)terminates beWaiter5(Waiter)at Time if     ( cl(holds(beWaiter5(Waiter),Time),[])  ,        waiterOf(Restaurant,Waiter) ,         kitchenDoorOf(Restaurant,Door))),       []).
 %  cl(    if(    terminates(walkThroughDoor21(Waiter,Door),at(beWaiter5(Waiter),Time)),       ( cl(holds(beWaiter5(Waiter),Time),[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door))),       []).
 %  % =================================.


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3107).
%~ From E:
%~ 
%~ ( holds(beWaiter5(Waiter),Time)  ,      waiterOf(Restaurant) =             Waiter ,       kitchenDoorOf(Restaurant) =             Door) ->         initiates_at(walkThroughDoor21(Waiter,Door),beWaiter6(Waiter),Time)
%~ cpc :- holds(beWaiter5(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter5(Waiter),Time)],[])]
%~ cpc :- if(    initiates(walkThroughDoor21(Waiter,Door),at(beWaiter6(Waiter),Time)),       ( cl([holds(beWaiter5(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))
%~ ooo :- [   cl(    [   if(    initiates(walkThroughDoor21(Waiter,Door),at(beWaiter6(Waiter),Time)),       ( cl([holds(beWaiter5(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))],       [])]
cl(    (     walkThroughDoor21(Waiter,Door)initiates beWaiter6(Waiter)at Time if     ( cl(holds(beWaiter5(Waiter),Time),[])  ,        waiterOf(Restaurant,Waiter) ,         kitchenDoorOf(Restaurant,Door))),       []).
 %  cl(    if(    initiates(walkThroughDoor21(Waiter,Door),at(beWaiter6(Waiter),Time)),       ( cl(holds(beWaiter5(Waiter),Time),[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door))),       []).
 %  % =================================.


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3115).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      tableOf(Restaurant) =             Table ,     holds(beWaiter6(Waiter),Time) ,     holds(holding(Waiter,Food),Time)) ->         happens(placeOn(Waiter,Food,Table),Time)
%~ cpc :- ( waiterOf(Restaurant) =         Waiter  ,      tableOf(Restaurant) =             Table ,     holds(beWaiter6(Waiter),Time) ,     holds(holding(Waiter,Food),Time)) ->         happens(placeOn(Waiter,Food,Table),Time)
%~ ooo :- [   cl(    [   happens(placeOn(Waiter,Food,Table),Time)],       [      equals(waiterOf(Restaurant),Waiter),           equals(tableOf(Restaurant),Table),           holds(beWaiter6(Waiter),Time),           holds(holding(Waiter,Food),Time)])]
cl(    happens(placeOn(Waiter,Food,Table),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(tableOf(Restaurant),Table) ,           holds(beWaiter6(Waiter),Time) ,           holds(holding(Waiter,Food),Time))).
 %  cl(    happens(placeOn(Waiter,Food,Table),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(tableOf(Restaurant),Table) ,           holds(beWaiter6(Waiter),Time) ,           holds(holding(Waiter,Food),Time))).
 %  % =================================.


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3122).
%~ From E:
%~ 
%~ holds(beWaiter6(Waiter),Time) ->         terminates_at(placeOn(Waiter,Food,Table),beWaiter6(Waiter),Time)
%~ cpc :- holds(beWaiter6(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter6(Waiter),Time)],[])]
%~ cpc :- if(    terminates(placeOn(Waiter,Food,Table),at(beWaiter6(Waiter),Time)),       cl([holds(beWaiter6(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(placeOn(Waiter,Food,Table),at(beWaiter6(Waiter),Time)),       cl([holds(beWaiter6(Waiter),Time)],[]))],       [])]
cl(    (     placeOn(Waiter,Food,Table)terminates beWaiter6(Waiter)at Time if     cl(holds(beWaiter6(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(placeOn(Waiter,Food,Table),at(beWaiter6(Waiter),Time)),       cl(holds(beWaiter6(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3128).
%~ From E:
%~ 
%~ holds(beWaiter6(Waiter),Time) ->         initiates_at(placeOn(Waiter,Food,Table),beWaiter7(Waiter),Time)
%~ cpc :- holds(beWaiter6(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter6(Waiter),Time)],[])]
%~ cpc :- if(    initiates(placeOn(Waiter,Food,Table),at(beWaiter7(Waiter),Time)),       cl([holds(beWaiter6(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(placeOn(Waiter,Food,Table),at(beWaiter7(Waiter),Time)),       cl([holds(beWaiter6(Waiter),Time)],[]))],       [])]
cl(    (     placeOn(Waiter,Food,Table)initiates beWaiter7(Waiter)at Time if     cl(holds(beWaiter6(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(placeOn(Waiter,Food,Table),at(beWaiter7(Waiter),Time)),       cl(holds(beWaiter6(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3134).
%~ From E:
%~ 
%~ holds(beWaiter7(Waiter),Time) ->         terminates_at(request(Agent,Waiter,Bill),beWaiter7(Waiter),Time)
%~ cpc :- holds(beWaiter7(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter7(Waiter),Time)],[])]
%~ cpc :- if(    terminates(request(Agent,Waiter,Bill),at(beWaiter7(Waiter),Time)),       cl([holds(beWaiter7(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(request(Agent,Waiter,Bill),at(beWaiter7(Waiter),Time)),       cl([holds(beWaiter7(Waiter),Time)],[]))],       [])]
cl(    (     request(Agent,Waiter,Bill)terminates beWaiter7(Waiter)at Time if     cl(holds(beWaiter7(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(request(Agent,Waiter,Bill),at(beWaiter7(Waiter),Time)),       cl(holds(beWaiter7(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3140).
%~ From E:
%~ 
%~ holds(beWaiter7(Waiter),Time) ->         initiates_at(request(Agent,Waiter,Bill),beWaiter8(Waiter),Time)
%~ cpc :- holds(beWaiter7(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter7(Waiter),Time)],[])]
%~ cpc :- if(    initiates(request(Agent,Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl([holds(beWaiter7(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(request(Agent,Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl([holds(beWaiter7(Waiter),Time)],[]))],       [])]
cl(    (     request(Agent,Waiter,Bill)initiates beWaiter8(Waiter)at Time if     cl(holds(beWaiter7(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(request(Agent,Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl(holds(beWaiter7(Waiter),Time),[])),       []).
 %  % =================================.


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3146).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      billOf(Restaurant) =             Bill ,     holds(beWaiter8(Waiter),Time)) ->         happens(pickUp(Waiter,Bill),Time)
%~ cpc :- ( waiterOf(Restaurant) =         Waiter  ,      billOf(Restaurant) =             Bill ,     holds(beWaiter8(Waiter),Time)) ->         happens(pickUp(Waiter,Bill),Time)
%~ ooo :- [   cl(    [   happens(pickUp(Waiter,Bill),Time)],       [      equals(waiterOf(Restaurant),Waiter),           equals(billOf(Restaurant),Bill),           holds(beWaiter8(Waiter),Time)])]
cl(    happens(pickUp(Waiter,Bill),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(billOf(Restaurant),Bill) ,           holds(beWaiter8(Waiter),Time))).
 %  cl(    happens(pickUp(Waiter,Bill),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(billOf(Restaurant),Bill) ,           holds(beWaiter8(Waiter),Time))).
 %  % =================================.


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3152).
%~ From E:
%~ 
%~ holds(beWaiter8(Waiter),Time) ->         terminates_at(pickUp(Waiter,Bill),beWaiter8(Waiter),Time)
%~ cpc :- holds(beWaiter8(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter8(Waiter),Time)],[])]
%~ cpc :- if(    terminates(pickUp(Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl([holds(beWaiter8(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(pickUp(Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl([holds(beWaiter8(Waiter),Time)],[]))],       [])]
cl(    (     pickUp(Waiter,Bill)terminates beWaiter8(Waiter)at Time if     cl(holds(beWaiter8(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(pickUp(Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl(holds(beWaiter8(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3158).
%~ From E:
%~ 
%~ holds(beWaiter8(Waiter),Time) ->         initiates_at(pickUp(Waiter,Bill),beWaiter9(Waiter),Time)
%~ cpc :- holds(beWaiter8(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter8(Waiter),Time)],[])]
%~ cpc :- if(    initiates(pickUp(Waiter,Bill),at(beWaiter9(Waiter),Time)),       cl([holds(beWaiter8(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(pickUp(Waiter,Bill),at(beWaiter9(Waiter),Time)),       cl([holds(beWaiter8(Waiter),Time)],[]))],       [])]
cl(    (     pickUp(Waiter,Bill)initiates beWaiter9(Waiter)at Time if     cl(holds(beWaiter8(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(pickUp(Waiter,Bill),at(beWaiter9(Waiter),Time)),       cl(holds(beWaiter8(Waiter),Time),[])),       []).
 %  % =================================.


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3164).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      billOf(Restaurant) =             Bill ,       tableOf(Restaurant) =             Table ,     holds(beWaiter9(Waiter),Time)) ->         happens(placeOn(Waiter,Bill,Table),Time)
%~ cpc :- ( waiterOf(Restaurant) =         Waiter  ,      billOf(Restaurant) =             Bill ,       tableOf(Restaurant) =             Table ,     holds(beWaiter9(Waiter),Time)) ->         happens(placeOn(Waiter,Bill,Table),Time)
%~ ooo :- [   cl(    [   happens(placeOn(Waiter,Bill,Table),Time)],       [      equals(waiterOf(Restaurant),Waiter),           equals(billOf(Restaurant),Bill),           equals(tableOf(Restaurant),Table),           holds(beWaiter9(Waiter),Time)])]
cl(    happens(placeOn(Waiter,Bill,Table),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(billOf(Restaurant),Bill) ,           equals(tableOf(Restaurant),Table) ,           holds(beWaiter9(Waiter),Time))).
 %  cl(    happens(placeOn(Waiter,Bill,Table),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(billOf(Restaurant),Bill) ,           equals(tableOf(Restaurant),Table) ,           holds(beWaiter9(Waiter),Time))).
 %  % =================================.


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3171).
%~ From E:
%~ 
%~ holds(beWaiter9(Waiter),Time) ->         terminates_at(placeOn(Waiter,Bill,Table),beWaiter9(Waiter),Time)
%~ cpc :- holds(beWaiter9(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter9(Waiter),Time)],[])]
%~ cpc :- if(    terminates(placeOn(Waiter,Bill,Table),at(beWaiter9(Waiter),Time)),       cl([holds(beWaiter9(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(placeOn(Waiter,Bill,Table),at(beWaiter9(Waiter),Time)),       cl([holds(beWaiter9(Waiter),Time)],[]))],       [])]
cl(    (     placeOn(Waiter,Bill,Table)terminates beWaiter9(Waiter)at Time if     cl(holds(beWaiter9(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(placeOn(Waiter,Bill,Table),at(beWaiter9(Waiter),Time)),       cl(holds(beWaiter9(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3177).
%~ From E:
%~ 
%~ holds(beWaiter9(Waiter),Time) ->         initiates_at(placeOn(Waiter,Bill,Table),beWaiter0(Waiter),Time)
%~ cpc :- holds(beWaiter9(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter9(Waiter),Time)],[])]
%~ cpc :- if(    initiates(placeOn(Waiter,Bill,Table),at(beWaiter0(Waiter),Time)),       cl([holds(beWaiter9(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(placeOn(Waiter,Bill,Table),at(beWaiter0(Waiter),Time)),       cl([holds(beWaiter9(Waiter),Time)],[]))],       [])]
cl(    (     placeOn(Waiter,Bill,Table)initiates beWaiter0(Waiter)at Time if     cl(holds(beWaiter9(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(placeOn(Waiter,Bill,Table),at(beWaiter0(Waiter),Time)),       cl(holds(beWaiter9(Waiter),Time),[])),       []).
 %  % =================================.

% fluent BeCook0(cook)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3181).
%~ From E:
%~ 
%~ fluent( beCook0(cook))
%~ cpc :- fluents([beCook0/1])
%~ ooo :- [   cl([fluents([beCook0/1])],[])]
%~ cpc :- mpred_prop(beCook0(cook),fluent)
%~ ooo :- [   cl([mpred_prop(beCook0(cook),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3181).
cl(mpred_prop(beCook0(cook),fluent),[]),cl(fluents(beCook0/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3184).
% fluent BeCook1(cook)
%~ From E:
%~ 
%~ fluent( beCook1(cook))
%~ cpc :- fluents([beCook1/1])
%~ ooo :- [   cl([fluents([beCook1/1])],[])]
%~ cpc :- mpred_prop(beCook1(cook),fluent)
%~ ooo :- [   cl([mpred_prop(beCook1(cook),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3184).
cl(mpred_prop(beCook1(cook),fluent),[]),cl(fluents(beCook1/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3186).
% xor BeCook0, BeCook1
%~ From E:
%~ 
%~ xor( [beCook0,beCook1])
%~ cpc :- xor( [beCook0,beCook1])
%~ ooo :- [   cl([xor([beCook0,beCook1])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3186).
cl(xor((beCook0,beCook1)),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3188).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3188).
%~ From E:
%~ 
%~ holds(beCook0(Cook),Time) ->         terminates_at(order(Agent,Cook,Food),beCook0(Cook),Time)
%~ cpc :- holds(beCook0(Cook),Time)
%~ ooo :- [   cl([holds(beCook0(Cook),Time)],[])]
%~ cpc :- if(    terminates(order(Agent,Cook,Food),at(beCook0(Cook),Time)),       cl([holds(beCook0(Cook),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(order(Agent,Cook,Food),at(beCook0(Cook),Time)),       cl([holds(beCook0(Cook),Time)],[]))],       [])]
cl(    (     order(Agent,Cook,Food)terminates beCook0(Cook)at Time if     cl(holds(beCook0(Cook),Time),[])),       []).
 %  cl(    if(    terminates(order(Agent,Cook,Food),at(beCook0(Cook),Time)),       cl(holds(beCook0(Cook),Time),[])),       []).
 %  % =================================.


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3195).
%~ From E:
%~ 
%~ holds(beCook0(Cook),Time) ->         initiates_at(order(Agent,Cook,Food),beCook1(Cook),Time)
%~ cpc :- holds(beCook0(Cook),Time)
%~ ooo :- [   cl([holds(beCook0(Cook),Time)],[])]
%~ cpc :- if(    initiates(order(Agent,Cook,Food),at(beCook1(Cook),Time)),       cl([holds(beCook0(Cook),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(order(Agent,Cook,Food),at(beCook1(Cook),Time)),       cl([holds(beCook0(Cook),Time)],[]))],       [])]
cl(    (     order(Agent,Cook,Food)initiates beCook1(Cook)at Time if     cl(holds(beCook0(Cook),Time),[])),       []).
 %  cl(    if(    initiates(order(Agent,Cook,Food),at(beCook1(Cook),Time)),       cl(holds(beCook0(Cook),Time),[])),       []).
 %  % =================================.

% event FoodPrepare(agent,food)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3199).
%~ From E:
%~ 
%~ event( foodPrepare(agent,food))
%~ cpc :- events([foodPrepare/2])
%~ ooo :- [   cl([events([foodPrepare/2])],[])]
%~ cpc :- actions([foodPrepare/2])
%~ ooo :- [   cl([actions([foodPrepare/2])],[])]
%~ cpc :- mpred_prop(foodPrepare(agent,food),action)
%~ ooo :- [   cl([mpred_prop(foodPrepare(agent,food),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3199).
( cl(events(foodPrepare/2),[])  ,    cl(mpred_prop(foodPrepare(agent,food),action),[]) ,     cl(actions(foodPrepare/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3202).
% fluent FoodPrepared(food)
%~ From E:
%~ 
%~ fluent( foodPrepared(food))
%~ cpc :- fluents([foodPrepared/1])
%~ ooo :- [   cl([fluents([foodPrepared/1])],[])]
%~ cpc :- mpred_prop(foodPrepared(food),fluent)
%~ ooo :- [   cl([mpred_prop(foodPrepared(food),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3202).
cl(mpred_prop(foodPrepared(food),fluent),[]),cl(fluents(foodPrepared/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3204).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).
%~ From E:
%~ 
%~ initiates_at(foodPrepare(Agent,Food),foodPrepared(Food),Time)
%~ cpc :- initiates(foodPrepare(Agent,Food),foodPrepared(Food),Time)
%~ ooo :- [   cl([initiates(foodPrepare(Agent,Food),foodPrepared(Food),Time)],[])]
cl(initiates(foodPrepare(Agent,Food),foodPrepared(Food),Time),[]).
 %  cl(initiates(foodPrepare(Agent,Food),foodPrepared(Food),Time),[]).
 %  % =================================.


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3210).
%~ From E:
%~ 
%~ exists( Location,   happens(foodPrepare(Agent,Food),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Food,Location),Time)))
%~ cpc :- exists( Location,   happens(foodPrepare(Agent,Food),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Food,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(foodPrepare(Agent,Food),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(foodPrepare(Agent,Food),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(foodPrepare(Agent,Food),Time)))),       []).
 %  % =================================.


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3216).
%~ From E:
%~ 
%~ (     holds(beCook1(Cook),Time) ,     holds(knowOrder(Cook,Agent,Food),Time)) ->         happens(foodPrepare(Cook,Food),Time)
%~ cpc :- (     holds(beCook1(Cook),Time) ,     holds(knowOrder(Cook,Agent,Food),Time)) ->         happens(foodPrepare(Cook,Food),Time)
%~ ooo :- [   cl(    [   happens(foodPrepare(Cook,Food),Time)],       [      holds(beCook1(Cook),Time),           holds(knowOrder(Cook,Agent,Food),Time)])]
cl(    happens(foodPrepare(Cook,Food),Time),       (           holds(beCook1(Cook),Time) ,           holds(knowOrder(Cook,Agent,Food),Time))).
 %  cl(    happens(foodPrepare(Cook,Food),Time),       (           holds(beCook1(Cook),Time) ,           holds(knowOrder(Cook,Agent,Food),Time))).
 %  % =================================.


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3221).
%~ From E:
%~ 
%~ holds(beCook1(Cook),Time) ->         terminates_at(foodPrepare(Cook,Food),beCook1(Cook),Time)
%~ cpc :- holds(beCook1(Cook),Time)
%~ ooo :- [   cl([holds(beCook1(Cook),Time)],[])]
%~ cpc :- if(    terminates(foodPrepare(Cook,Food),at(beCook1(Cook),Time)),       cl([holds(beCook1(Cook),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(foodPrepare(Cook,Food),at(beCook1(Cook),Time)),       cl([holds(beCook1(Cook),Time)],[]))],       [])]
cl(    (     foodPrepare(Cook,Food)terminates beCook1(Cook)at Time if     cl(holds(beCook1(Cook),Time),[])),       []).
 %  cl(    if(    terminates(foodPrepare(Cook,Food),at(beCook1(Cook),Time)),       cl(holds(beCook1(Cook),Time),[])),       []).
 %  % =================================.


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3227).
%~ From E:
%~ 
%~ holds(beCook1(Cook),Time) ->         initiates_at(foodPrepare(Cook,Food),beCook0(Cook),Time)
%~ cpc :- holds(beCook1(Cook),Time)
%~ ooo :- [   cl([holds(beCook1(Cook),Time)],[])]
%~ cpc :- if(    initiates(foodPrepare(Cook,Food),at(beCook0(Cook),Time)),       cl([holds(beCook1(Cook),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(foodPrepare(Cook,Food),at(beCook0(Cook),Time)),       cl([holds(beCook1(Cook),Time)],[]))],       [])]
cl(    (     foodPrepare(Cook,Food)initiates beCook0(Cook)at Time if     cl(holds(beCook1(Cook),Time),[])),       []).
 %  cl(    if(    initiates(foodPrepare(Cook,Food),at(beCook0(Cook),Time)),       cl(holds(beCook1(Cook),Time),[])),       []).
 %  % =================================.

% event Pay(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3231).
%~ From E:
%~ 
%~ event( pay(agent,agent))
%~ cpc :- events([pay/2])
%~ ooo :- [   cl([events([pay/2])],[])]
%~ cpc :- actions([pay/2])
%~ ooo :- [   cl([actions([pay/2])],[])]
%~ cpc :- mpred_prop(pay(agent,agent),action)
%~ ooo :- [   cl([mpred_prop(pay(agent,agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3231).
( cl(events(pay/2),[])  ,    cl(mpred_prop(pay(agent,agent),action),[]) ,     cl(actions(pay/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3234).
% event Tip(agent,agent)
%~ From E:
%~ 
%~ event( tip(agent,agent))
%~ cpc :- events([tip/2])
%~ ooo :- [   cl([events([tip/2])],[])]
%~ cpc :- actions([tip/2])
%~ ooo :- [   cl([actions([tip/2])],[])]
%~ cpc :- mpred_prop(tip(agent,agent),action)
%~ ooo :- [   cl([mpred_prop(tip(agent,agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3234).
( cl(events(tip/2),[])  ,    cl(mpred_prop(tip(agent,agent),action),[]) ,     cl(actions(tip/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3236).
% [agent,physobj,time]
% Happens(LieOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3238).
%~ From E:
%~ 
%~ exists( Room,   happens(lieOn(Agent,Physobj),Time) ->         (     holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Physobj,Room),Time)))
%~ cpc :- exists( Room,   happens(lieOn(Agent,Physobj),Time) ->         (     holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Physobj,Room),Time)))
%~ ooo :- [   cl(    [   exists( Room,   (     (         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Physobj,Room),Time)) ;     not( happens(lieOn(Agent,Physobj),Time))))],       [])]
cl(    exists( Room,   (     (         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Physobj,Room),Time)) ;     not( happens(lieOn(Agent,Physobj),Time)))),       []).
 %  cl(    exists( Room,   (     (         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Physobj,Room),Time)) ;     not( happens(lieOn(Agent,Physobj),Time)))),       []).
 %  % =================================.


% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3243).
%~ From E:
%~ 
%~ exists( Room,   happens(sitOn(Agent,Physobj),Time) ->         (     holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Physobj,Room),Time)))
%~ cpc :- exists( Room,   happens(sitOn(Agent,Physobj),Time) ->         (     holds(at_loc(Agent,Room),Time) ,     holds(at_loc(Physobj,Room),Time)))
%~ ooo :- [   cl(    [   exists( Room,   (     (         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Physobj,Room),Time)) ;     not( happens(sitOn(Agent,Physobj),Time))))],       [])]
cl(    exists( Room,   (     (         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Physobj,Room),Time)) ;     not( happens(sitOn(Agent,Physobj),Time)))),       []).
 %  cl(    exists( Room,   (     (         holds(at_loc(Agent,Room),Time) ,         holds(at_loc(Physobj,Room),Time)) ;     not( happens(sitOn(Agent,Physobj),Time)))),       []).
 %  % =================================.

% event LieOn(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3247).
%~ From E:
%~ 
%~ event( lieOn(agent,physobj))
%~ cpc :- events([lieOn/2])
%~ ooo :- [   cl([events([lieOn/2])],[])]
%~ cpc :- actions([lieOn/2])
%~ ooo :- [   cl([actions([lieOn/2])],[])]
%~ cpc :- mpred_prop(lieOn(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(lieOn(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3247).
( cl(events(lieOn/2),[])  ,    cl(mpred_prop(lieOn(agent,physobj),action),[]) ,     cl(actions(lieOn/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3250).
% event SitOn(agent,physobj)
%~ From E:
%~ 
%~ event( sitOn(agent,physobj))
%~ cpc :- events([sitOn/2])
%~ ooo :- [   cl([events([sitOn/2])],[])]
%~ cpc :- actions([sitOn/2])
%~ ooo :- [   cl([actions([sitOn/2])],[])]
%~ cpc :- mpred_prop(sitOn(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(sitOn(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3250).
( cl(events(sitOn/2),[])  ,    cl(mpred_prop(sitOn(agent,physobj),action),[]) ,     cl(actions(sitOn/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3252).
% event RiseFrom(agent,physobj)
%~ From E:
%~ 
%~ event( riseFrom(agent,physobj))
%~ cpc :- events([riseFrom/2])
%~ ooo :- [   cl([events([riseFrom/2])],[])]
%~ cpc :- actions([riseFrom/2])
%~ ooo :- [   cl([actions([riseFrom/2])],[])]
%~ cpc :- mpred_prop(riseFrom(agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(riseFrom(agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3252).
( cl(events(riseFrom/2),[])  ,    cl(mpred_prop(riseFrom(agent,physobj),action),[]) ,     cl(actions(riseFrom/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3254).
% fluent LyingOn(agent,physobj)
%~ From E:
%~ 
%~ fluent( lyingOn(agent,physobj))
%~ cpc :- fluents([lyingOn/2])
%~ ooo :- [   cl([fluents([lyingOn/2])],[])]
%~ cpc :- mpred_prop(lyingOn(agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(lyingOn(agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3254).
cl(mpred_prop(lyingOn(agent,physobj),fluent),[]),cl(fluents(lyingOn/2),[]).

% fluent SittingOn(agent,physobj)
%~ From E:
%~ 
%~ fluent( sittingOn(agent,physobj))
%~ cpc :- fluents([sittingOn/2])
%~ ooo :- [   cl([fluents([sittingOn/2])],[])]
%~ cpc :- mpred_prop(sittingOn(agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(sittingOn(agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3254).
cl(mpred_prop(sittingOn(agent,physobj),fluent),[]),cl(fluents(sittingOn/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3256).
% fluent Standing(agent)
%~ From E:
%~ 
%~ fluent( standing(agent))
%~ cpc :- fluents([standing/1])
%~ ooo :- [   cl([fluents([standing/1])],[])]
%~ cpc :- mpred_prop(standing(agent),fluent)
%~ ooo :- [   cl([mpred_prop(standing(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3256).
cl(mpred_prop(standing(agent),fluent),[]),cl(fluents(standing/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3258).
% fluent Lying(agent)
%~ From E:
%~ 
%~ fluent( lying(agent))
%~ cpc :- fluents([lying/1])
%~ ooo :- [   cl([fluents([lying/1])],[])]
%~ cpc :- mpred_prop(lying(agent),fluent)
%~ ooo :- [   cl([mpred_prop(lying(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3258).
cl(mpred_prop(lying(agent),fluent),[]),cl(fluents(lying/1),[]).

% fluent Sitting(agent)
%~ From E:
%~ 
%~ fluent( sitting(agent))
%~ cpc :- fluents([sitting/1])
%~ ooo :- [   cl([fluents([sitting/1])],[])]
%~ cpc :- mpred_prop(sitting(agent),fluent)
%~ ooo :- [   cl([mpred_prop(sitting(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3258).
cl(mpred_prop(sitting(agent),fluent),[]),cl(fluents(sitting/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3260).
% noninertial Lying
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(lying)))
:-( call_pel_directive( noninertial(lying))).

% noninertial Sitting
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3260).
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(sitting)))
:-( call_pel_directive( noninertial(sitting))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3263).
% xor Lying, Sitting, Standing
%~ From E:
%~ 
%~ xor( [lying,sitting,standing])
%~ cpc :- xor( [lying,sitting,standing])
%~ ooo :- [   cl([xor([lying,sitting,standing])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3263).
cl(xor((lying,sitting,standing)),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3265).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
%~ From E:
%~ 
%~ holds(lyingOn(Agent,Physobj),Time) ->         holds(lying(Agent),Time)
%~ cpc :- holds(lyingOn(Agent,Physobj),Time) ->         holds(lying(Agent),Time)
%~ ooo :- [   cl(    [   holds(lying(Agent),Time)],       [      holds(lyingOn(Agent,Physobj),Time)])]
cl(holds(lying(Agent),Time),holds(lyingOn(Agent,Physobj),Time)).
 %  cl(holds(lying(Agent),Time),holds(lyingOn(Agent,Physobj),Time)).
 %  % =================================.


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3270).
%~ From E:
%~ 
%~ holds(sittingOn(Agent,Physobj),Time) ->         holds(sitting(Agent),Time)
%~ cpc :- holds(sittingOn(Agent,Physobj),Time) ->         holds(sitting(Agent),Time)
%~ ooo :- [   cl(    [   holds(sitting(Agent),Time)],       [      holds(sittingOn(Agent,Physobj),Time)])]
cl(holds(sitting(Agent),Time),holds(sittingOn(Agent,Physobj),Time)).
 %  cl(holds(sitting(Agent),Time),holds(sittingOn(Agent,Physobj),Time)).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3274).
%~ From E:
%~ 
%~ (     holds(lyingOn(Agent,Physobj1),Time) ,     holds(lyingOn(Agent,Physobj2),Time)) ->         Physobj1=Physobj2
%~ cpc :- (     holds(lyingOn(Agent,Physobj1),Time) ,     holds(lyingOn(Agent,Physobj2),Time)) ->         Physobj1=Physobj2
%~ ooo :- [   cl(    [   equals(Physobj1,Physobj2)],       [      holds(lyingOn(Agent,Physobj1),Time),           holds(lyingOn(Agent,Physobj2),Time)])]
cl( equals(Physobj1,Physobj2),   (     holds(lyingOn(Agent,Physobj1),Time) ,     holds(lyingOn(Agent,Physobj2),Time))).
 %  cl( equals(Physobj1,Physobj2),   (     holds(lyingOn(Agent,Physobj1),Time) ,     holds(lyingOn(Agent,Physobj2),Time))).
 %  % =================================.


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3279).
%~ From E:
%~ 
%~ (     holds(sittingOn(Agent,Physobj1),Time) ,     holds(sittingOn(Agent,Physobj2),Time)) ->         Physobj1=Physobj2
%~ cpc :- (     holds(sittingOn(Agent,Physobj1),Time) ,     holds(sittingOn(Agent,Physobj2),Time)) ->         Physobj1=Physobj2
%~ ooo :- [   cl(    [   equals(Physobj1,Physobj2)],       [      holds(sittingOn(Agent,Physobj1),Time),           holds(sittingOn(Agent,Physobj2),Time)])]
cl( equals(Physobj1,Physobj2),   (     holds(sittingOn(Agent,Physobj1),Time) ,     holds(sittingOn(Agent,Physobj2),Time))).
 %  cl( equals(Physobj1,Physobj2),   (     holds(sittingOn(Agent,Physobj1),Time) ,     holds(sittingOn(Agent,Physobj2),Time))).
 %  % =================================.


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3284).
%~ From E:
%~ 
%~ holds(standing(Agent),Time) ->         initiates_at(lieOn(Agent,Physobj),lyingOn(Agent,Physobj),Time)
%~ cpc :- holds(standing(Agent),Time)
%~ ooo :- [   cl([holds(standing(Agent),Time)],[])]
%~ cpc :- if(    initiates(lieOn(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl([holds(standing(Agent),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(lieOn(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl([holds(standing(Agent),Time)],[]))],       [])]
cl(    (     lieOn(Agent,Physobj)initiates lyingOn(Agent,Physobj)at Time if     cl(holds(standing(Agent),Time),[])),       []).
 %  cl(    if(    initiates(lieOn(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl(holds(standing(Agent),Time),[])),       []).
 %  % =================================.


% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3290).
%~ From E:
%~ 
%~ terminates_at(lieOn(Agent,Physobj),standing(Agent),Time)
%~ cpc :- terminates(lieOn(Agent,Physobj),standing(Agent),Time)
%~ ooo :- [   cl([terminates(lieOn(Agent,Physobj),standing(Agent),Time)],[])]
cl(terminates(lieOn(Agent,Physobj),standing(Agent),Time),[]).
 %  cl(terminates(lieOn(Agent,Physobj),standing(Agent),Time),[]).
 %  % =================================.


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3295).
%~ From E:
%~ 
%~ holds(standing(Agent),Time) ->         initiates_at(sitOn(Agent,Physobj),sittingOn(Agent,Physobj),Time)
%~ cpc :- holds(standing(Agent),Time)
%~ ooo :- [   cl([holds(standing(Agent),Time)],[])]
%~ cpc :- if(    initiates(sitOn(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl([holds(standing(Agent),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(sitOn(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl([holds(standing(Agent),Time)],[]))],       [])]
cl(    (     sitOn(Agent,Physobj)initiates sittingOn(Agent,Physobj)at Time if     cl(holds(standing(Agent),Time),[])),       []).
 %  cl(    if(    initiates(sitOn(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl(holds(standing(Agent),Time),[])),       []).
 %  % =================================.


% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3301).
%~ From E:
%~ 
%~ terminates_at(sitOn(Agent,Physobj),standing(Agent),Time)
%~ cpc :- terminates(sitOn(Agent,Physobj),standing(Agent),Time)
%~ ooo :- [   cl([terminates(sitOn(Agent,Physobj),standing(Agent),Time)],[])]
cl(terminates(sitOn(Agent,Physobj),standing(Agent),Time),[]).
 %  cl(terminates(sitOn(Agent,Physobj),standing(Agent),Time),[]).
 %  % =================================.


% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3306).
%~ From E:
%~ 
%~ (     holds(sittingOn(Agent,Physobj),Time) ;     holds(lyingOn(Agent,Physobj),Time)) ->         initiates_at(riseFrom(Agent,Physobj),standing(Agent),Time)
%~ cpc :- holds(lyingOn(Agent,Physobj),Time)
%~ ooo :- [   cl([holds(lyingOn(Agent,Physobj),Time)],[])]
%~ cpc :- not( holds(sittingOn(Agent,Physobj),Time))
%~ ooo :- [   cl([],[holds(sittingOn(Agent,Physobj),Time)])]
%~ cpc :- (     holds(sittingOn(Agent,Physobj),Time) ;     holds(lyingOn(Agent,Physobj),Time))
%~ ooo :- [   cl(    [   holds(sittingOn(Agent,Physobj),Time),     holds(lyingOn(Agent,Physobj),Time)],       [])]
%~ cpc :- if(    initiates(riseFrom(Agent,Physobj),at(standing(Agent),Time)),       cl(       [   holds(sittingOn(Agent,Physobj),Time),     holds(lyingOn(Agent,Physobj),Time)],             []))
%~ ooo :- [   cl(    [   if(    initiates(riseFrom(Agent,Physobj),at(standing(Agent),Time)),       cl(       [   holds(sittingOn(Agent,Physobj),Time),     holds(lyingOn(Agent,Physobj),Time)],             []))],       [])]
cl(    (     riseFrom(Agent,Physobj)initiates standing(Agent)at Time if     cl(      (     holds(sittingOn(Agent,Physobj),Time) ,     holds(lyingOn(Agent,Physobj),Time)),           [])),       []).
 %  cl(    if(    initiates(riseFrom(Agent,Physobj),at(standing(Agent),Time)),       cl(       (     holds(sittingOn(Agent,Physobj),Time) ,     holds(lyingOn(Agent,Physobj),Time)),             [])),       []).
 %  % =================================.


% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3313).
%~ From E:
%~ 
%~ holds(lyingOn(Agent,Physobj),Time) ->         terminates_at(riseFrom(Agent,Physobj),lyingOn(Agent,Physobj),Time)
%~ cpc :- holds(lyingOn(Agent,Physobj),Time)
%~ ooo :- [   cl([holds(lyingOn(Agent,Physobj),Time)],[])]
%~ cpc :- if(    terminates(riseFrom(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl([holds(lyingOn(Agent,Physobj),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(riseFrom(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl([holds(lyingOn(Agent,Physobj),Time)],[]))],       [])]
cl(    (     riseFrom(Agent,Physobj)terminates lyingOn(Agent,Physobj)at Time if     cl(holds(lyingOn(Agent,Physobj),Time),[])),       []).
 %  cl(    if(    terminates(riseFrom(Agent,Physobj),at(lyingOn(Agent,Physobj),Time)),       cl(holds(lyingOn(Agent,Physobj),Time),[])),       []).
 %  % =================================.


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3319).
%~ From E:
%~ 
%~ holds(sittingOn(Agent,Physobj),Time) ->         terminates_at(riseFrom(Agent,Physobj),sittingOn(Agent,Physobj),Time)
%~ cpc :- holds(sittingOn(Agent,Physobj),Time)
%~ ooo :- [   cl([holds(sittingOn(Agent,Physobj),Time)],[])]
%~ cpc :- if(    terminates(riseFrom(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl([holds(sittingOn(Agent,Physobj),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(riseFrom(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl([holds(sittingOn(Agent,Physobj),Time)],[]))],       [])]
cl(    (     (         riseFrom(Agent,Physobj) terminates         sittingOn(Agent,Physobj)at Time) if     cl(holds(sittingOn(Agent,Physobj),Time),[])),       []).
 %  cl(    if(    terminates(riseFrom(Agent,Physobj),at(sittingOn(Agent,Physobj),Time)),       cl(holds(sittingOn(Agent,Physobj),Time),[])),       []).
 %  % =================================.

% event Greet(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3323).
%~ From E:
%~ 
%~ event( greet(agent,agent))
%~ cpc :- events([greet/2])
%~ ooo :- [   cl([events([greet/2])],[])]
%~ cpc :- actions([greet/2])
%~ ooo :- [   cl([actions([greet/2])],[])]
%~ cpc :- mpred_prop(greet(agent,agent),action)
%~ ooo :- [   cl([mpred_prop(greet(agent,agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3323).
( cl(events(greet/2),[])  ,    cl(mpred_prop(greet(agent,agent),action),[]) ,     cl(actions(greet/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3326).
% event SayGoodbye(agent,agent)
%~ From E:
%~ 
%~ event( sayGoodbye(agent,agent))
%~ cpc :- events([sayGoodbye/2])
%~ ooo :- [   cl([events([sayGoodbye/2])],[])]
%~ cpc :- actions([sayGoodbye/2])
%~ ooo :- [   cl([actions([sayGoodbye/2])],[])]
%~ cpc :- mpred_prop(sayGoodbye(agent,agent),action)
%~ ooo :- [   cl([mpred_prop(sayGoodbye(agent,agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3326).
( cl(events(sayGoodbye/2),[])  ,    cl(mpred_prop(sayGoodbye(agent,agent),action),[]) ,     cl(actions(sayGoodbye/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3328).
% [agent1,agent2,time]
% Happens(Greet(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3330).
%~ From E:
%~ 
%~ exists( Location,   happens(greet(Agent1,Agent2),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ cpc :- exists( Location,   happens(greet(Agent1,Agent2),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(greet(Agent1,Agent2),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(greet(Agent1,Agent2),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(greet(Agent1,Agent2),Time)))),       []).
 %  % =================================.


% [agent1,agent2,time]
% Happens(SayGoodbye(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3335).
%~ From E:
%~ 
%~ exists( Location,   happens(sayGoodbye(Agent1,Agent2),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ cpc :- exists( Location,   happens(sayGoodbye(Agent1,Agent2),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(sayGoodbye(Agent1,Agent2),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(sayGoodbye(Agent1,Agent2),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(sayGoodbye(Agent1,Agent2),Time)))),       []).
 %  % =================================.

% event Order(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3339).
%~ From E:
%~ 
%~ event( order(agent,agent,physobj))
%~ cpc :- events([order/3])
%~ ooo :- [   cl([events([order/3])],[])]
%~ cpc :- actions([order/3])
%~ ooo :- [   cl([actions([order/3])],[])]
%~ cpc :- mpred_prop(order(agent,agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(order(agent,agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3339).
( cl(events(order/3),[])  ,    cl(mpred_prop(order(agent,agent,physobj),action),[]) ,     cl(actions(order/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3342).
% fluent KnowOrder(agent,agent,physobj)
%~ From E:
%~ 
%~ fluent( knowOrder(agent,agent,physobj))
%~ cpc :- fluents([knowOrder/3])
%~ ooo :- [   cl([fluents([knowOrder/3])],[])]
%~ cpc :- mpred_prop(knowOrder(agent,agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(knowOrder(agent,agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3342).
cl(mpred_prop(knowOrder(agent,agent,physobj),fluent),[]),cl(fluents(knowOrder/3),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3344).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
%~ From E:
%~ 
%~ initiates_at( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time)
%~ cpc :- initiates( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time)
%~ ooo :- [   cl(    [   initiates( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time)],       [])]
cl(    initiates( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time),       []).
 %  cl(    initiates( order(Agent1,Agent2,Physobj),   knowOrder(Agent2,Agent1,Physobj),     Time),       []).
 %  % =================================.


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3350).
%~ From E:
%~ 
%~ exists( Location,   happens(order(Agent1,Agent2,Physobj),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ cpc :- exists( Location,   happens(order(Agent1,Agent2,Physobj),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(order(Agent1,Agent2,Physobj),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(order(Agent1,Agent2,Physobj),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(order(Agent1,Agent2,Physobj),Time)))),       []).
 %  % =================================.

% event Request(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3354).
%~ From E:
%~ 
%~ event( request(agent,agent,physobj))
%~ cpc :- events([request/3])
%~ ooo :- [   cl([events([request/3])],[])]
%~ cpc :- actions([request/3])
%~ ooo :- [   cl([actions([request/3])],[])]
%~ cpc :- mpred_prop(request(agent,agent,physobj),action)
%~ ooo :- [   cl([mpred_prop(request(agent,agent,physobj),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3354).
( cl(events(request/3),[])  ,    cl(mpred_prop(request(agent,agent,physobj),action),[]) ,     cl(actions(request/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3357).
% fluent KnowRequest(agent,agent,physobj)
%~ From E:
%~ 
%~ fluent( knowRequest(agent,agent,physobj))
%~ cpc :- fluents([knowRequest/3])
%~ ooo :- [   cl([fluents([knowRequest/3])],[])]
%~ cpc :- mpred_prop(knowRequest(agent,agent,physobj),fluent)
%~ ooo :- [   cl([mpred_prop(knowRequest(agent,agent,physobj),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3357).
cl(mpred_prop(knowRequest(agent,agent,physobj),fluent),[]),cl(fluents(knowRequest/3),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3359).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
%~ From E:
%~ 
%~ initiates_at( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time)
%~ cpc :- initiates( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time)
%~ ooo :- [   cl(    [   initiates( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time)],       [])]
cl(    initiates( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time),       []).
 %  cl(    initiates( request(Agent1,Agent2,Physobj),   knowRequest(Agent2,Agent1,Physobj),     Time),       []).
 %  % =================================.


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3365).
%~ From E:
%~ 
%~ exists( Location,   happens(request(Agent1,Agent2,Physobj),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ cpc :- exists( Location,   happens(request(Agent1,Agent2,Physobj),Time) ->         (     holds(at_loc(Agent1,Location),Time) ,     holds(at_loc(Agent2,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(request(Agent1,Agent2,Physobj),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(request(Agent1,Agent2,Physobj),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent1,Location),Time) ,         holds(at_loc(Agent2,Location),Time)) ;     not( happens(request(Agent1,Agent2,Physobj),Time)))),       []).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Diving.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; scuba diving
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3391).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3391).
%~ From E:
%~ 
%~ subsort(agent,object)
subsort(agent,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3393).
% sort diver: agent
%~ From E:
%~ 
%~ subsort(diver,agent)
subsort(diver,agent).

% sort depth: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3393).
%~ From E:
%~ 
%~ subsort(depth,integer)
subsort(depth,integer).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3395).
% sort boat: object
%~ From E:
%~ 
%~ subsort(boat,object)
subsort(boat,object).
%; reference line, anchor line, shotline, SMB line, ...

% sort line: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3397).
%~ From E:
%~ 
%~ subsort(line,object)
subsort(line,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3400).
% sort equipment: object
%~ From E:
%~ 
%~ subsort(equipment,object)
subsort(equipment,object).

% sort weight: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3400).
%~ From E:
%~ 
%~ subsort(weight,equipment)
subsort(weight,equipment).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3402).
% sort fin: equipment
%~ From E:
%~ 
%~ subsort(fin,equipment)
subsort(fin,equipment).

% sort airtank: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3402).
%~ From E:
%~ 
%~ subsort(airtank,equipment)
subsort(airtank,equipment).
%; buoyancy compensator (BC)
%; buoyancy control device (BCD)

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3407).
% sort computer: equipment
%~ From E:
%~ 
%~ subsort(computer,equipment)
subsort(computer,equipment).

% sort bc: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3407).
%~ From E:
%~ 
%~ subsort(bc,equipment)
subsort(bc,equipment).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3410).
% fluent AtDepth(object,depth)
%~ From E:
%~ 
%~ fluent( atDepth(object,depth))
%~ cpc :- fluents([atDepth/2])
%~ ooo :- [   cl([fluents([atDepth/2])],[])]
%~ cpc :- mpred_prop(atDepth(object,depth),fluent)
%~ ooo :- [   cl([mpred_prop(atDepth(object,depth),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3410).
cl(mpred_prop(atDepth(object,depth),fluent),[]),cl(fluents(atDepth/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3412).
% [object,depth1,depth2,time]
% HoldsAt(AtDepth(object,depth1),time) &
% HoldsAt(AtDepth(object,depth2),time) ->
% depth1 = depth2.
%~ From E:
%~ 
%~ (     holds(atDepth(Object,Depth1),Time) ,     holds(atDepth(Object,Depth2),Time)) ->         Depth1=Depth2
%~ cpc :- (     holds(atDepth(Object,Depth1),Time) ,     holds(atDepth(Object,Depth2),Time)) ->         Depth1=Depth2
%~ ooo :- [   cl(    [   equals(Depth1,Depth2)],       [      holds(atDepth(Object,Depth1),Time),           holds(atDepth(Object,Depth2),Time)])]
cl( equals(Depth1,Depth2),   (     holds(atDepth(Object,Depth1),Time) ,     holds(atDepth(Object,Depth2),Time))).
 %  cl( equals(Depth1,Depth2),   (     holds(atDepth(Object,Depth1),Time) ,     holds(atDepth(Object,Depth2),Time))).
 %  % =================================.

% event Ascend(diver,depth)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3416).
%~ From E:
%~ 
%~ event( ascend(diver,depth))
%~ cpc :- events([ascend/2])
%~ ooo :- [   cl([events([ascend/2])],[])]
%~ cpc :- actions([ascend/2])
%~ ooo :- [   cl([actions([ascend/2])],[])]
%~ cpc :- mpred_prop(ascend(diver,depth),action)
%~ ooo :- [   cl([mpred_prop(ascend(diver,depth),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3416).
( cl(events(ascend/2),[])  ,    cl(mpred_prop(ascend(diver,depth),action),[]) ,     cl(actions(ascend/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3419).
% event Descend(diver,depth)
%~ From E:
%~ 
%~ event( descend(diver,depth))
%~ cpc :- events([descend/2])
%~ ooo :- [   cl([events([descend/2])],[])]
%~ cpc :- actions([descend/2])
%~ ooo :- [   cl([actions([descend/2])],[])]
%~ cpc :- mpred_prop(descend(diver,depth),action)
%~ ooo :- [   cl([mpred_prop(descend(diver,depth),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3419).
( cl(events(descend/2),[])  ,    cl(mpred_prop(descend(diver,depth),action),[]) ,     cl(actions(descend/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3421).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Descend(diver,depth2),time) ->
% depth2>depth1.
%~ From E:
%~ 
%~ (     holds(atDepth(Diver,Depth1),Time) ,     happens(descend(Diver,Depth2),Time)) ->         Depth2>Depth1
%~ cpc :- (     holds(atDepth(Diver,Depth1),Time) ,     happens(descend(Diver,Depth2),Time)) ->         Depth2>Depth1
%~ ooo :- [   cl(    [   comparison(Depth2,Depth1,>)],       [      holds(atDepth(Diver,Depth1),Time),           happens(descend(Diver,Depth2),Time)])]
cl( comparison(Depth2,Depth1,>),   (     holds(atDepth(Diver,Depth1),Time) ,     happens(descend(Diver,Depth2),Time))).
 %  cl( comparison(Depth2,Depth1,>),   (     holds(atDepth(Diver,Depth1),Time) ,     happens(descend(Diver,Depth2),Time))).
 %  % =================================.


% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Ascend(diver,depth2),time) ->
% depth2<depth1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3427).
%~ From E:
%~ 
%~ (     holds(atDepth(Diver,Depth1),Time) ,     happens(ascend(Diver,Depth2),Time)) ->         Depth2<Depth1
%~ cpc :- (     holds(atDepth(Diver,Depth1),Time) ,     happens(ascend(Diver,Depth2),Time)) ->         Depth2<Depth1
%~ ooo :- [   cl(    [   comparison(Depth2,Depth1,<)],       [      holds(atDepth(Diver,Depth1),Time),           happens(ascend(Diver,Depth2),Time)])]
cl( comparison(Depth2,Depth1,<),   (     holds(atDepth(Diver,Depth1),Time) ,     happens(ascend(Diver,Depth2),Time))).
 %  cl( comparison(Depth2,Depth1,<),   (     holds(atDepth(Diver,Depth1),Time) ,     happens(ascend(Diver,Depth2),Time))).
 %  % =================================.


% [diver,depth,time]
% Initiates(Descend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3432).
%~ From E:
%~ 
%~ initiates_at(descend(Diver,Depth),atDepth(Diver,Depth),Time)
%~ cpc :- initiates(descend(Diver,Depth),atDepth(Diver,Depth),Time)
%~ ooo :- [   cl(    [   initiates(descend(Diver,Depth),atDepth(Diver,Depth),Time)],       [])]
cl(initiates(descend(Diver,Depth),atDepth(Diver,Depth),Time),[]).
 %  cl(initiates(descend(Diver,Depth),atDepth(Diver,Depth),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3434).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Descend(diver,depth2),AtDepth(diver,depth1),time).
%~ From E:
%~ 
%~ holds(atDepth(Diver,Depth1),Time) ->         terminates_at(descend(Diver,Depth2),atDepth(Diver,Depth1),Time)
%~ cpc :- holds(atDepth(Diver,Depth1),Time)
%~ ooo :- [   cl([holds(atDepth(Diver,Depth1),Time)],[])]
%~ cpc :- if(    terminates(descend(Diver,Depth2),at(atDepth(Diver,Depth1),Time)),       cl([holds(atDepth(Diver,Depth1),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(descend(Diver,Depth2),at(atDepth(Diver,Depth1),Time)),       cl([holds(atDepth(Diver,Depth1),Time)],[]))],       [])]
cl(    (     descend(Diver,Depth2)terminates atDepth(Diver,Depth1)at Time if     cl(holds(atDepth(Diver,Depth1),Time),[])),       []).
 %  cl(    if(    terminates(descend(Diver,Depth2),at(atDepth(Diver,Depth1),Time)),       cl(holds(atDepth(Diver,Depth1),Time),[])),       []).
 %  % =================================.


% [diver,depth,time]
% Initiates(Ascend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3439).
%~ From E:
%~ 
%~ initiates_at(ascend(Diver,Depth),atDepth(Diver,Depth),Time)
%~ cpc :- initiates(ascend(Diver,Depth),atDepth(Diver,Depth),Time)
%~ ooo :- [   cl(    [   initiates(ascend(Diver,Depth),atDepth(Diver,Depth),Time)],       [])]
cl(initiates(ascend(Diver,Depth),atDepth(Diver,Depth),Time),[]).
 %  cl(initiates(ascend(Diver,Depth),atDepth(Diver,Depth),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3441).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Ascend(diver,depth2),AtDepth(diver,depth1),time).
%~ From E:
%~ 
%~ holds(atDepth(Diver,Depth1),Time) ->         terminates_at(ascend(Diver,Depth2),atDepth(Diver,Depth1),Time)
%~ cpc :- holds(atDepth(Diver,Depth1),Time)
%~ ooo :- [   cl([holds(atDepth(Diver,Depth1),Time)],[])]
%~ cpc :- if(    terminates(ascend(Diver,Depth2),at(atDepth(Diver,Depth1),Time)),       cl([holds(atDepth(Diver,Depth1),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(ascend(Diver,Depth2),at(atDepth(Diver,Depth1),Time)),       cl([holds(atDepth(Diver,Depth1),Time)],[]))],       [])]
cl(    (     ascend(Diver,Depth2)terminates atDepth(Diver,Depth1)at Time if     cl(holds(atDepth(Diver,Depth1),Time),[])),       []).
 %  cl(    if(    terminates(ascend(Diver,Depth2),at(atDepth(Diver,Depth1),Time)),       cl(holds(atDepth(Diver,Depth1),Time),[])),       []).
 %  % =================================.

% fluent Wearing(diver,equipment)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3444).
%~ From E:
%~ 
%~ fluent( wearing(diver,equipment))
%~ cpc :- fluents([wearing/2])
%~ ooo :- [   cl([fluents([wearing/2])],[])]
%~ cpc :- mpred_prop(wearing(diver,equipment),fluent)
%~ ooo :- [   cl([mpred_prop(wearing(diver,equipment),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3444).
cl(mpred_prop(wearing(diver,equipment),fluent),[]),cl(fluents(wearing/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3447).
% event PutOn(diver,equipment)
%~ From E:
%~ 
%~ event( putOn(diver,equipment))
%~ cpc :- events([putOn/2])
%~ ooo :- [   cl([events([putOn/2])],[])]
%~ cpc :- actions([putOn/2])
%~ ooo :- [   cl([actions([putOn/2])],[])]
%~ cpc :- mpred_prop(putOn(diver,equipment),action)
%~ ooo :- [   cl([mpred_prop(putOn(diver,equipment),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3447).
( cl(events(putOn/2),[])  ,    cl(mpred_prop(putOn(diver,equipment),action),[]) ,     cl(actions(putOn/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3449).
% event TakeOff(diver,equipment)
%~ From E:
%~ 
%~ event( takeOff(diver,equipment))
%~ cpc :- events([takeOff/2])
%~ ooo :- [   cl([events([takeOff/2])],[])]
%~ cpc :- actions([takeOff/2])
%~ ooo :- [   cl([actions([takeOff/2])],[])]
%~ cpc :- mpred_prop(takeOff(diver,equipment),action)
%~ ooo :- [   cl([mpred_prop(takeOff(diver,equipment),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3449).
( cl(events(takeOff/2),[])  ,    cl(mpred_prop(takeOff(diver,equipment),action),[]) ,     cl(actions(takeOff/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3451).
% event Lose(diver,equipment)
%~ From E:
%~ 
%~ event( lose(diver,equipment))
%~ cpc :- events([lose/2])
%~ ooo :- [   cl([events([lose/2])],[])]
%~ cpc :- actions([lose/2])
%~ ooo :- [   cl([actions([lose/2])],[])]
%~ cpc :- mpred_prop(lose(diver,equipment),action)
%~ ooo :- [   cl([mpred_prop(lose(diver,equipment),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3451).
( cl(events(lose/2),[])  ,    cl(mpred_prop(lose(diver,equipment),action),[]) ,     cl(actions(lose/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3453).
% [diver,equipment,depth,time]
% Releases(PutOn(diver,equipment),AtDepth(equipment,depth),time).
%~ From E:
%~ 
%~ releases_at(putOn(Diver,Equipment),atDepth(Equipment,Depth),Time)
%~ cpc :- releases(putOn(Diver,Equipment),atDepth(Equipment,Depth),Time)
%~ ooo :- [   cl(    [   releases(putOn(Diver,Equipment),atDepth(Equipment,Depth),Time)],       [])]
cl(releases(putOn(Diver,Equipment),atDepth(Equipment,Depth),Time),[]).
 %  cl(releases(putOn(Diver,Equipment),atDepth(Equipment,Depth),Time),[]).
 %  % =================================.


% [diver,equipment,time]
% Releases(PutOn(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3457).
%~ From E:
%~ 
%~ releases_at(putOn(Diver,Equipment),underWater(Equipment),Time)
%~ cpc :- releases(putOn(Diver,Equipment),underWater(Equipment),Time)
%~ ooo :- [   cl([releases(putOn(Diver,Equipment),underWater(Equipment),Time)],[])]
cl(releases(putOn(Diver,Equipment),underWater(Equipment),Time),[]).
 %  cl(releases(putOn(Diver,Equipment),underWater(Equipment),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3459).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !{diver1} HoldsAt(Wearing(diver1,equipment),time).
%~ From E:
%~ 
%~ happens(putOn(Diver,Equipment),Time) ->         not( thereExists(Diver1,holds(wearing(Diver1,Equipment),Time)))
%~ cpc :- happens(putOn(Diver,Equipment),Time) ->         not( thereExists(Diver1,holds(wearing(Diver1,Equipment),Time)))
%~ ooo :- [   cl(    [   exists( Diver1,   (     not( holds(wearing(Diver1,Equipment),Time)) ;     not( happens(putOn(Diver,Equipment),Time))))],       [])]
cl(    exists( Diver1,   (     not( holds(wearing(Diver1,Equipment),Time)) ;     not( happens(putOn(Diver,Equipment),Time)))),       []).
 %  ( cl(    exists( Diver1,   (     not( holds(wearing(Diver1,Equipment),Time)) ;     not( happens(putOn(Diver,Equipment),Time)))),       [])).
 %  % =================================.


% [diver,depth,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(equipment,depth),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3464).
%~ From E:
%~ 
%~ holds(wearing(Diver,Equipment),Time) ->         (     holds(atDepth(Diver,Depth),Time) <->     holds(atDepth(Equipment,Depth),Time))
%~ cpc :- holds(wearing(Diver,Equipment),Time) ->         (     holds(atDepth(Diver,Depth),Time) <->     holds(atDepth(Equipment,Depth),Time))
%~ ooo :- [   cl(    [   holds(atDepth(Equipment,Depth),Time)],       [      holds(atDepth(Diver,Depth),Time),           holds(wearing(Diver,Equipment),Time)]),     cl(      [   holds(atDepth(Diver,Depth),Time)],           [        holds(atDepth(Equipment,Depth),Time),               holds(wearing(Diver,Equipment),Time)])]
(     cl(      holds(atDepth(Equipment,Depth),Time),           (               holds(atDepth(Diver,Depth),Time) ,               holds(wearing(Diver,Equipment),Time))) ,     cl(      holds(atDepth(Diver,Depth),Time),           (               holds(atDepth(Equipment,Depth),Time) ,               holds(wearing(Diver,Equipment),Time)))).
 %  (     cl(      holds(atDepth(Equipment,Depth),Time),           (               holds(atDepth(Diver,Depth),Time) ,               holds(wearing(Diver,Equipment),Time))) ,     cl(      holds(atDepth(Diver,Depth),Time),           (               holds(atDepth(Equipment,Depth),Time) ,               holds(wearing(Diver,Equipment),Time)))).
 %  % =================================.


% [diver,depth,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(object,depth),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3469).
%~ From E:
%~ 
%~ holds(holding(Diver,Object),Time) ->         (     holds(atDepth(Diver,Depth),Time) <->     holds(atDepth(Object,Depth),Time))
%~ cpc :- holds(holding(Diver,Object),Time) ->         (     holds(atDepth(Diver,Depth),Time) <->     holds(atDepth(Object,Depth),Time))
%~ ooo :- [   cl(    [   holds(atDepth(Object,Depth),Time)],       [      holds(atDepth(Diver,Depth),Time),           holds(holding(Diver,Object),Time)]),     cl(      [   holds(atDepth(Diver,Depth),Time)],           [        holds(atDepth(Object,Depth),Time),               holds(holding(Diver,Object),Time)])]
(     cl(      holds(atDepth(Object,Depth),Time),           (               holds(atDepth(Diver,Depth),Time) ,               holds(holding(Diver,Object),Time))) ,     cl(      holds(atDepth(Diver,Depth),Time),           (               holds(atDepth(Object,Depth),Time) ,               holds(holding(Diver,Object),Time)))).
 %  (     cl(      holds(atDepth(Object,Depth),Time),           (               holds(atDepth(Diver,Depth),Time) ,               holds(holding(Diver,Object),Time))) ,     cl(      holds(atDepth(Diver,Depth),Time),           (               holds(atDepth(Object,Depth),Time) ,               holds(holding(Diver,Object),Time)))).
 %  % =================================.


% [diver,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(equipment),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3474).
%~ From E:
%~ 
%~ holds(wearing(Diver,Equipment),Time) ->         <->(holds(underWater(Diver),Time),holds(underWater(Equipment),Time))
%~ cpc :- holds(wearing(Diver,Equipment),Time) ->         <->(holds(underWater(Diver),Time),holds(underWater(Equipment),Time))
%~ ooo :- [   cl(    [   holds(underWater(Equipment),Time)],       [      holds(underWater(Diver),Time),           holds(wearing(Diver,Equipment),Time)]),     cl(      [   holds(underWater(Diver),Time)],           [        holds(underWater(Equipment),Time),               holds(wearing(Diver,Equipment),Time)])]
(     cl(      holds(underWater(Equipment),Time),           (               holds(underWater(Diver),Time) ,               holds(wearing(Diver,Equipment),Time))) ,     cl(      holds(underWater(Diver),Time),           (               holds(underWater(Equipment),Time) ,               holds(wearing(Diver,Equipment),Time)))).
 %  (     cl(      holds(underWater(Equipment),Time),           (               holds(underWater(Diver),Time) ,               holds(wearing(Diver,Equipment),Time))) ,     cl(      holds(underWater(Diver),Time),           (               holds(underWater(Equipment),Time) ,               holds(wearing(Diver,Equipment),Time)))).
 %  % =================================.


% [diver,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(object),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3479).
%~ From E:
%~ 
%~ holds(holding(Diver,Object),Time) ->         <->(holds(underWater(Diver),Time),holds(underWater(Object),Time))
%~ cpc :- holds(holding(Diver,Object),Time) ->         <->(holds(underWater(Diver),Time),holds(underWater(Object),Time))
%~ ooo :- [   cl(    [   holds(underWater(Object),Time)],       [      holds(underWater(Diver),Time),           holds(holding(Diver,Object),Time)]),     cl(      [   holds(underWater(Diver),Time)],           [        holds(underWater(Object),Time),               holds(holding(Diver,Object),Time)])]
(     cl(      holds(underWater(Object),Time),           (               holds(underWater(Diver),Time) ,               holds(holding(Diver,Object),Time))) ,     cl(      holds(underWater(Diver),Time),           (               holds(underWater(Object),Time) ,               holds(holding(Diver,Object),Time)))).
 %  (     cl(      holds(underWater(Object),Time),           (               holds(underWater(Diver),Time) ,               holds(holding(Diver,Object),Time))) ,     cl(      holds(underWater(Diver),Time),           (               holds(underWater(Object),Time) ,               holds(holding(Diver,Object),Time)))).
 %  % =================================.


% [diver,depth,equipment,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3484).
%~ From E:
%~ 
%~ (     holds(atDepth(Diver,Depth),Time) ,     holds(wearing(Diver,Equipment),Time)) ->         initiates_at(takeOff(Diver,Equipment),atDepth(Equipment,Depth),Time)
%~ cpc :- holds(atDepth(Diver,Depth),Time)
%~ ooo :- [   cl([holds(atDepth(Diver,Depth),Time)],[])]
%~ cpc :- holds(wearing(Diver,Equipment),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Equipment),Time)],[])]
%~ cpc :- if(    initiates(takeOff(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl([holds(atDepth(Diver,Depth),Time)],[]) ,           cl([holds(wearing(Diver,Equipment),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates(takeOff(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl([holds(atDepth(Diver,Depth),Time)],[]) ,           cl([holds(wearing(Diver,Equipment),Time)],[])))],       [])]
cl(    (     (         takeOff(Diver,Equipment) initiates         atDepth(Equipment,Depth)at Time) if     (         cl(holds(atDepth(Diver,Depth),Time),[]) ,         cl(holds(wearing(Diver,Equipment),Time),[]))),       []).
 %  cl(    if(    initiates(takeOff(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl(holds(atDepth(Diver,Depth),Time),[]) ,           cl(holds(wearing(Diver,Equipment),Time),[]))),       []).
 %  % =================================.


% [diver,depth,equipment,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3489).
%~ From E:
%~ 
%~ (     holds(not(atDepth(Diver,Depth)),Time) ,     holds(wearing(Diver,Equipment),Time)) ->         terminates_at(takeOff(Diver,Equipment),atDepth(Equipment,Depth),Time)
%~ cpc :- holds(not(atDepth(Diver,Depth)),Time)
%~ ooo :- [   cl([],[holds(atDepth(Diver,Depth),Time)])]
%~ cpc :- holds(wearing(Diver,Equipment),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Equipment),Time)],[])]
%~ cpc :- if(    terminates( takeOff(Diver,Equipment),   at(atDepth(Equipment,Depth),Time)),       (           cl([],[holds(atDepth(Diver,Depth),Time)]) ,           cl([holds(wearing(Diver,Equipment),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates( takeOff(Diver,Equipment),   at(atDepth(Equipment,Depth),Time)),       (           cl([],[holds(atDepth(Diver,Depth),Time)]) ,           cl([holds(wearing(Diver,Equipment),Time)],[])))],       [])]
cl(    (     (         takeOff(Diver,Equipment) terminates         atDepth(Equipment,Depth)at Time) if     (         cl([],holds(atDepth(Diver,Depth),Time)) ,         cl(holds(wearing(Diver,Equipment),Time),[]))),       []).
 %  cl(    if(    terminates( takeOff(Diver,Equipment),   at(atDepth(Equipment,Depth),Time)),       (           cl([],holds(atDepth(Diver,Depth),Time)) ,           cl(holds(wearing(Diver,Equipment),Time),[]))),       []).
 %  % =================================.


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(TakeOff(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3494).
%~ From E:
%~ 
%~ holds(underWater(Diver),Time) ->         initiates_at(takeOff(Diver,Equipment),underWater(Equipment),Time)
%~ cpc :- holds(underWater(Diver),Time)
%~ ooo :- [   cl([holds(underWater(Diver),Time)],[])]
%~ cpc :- if(    initiates(takeOff(Diver,Equipment),at(underWater(Equipment),Time)),       cl([holds(underWater(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(takeOff(Diver,Equipment),at(underWater(Equipment),Time)),       cl([holds(underWater(Diver),Time)],[]))],       [])]
cl(    (     takeOff(Diver,Equipment)initiates underWater(Equipment)at Time if     cl(holds(underWater(Diver),Time),[])),       []).
 %  cl(    if(    initiates(takeOff(Diver,Equipment),at(underWater(Equipment),Time)),       cl(holds(underWater(Diver),Time),[])),       []).
 %  % =================================.


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(TakeOff(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3498).
%~ From E:
%~ 
%~ holds(not(underWater(Diver)),Time) ->         terminates_at(takeOff(Diver,Equipment),underWater(Equipment),Time)
%~ cpc :- holds(not(underWater(Diver)),Time)
%~ ooo :- [   cl([],[holds(underWater(Diver),Time)])]
%~ cpc :- if(    terminates(takeOff(Diver,Equipment),at(underWater(Equipment),Time)),       cl([],[holds(underWater(Diver),Time)]))
%~ ooo :- [   cl(    [   if(    terminates(takeOff(Diver,Equipment),at(underWater(Equipment),Time)),       cl([],[holds(underWater(Diver),Time)]))],       [])]
cl(    (     takeOff(Diver,Equipment)terminates underWater(Equipment)at Time if     cl([],holds(underWater(Diver),Time))),       []).
 %  cl(    if(    terminates(takeOff(Diver,Equipment),at(underWater(Equipment),Time)),       cl([],holds(underWater(Diver),Time))),       []).
 %  % =================================.


% [diver,equipment,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3502).
%~ From E:
%~ 
%~ (     holds(atDepth(Diver,Depth),Time) ,     holds(wearing(Diver,Equipment),Time)) ->         initiates_at(lose(Diver,Equipment),atDepth(Equipment,Depth),Time)
%~ cpc :- holds(atDepth(Diver,Depth),Time)
%~ ooo :- [   cl([holds(atDepth(Diver,Depth),Time)],[])]
%~ cpc :- holds(wearing(Diver,Equipment),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Equipment),Time)],[])]
%~ cpc :- if(    initiates(lose(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl([holds(atDepth(Diver,Depth),Time)],[]) ,           cl([holds(wearing(Diver,Equipment),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates(lose(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl([holds(atDepth(Diver,Depth),Time)],[]) ,           cl([holds(wearing(Diver,Equipment),Time)],[])))],       [])]
cl(    (     lose(Diver,Equipment)initiates atDepth(Equipment,Depth)at Time if     (         cl(holds(atDepth(Diver,Depth),Time),[]) ,         cl(holds(wearing(Diver,Equipment),Time),[]))),       []).
 %  cl(    if(    initiates(lose(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl(holds(atDepth(Diver,Depth),Time),[]) ,           cl(holds(wearing(Diver,Equipment),Time),[]))),       []).
 %  % =================================.


% [diver,equipment,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3507).
%~ From E:
%~ 
%~ (     holds(not(atDepth(Diver,Depth)),Time) ,     holds(wearing(Diver,Equipment),Time)) ->         terminates_at(lose(Diver,Equipment),atDepth(Equipment,Depth),Time)
%~ cpc :- holds(not(atDepth(Diver,Depth)),Time)
%~ ooo :- [   cl([],[holds(atDepth(Diver,Depth),Time)])]
%~ cpc :- holds(wearing(Diver,Equipment),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Equipment),Time)],[])]
%~ cpc :- if(    terminates(lose(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl([],[holds(atDepth(Diver,Depth),Time)]) ,           cl([holds(wearing(Diver,Equipment),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates(lose(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl([],[holds(atDepth(Diver,Depth),Time)]) ,           cl([holds(wearing(Diver,Equipment),Time)],[])))],       [])]
cl(    (     lose(Diver,Equipment)terminates atDepth(Equipment,Depth)at Time if     (         cl([],holds(atDepth(Diver,Depth),Time)) ,         cl(holds(wearing(Diver,Equipment),Time),[]))),       []).
 %  cl(    if(    terminates(lose(Diver,Equipment),at(atDepth(Equipment,Depth),Time)),       (           cl([],holds(atDepth(Diver,Depth),Time)) ,           cl(holds(wearing(Diver,Equipment),Time),[]))),       []).
 %  % =================================.


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(Lose(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3512).
%~ From E:
%~ 
%~ holds(underWater(Diver),Time) ->         initiates_at(lose(Diver,Equipment),underWater(Equipment),Time)
%~ cpc :- holds(underWater(Diver),Time)
%~ ooo :- [   cl([holds(underWater(Diver),Time)],[])]
%~ cpc :- if(    initiates(lose(Diver,Equipment),at(underWater(Equipment),Time)),       cl([holds(underWater(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(lose(Diver,Equipment),at(underWater(Equipment),Time)),       cl([holds(underWater(Diver),Time)],[]))],       [])]
cl(    (     lose(Diver,Equipment)initiates underWater(Equipment)at Time if     cl(holds(underWater(Diver),Time),[])),       []).
 %  cl(    if(    initiates(lose(Diver,Equipment),at(underWater(Equipment),Time)),       cl(holds(underWater(Diver),Time),[])),       []).
 %  % =================================.


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(Lose(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3516).
%~ From E:
%~ 
%~ holds(not(underWater(Diver)),Time) ->         terminates_at(lose(Diver,Equipment),underWater(Equipment),Time)
%~ cpc :- holds(not(underWater(Diver)),Time)
%~ ooo :- [   cl([],[holds(underWater(Diver),Time)])]
%~ cpc :- if(    terminates(lose(Diver,Equipment),at(underWater(Equipment),Time)),       cl([],[holds(underWater(Diver),Time)]))
%~ ooo :- [   cl(    [   if(    terminates(lose(Diver,Equipment),at(underWater(Equipment),Time)),       cl([],[holds(underWater(Diver),Time)]))],       [])]
cl(    (     lose(Diver,Equipment)terminates underWater(Equipment)at Time if     cl([],holds(underWater(Diver),Time))),       []).
 %  cl(    if(    terminates(lose(Diver,Equipment),at(underWater(Equipment),Time)),       cl([],holds(underWater(Diver),Time))),       []).
 %  % =================================.

% fluent Holding(diver,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3518).
%~ From E:
%~ 
%~ fluent( holding(diver,object))
%~ cpc :- fluents([holding/2])
%~ ooo :- [   cl([fluents([holding/2])],[])]
%~ cpc :- mpred_prop(holding(diver,object),fluent)
%~ ooo :- [   cl([mpred_prop(holding(diver,object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3518).
cl(mpred_prop(holding(diver,object),fluent),[]),cl(fluents(holding/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3521).
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) ->
% !HoldsAt(Holding(diver2,diver1),time).
%~ From E:
%~ 
%~ holds(holding(Diver1,Diver2),Time) ->         holds(not(holding(Diver2,Diver1)),Time)
%~ cpc :- holds(holding(Diver1,Diver2),Time) ->         holds(not(holding(Diver2,Diver1)),Time)
%~ ooo :- [   cl( [], [  [   holds(holding(Diver2,Diver1),Time),     holds(holding(Diver1,Diver2),Time)])]]
cl( [],   (     holds(holding(Diver2,Diver1),Time) ,     holds(holding(Diver1,Diver2),Time))).
 %  cl( [],   (     holds(holding(Diver2,Diver1),Time) ,     holds(holding(Diver1,Diver2),Time))).
 %  % =================================.

% event Grab(diver,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3524).
%~ From E:
%~ 
%~ event( grab(diver,object))
%~ cpc :- events([grab/2])
%~ ooo :- [   cl([events([grab/2])],[])]
%~ cpc :- actions([grab/2])
%~ ooo :- [   cl([actions([grab/2])],[])]
%~ cpc :- mpred_prop(grab(diver,object),action)
%~ ooo :- [   cl([mpred_prop(grab(diver,object),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3524).
( cl(events(grab/2),[])  ,    cl(mpred_prop(grab(diver,object),action),[]) ,     cl(actions(grab/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3527).
% event LetGoOf(diver,object)
%~ From E:
%~ 
%~ event( letGoOf(diver,object))
%~ cpc :- events([letGoOf/2])
%~ ooo :- [   cl([events([letGoOf/2])],[])]
%~ cpc :- actions([letGoOf/2])
%~ ooo :- [   cl([actions([letGoOf/2])],[])]
%~ cpc :- mpred_prop(letGoOf(diver,object),action)
%~ ooo :- [   cl([mpred_prop(letGoOf(diver,object),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3527).
( cl(events(letGoOf/2),[])  ,    cl(mpred_prop(letGoOf(diver,object),action),[]) ,     cl(actions(letGoOf/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3529).
% [diver,object,time]
% Initiates(Grab(diver,object),Holding(diver,object),time).
%~ From E:
%~ 
%~ initiates_at(grab(Diver,Object),holding(Diver,Object),Time)
%~ cpc :- initiates(grab(Diver,Object),holding(Diver,Object),Time)
%~ ooo :- [   cl(    [   initiates(grab(Diver,Object),holding(Diver,Object),Time)],       [])]
cl(initiates(grab(Diver,Object),holding(Diver,Object),Time),[]).
 %  cl(initiates(grab(Diver,Object),holding(Diver,Object),Time),[]).
 %  % =================================.


% [diver,object,time]
% Terminates(LetGoOf(diver,object),Holding(diver,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3533).
%~ From E:
%~ 
%~ terminates_at(letGoOf(Diver,Object),holding(Diver,Object),Time)
%~ cpc :- terminates(letGoOf(Diver,Object),holding(Diver,Object),Time)
%~ ooo :- [   cl(    [   terminates(letGoOf(Diver,Object),holding(Diver,Object),Time)],       [])]
cl(terminates(letGoOf(Diver,Object),holding(Diver,Object),Time),[]).
 %  cl(terminates(letGoOf(Diver,Object),holding(Diver,Object),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3535).
% [diver,object,depth,time]
% Releases(Grab(diver,object),AtDepth(object,depth),time).
%~ From E:
%~ 
%~ releases_at(grab(Diver,Object),atDepth(Object,Depth),Time)
%~ cpc :- releases(grab(Diver,Object),atDepth(Object,Depth),Time)
%~ ooo :- [   cl(    [   releases(grab(Diver,Object),atDepth(Object,Depth),Time)],       [])]
cl(releases(grab(Diver,Object),atDepth(Object,Depth),Time),[]).
 %  cl(releases(grab(Diver,Object),atDepth(Object,Depth),Time),[]).
 %  % =================================.


% [diver,object,time]
% Releases(Grab(diver,object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3539).
%~ From E:
%~ 
%~ releases_at(grab(Diver,Object),underWater(Object),Time)
%~ cpc :- releases(grab(Diver,Object),underWater(Object),Time)
%~ ooo :- [   cl([releases(grab(Diver,Object),underWater(Object),Time)],[])]
cl(releases(grab(Diver,Object),underWater(Object),Time),[]).
 %  cl(releases(grab(Diver,Object),underWater(Object),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3541).
% [diver,object,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Initiates(LetGoOf(diver,object),AtDepth(object,depth),time).
%~ From E:
%~ 
%~ (     holds(atDepth(Diver,Depth),Time) ,     holds(holding(Diver,Object),Time)) ->         initiates_at(letGoOf(Diver,Object),atDepth(Object,Depth),Time)
%~ cpc :- holds(atDepth(Diver,Depth),Time)
%~ ooo :- [   cl([holds(atDepth(Diver,Depth),Time)],[])]
%~ cpc :- holds(holding(Diver,Object),Time)
%~ ooo :- [   cl([holds(holding(Diver,Object),Time)],[])]
%~ cpc :- if(    initiates(letGoOf(Diver,Object),at(atDepth(Object,Depth),Time)),       (           cl([holds(atDepth(Diver,Depth),Time)],[]) ,           cl([holds(holding(Diver,Object),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates(letGoOf(Diver,Object),at(atDepth(Object,Depth),Time)),       (           cl([holds(atDepth(Diver,Depth),Time)],[]) ,           cl([holds(holding(Diver,Object),Time)],[])))],       [])]
cl(    (     letGoOf(Diver,Object)initiates atDepth(Object,Depth)at Time if     (         cl(holds(atDepth(Diver,Depth),Time),[]) ,         cl(holds(holding(Diver,Object),Time),[]))),       []).
 %  cl(    if(    initiates(letGoOf(Diver,Object),at(atDepth(Object,Depth),Time)),       (           cl(holds(atDepth(Diver,Depth),Time),[]) ,           cl(holds(holding(Diver,Object),Time),[]))),       []).
 %  % =================================.


% [diver,object,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Terminates(LetGoOf(diver,object),AtDepth(object,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3547).
%~ From E:
%~ 
%~ (     holds(not(atDepth(Diver,Depth)),Time) ,     holds(holding(Diver,Object),Time)) ->         terminates_at(letGoOf(Diver,Object),atDepth(Object,Depth),Time)
%~ cpc :- holds(not(atDepth(Diver,Depth)),Time)
%~ ooo :- [   cl([],[holds(atDepth(Diver,Depth),Time)])]
%~ cpc :- holds(holding(Diver,Object),Time)
%~ ooo :- [   cl([holds(holding(Diver,Object),Time)],[])]
%~ cpc :- if(    terminates(letGoOf(Diver,Object),at(atDepth(Object,Depth),Time)),       (           cl([],[holds(atDepth(Diver,Depth),Time)]) ,           cl([holds(holding(Diver,Object),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates(letGoOf(Diver,Object),at(atDepth(Object,Depth),Time)),       (           cl([],[holds(atDepth(Diver,Depth),Time)]) ,           cl([holds(holding(Diver,Object),Time)],[])))],       [])]
cl(    (     letGoOf(Diver,Object)terminates atDepth(Object,Depth)at Time if     (         cl([],holds(atDepth(Diver,Depth),Time)) ,         cl(holds(holding(Diver,Object),Time),[]))),       []).
 %  cl(    if(    terminates(letGoOf(Diver,Object),at(atDepth(Object,Depth),Time)),       (           cl([],holds(atDepth(Diver,Depth),Time)) ,           cl(holds(holding(Diver,Object),Time),[]))),       []).
 %  % =================================.


% [diver,object,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(LetGoOf(diver,object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3552).
%~ From E:
%~ 
%~ holds(underWater(Diver),Time) ->         initiates_at(letGoOf(Diver,Object),underWater(Object),Time)
%~ cpc :- holds(underWater(Diver),Time)
%~ ooo :- [   cl([holds(underWater(Diver),Time)],[])]
%~ cpc :- if(    initiates(letGoOf(Diver,Object),at(underWater(Object),Time)),       cl([holds(underWater(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(letGoOf(Diver,Object),at(underWater(Object),Time)),       cl([holds(underWater(Diver),Time)],[]))],       [])]
cl(    (     letGoOf(Diver,Object)initiates underWater(Object)at Time if     cl(holds(underWater(Diver),Time),[])),       []).
 %  cl(    if(    initiates(letGoOf(Diver,Object),at(underWater(Object),Time)),       cl(holds(underWater(Diver),Time),[])),       []).
 %  % =================================.


% [diver,object,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(LetGoOf(diver,object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3556).
%~ From E:
%~ 
%~ holds(not(underWater(Diver)),Time) ->         terminates_at(letGoOf(Diver,Object),underWater(Object),Time)
%~ cpc :- holds(not(underWater(Diver)),Time)
%~ ooo :- [   cl([],[holds(underWater(Diver),Time)])]
%~ cpc :- if(    terminates(letGoOf(Diver,Object),at(underWater(Object),Time)),       cl([],[holds(underWater(Diver),Time)]))
%~ ooo :- [   cl(    [   if(    terminates(letGoOf(Diver,Object),at(underWater(Object),Time)),       cl([],[holds(underWater(Diver),Time)]))],       [])]
cl(    (     letGoOf(Diver,Object)terminates underWater(Object)at Time if     cl([],holds(underWater(Diver),Time))),       []).
 %  cl(    if(    terminates(letGoOf(Diver,Object),at(underWater(Object),Time)),       cl([],holds(underWater(Diver),Time))),       []).
 %  % =================================.


% [diver,equipment,time]
% Initiates(PutOn(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3560).
%~ From E:
%~ 
%~ initiates_at(putOn(Diver,Equipment),wearing(Diver,Equipment),Time)
%~ cpc :- initiates(putOn(Diver,Equipment),wearing(Diver,Equipment),Time)
%~ ooo :- [   cl(    [   initiates(putOn(Diver,Equipment),wearing(Diver,Equipment),Time)],       [])]
cl(    initiates(putOn(Diver,Equipment),wearing(Diver,Equipment),Time),       []).
 %  cl(    initiates(putOn(Diver,Equipment),wearing(Diver,Equipment),Time),       []).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3562).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !HoldsAt(UnderWater(diver),time).
%~ From E:
%~ 
%~ happens(putOn(Diver,Equipment),Time) ->         holds(not(underWater(Diver)),Time)
%~ cpc :- happens(putOn(Diver,Equipment),Time) ->         holds(not(underWater(Diver)),Time)
%~ ooo :- [   cl( [], [  [   holds(underWater(Diver),Time),     happens(putOn(Diver,Equipment),Time)])]]
cl( [],   (     holds(underWater(Diver),Time) ,     happens(putOn(Diver,Equipment),Time))).
 %  cl( [],   (     holds(underWater(Diver),Time) ,     happens(putOn(Diver,Equipment),Time))).
 %  % =================================.


% [diver,equipment,time]
% Terminates(TakeOff(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3567).
%~ From E:
%~ 
%~ terminates_at(takeOff(Diver,Equipment),wearing(Diver,Equipment),Time)
%~ cpc :- terminates(takeOff(Diver,Equipment),wearing(Diver,Equipment),Time)
%~ ooo :- [   cl(    [   terminates(takeOff(Diver,Equipment),wearing(Diver,Equipment),Time)],       [])]
cl(    terminates(takeOff(Diver,Equipment),wearing(Diver,Equipment),Time),       []).
 %  cl(    terminates(takeOff(Diver,Equipment),wearing(Diver,Equipment),Time),       []).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3569).
% [diver,equipment,time]
% Terminates(Lose(diver,equipment),Wearing(diver,equipment),time).
%~ From E:
%~ 
%~ terminates_at(lose(Diver,Equipment),wearing(Diver,Equipment),Time)
%~ cpc :- terminates(lose(Diver,Equipment),wearing(Diver,Equipment),Time)
%~ ooo :- [   cl(    [   terminates(lose(Diver,Equipment),wearing(Diver,Equipment),Time)],       [])]
cl(    terminates(lose(Diver,Equipment),wearing(Diver,Equipment),Time),       []).
 %  cl(    terminates(lose(Diver,Equipment),wearing(Diver,Equipment),Time),       []).
 %  % =================================.

% fluent Vertical(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3571).
%~ From E:
%~ 
%~ fluent( vertical(diver))
%~ cpc :- fluents([vertical/1])
%~ ooo :- [   cl([fluents([vertical/1])],[])]
%~ cpc :- mpred_prop(vertical(diver),fluent)
%~ ooo :- [   cl([mpred_prop(vertical(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3571).
cl(mpred_prop(vertical(diver),fluent),[]),cl(fluents(vertical/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3574).
% fluent HorizontalDown(diver)
%~ From E:
%~ 
%~ fluent( horizontalDown(diver))
%~ cpc :- fluents([horizontalDown/1])
%~ ooo :- [   cl([fluents([horizontalDown/1])],[])]
%~ cpc :- mpred_prop(horizontalDown(diver),fluent)
%~ ooo :- [   cl([mpred_prop(horizontalDown(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3574).
cl(mpred_prop(horizontalDown(diver),fluent),[]),cl(fluents(horizontalDown/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3576).
% fluent Inverted(diver)
%~ From E:
%~ 
%~ fluent( inverted(diver))
%~ cpc :- fluents([inverted/1])
%~ ooo :- [   cl([fluents([inverted/1])],[])]
%~ cpc :- mpred_prop(inverted(diver),fluent)
%~ ooo :- [   cl([mpred_prop(inverted(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3576).
cl(mpred_prop(inverted(diver),fluent),[]),cl(fluents(inverted/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3578).
% fluent HorizontalUp(diver)
%~ From E:
%~ 
%~ fluent( horizontalUp(diver))
%~ cpc :- fluents([horizontalUp/1])
%~ ooo :- [   cl([fluents([horizontalUp/1])],[])]
%~ cpc :- mpred_prop(horizontalUp(diver),fluent)
%~ ooo :- [   cl([mpred_prop(horizontalUp(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3578).
cl(mpred_prop(horizontalUp(diver),fluent),[]),cl(fluents(horizontalUp/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3580).
% xor Vertical, HorizontalDown, Inverted, HorizontalUp
%~ From E:
%~ 
%~ xor( [vertical,horizontalDown,inverted,horizontalUp])
%~ cpc :- xor( [vertical,horizontalDown,inverted,horizontalUp])
%~ ooo :- [   cl([xor([vertical,horizontalDown,inverted,horizontalUp])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3580).
cl(xor((vertical,horizontalDown,inverted,horizontalUp)),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3582).
% event RotatePitch(diver)
%~ From E:
%~ 
%~ event( rotatePitch(diver))
%~ cpc :- events([rotatePitch/1])
%~ ooo :- [   cl([events([rotatePitch/1])],[])]
%~ cpc :- actions([rotatePitch/1])
%~ ooo :- [   cl([actions([rotatePitch/1])],[])]
%~ cpc :- mpred_prop(rotatePitch(diver),action)
%~ ooo :- [   cl([mpred_prop(rotatePitch(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3582).
( cl(events(rotatePitch/1),[])  ,    cl(mpred_prop(rotatePitch(diver),action),[]) ,     cl(actions(rotatePitch/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3584).
% [diver,time]
% HoldsAt(Vertical(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalDown(diver),time).
%~ From E:
%~ 
%~ holds(vertical(Diver),Time) ->         initiates_at(rotatePitch(Diver),horizontalDown(Diver),Time)
%~ cpc :- holds(vertical(Diver),Time)
%~ ooo :- [   cl([holds(vertical(Diver),Time)],[])]
%~ cpc :- if(    initiates(rotatePitch(Diver),at(horizontalDown(Diver),Time)),       cl([holds(vertical(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(rotatePitch(Diver),at(horizontalDown(Diver),Time)),       cl([holds(vertical(Diver),Time)],[]))],       [])]
cl(    (     rotatePitch(Diver)initiates horizontalDown(Diver)at Time if     cl(holds(vertical(Diver),Time),[])),       []).
 %  cl(    if(    initiates(rotatePitch(Diver),at(horizontalDown(Diver),Time)),       cl(holds(vertical(Diver),Time),[])),       []).
 %  % =================================.


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Initiates(RotatePitch(diver),Inverted(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3589).
%~ From E:
%~ 
%~ holds(horizontalDown(Diver),Time) ->         initiates_at(rotatePitch(Diver),inverted(Diver),Time)
%~ cpc :- holds(horizontalDown(Diver),Time)
%~ ooo :- [   cl([holds(horizontalDown(Diver),Time)],[])]
%~ cpc :- if(    initiates(rotatePitch(Diver),at(inverted(Diver),Time)),       cl([holds(horizontalDown(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(rotatePitch(Diver),at(inverted(Diver),Time)),       cl([holds(horizontalDown(Diver),Time)],[]))],       [])]
cl(    (     rotatePitch(Diver)initiates inverted(Diver)at Time if     cl(holds(horizontalDown(Diver),Time),[])),       []).
 %  cl(    if(    initiates(rotatePitch(Diver),at(inverted(Diver),Time)),       cl(holds(horizontalDown(Diver),Time),[])),       []).
 %  % =================================.


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalDown(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3593).
%~ From E:
%~ 
%~ holds(horizontalDown(Diver),Time) ->         terminates_at(rotatePitch(Diver),horizontalDown(Diver),Time)
%~ cpc :- holds(horizontalDown(Diver),Time)
%~ ooo :- [   cl([holds(horizontalDown(Diver),Time)],[])]
%~ cpc :- if(    terminates(rotatePitch(Diver),at(horizontalDown(Diver),Time)),       cl([holds(horizontalDown(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(rotatePitch(Diver),at(horizontalDown(Diver),Time)),       cl([holds(horizontalDown(Diver),Time)],[]))],       [])]
cl(    (     rotatePitch(Diver)terminates horizontalDown(Diver)at Time if     cl(holds(horizontalDown(Diver),Time),[])),       []).
 %  cl(    if(    terminates(rotatePitch(Diver),at(horizontalDown(Diver),Time)),       cl(holds(horizontalDown(Diver),Time),[])),       []).
 %  % =================================.


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalUp(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3597).
%~ From E:
%~ 
%~ holds(inverted(Diver),Time) ->         initiates_at(rotatePitch(Diver),horizontalUp(Diver),Time)
%~ cpc :- holds(inverted(Diver),Time)
%~ ooo :- [   cl([holds(inverted(Diver),Time)],[])]
%~ cpc :- if(    initiates(rotatePitch(Diver),at(horizontalUp(Diver),Time)),       cl([holds(inverted(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(rotatePitch(Diver),at(horizontalUp(Diver),Time)),       cl([holds(inverted(Diver),Time)],[]))],       [])]
cl(    (     rotatePitch(Diver)initiates horizontalUp(Diver)at Time if     cl(holds(inverted(Diver),Time),[])),       []).
 %  cl(    if(    initiates(rotatePitch(Diver),at(horizontalUp(Diver),Time)),       cl(holds(inverted(Diver),Time),[])),       []).
 %  % =================================.


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Terminates(RotatePitch(diver),Inverted(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3601).
%~ From E:
%~ 
%~ holds(inverted(Diver),Time) ->         terminates_at(rotatePitch(Diver),inverted(Diver),Time)
%~ cpc :- holds(inverted(Diver),Time)
%~ ooo :- [   cl([holds(inverted(Diver),Time)],[])]
%~ cpc :- if(    terminates(rotatePitch(Diver),at(inverted(Diver),Time)),       cl([holds(inverted(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(rotatePitch(Diver),at(inverted(Diver),Time)),       cl([holds(inverted(Diver),Time)],[]))],       [])]
cl(    (     rotatePitch(Diver)terminates inverted(Diver)at Time if     cl(holds(inverted(Diver),Time),[])),       []).
 %  cl(    if(    terminates(rotatePitch(Diver),at(inverted(Diver),Time)),       cl(holds(inverted(Diver),Time),[])),       []).
 %  % =================================.


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Initiates(RotatePitch(diver),Vertical(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3605).
%~ From E:
%~ 
%~ holds(horizontalUp(Diver),Time) ->         initiates_at(rotatePitch(Diver),vertical(Diver),Time)
%~ cpc :- holds(horizontalUp(Diver),Time)
%~ ooo :- [   cl([holds(horizontalUp(Diver),Time)],[])]
%~ cpc :- if(    initiates(rotatePitch(Diver),at(vertical(Diver),Time)),       cl([holds(horizontalUp(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(rotatePitch(Diver),at(vertical(Diver),Time)),       cl([holds(horizontalUp(Diver),Time)],[]))],       [])]
cl(    (     rotatePitch(Diver)initiates vertical(Diver)at Time if     cl(holds(horizontalUp(Diver),Time),[])),       []).
 %  cl(    if(    initiates(rotatePitch(Diver),at(vertical(Diver),Time)),       cl(holds(horizontalUp(Diver),Time),[])),       []).
 %  % =================================.


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalUp(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3609).
%~ From E:
%~ 
%~ holds(horizontalUp(Diver),Time) ->         terminates_at(rotatePitch(Diver),horizontalUp(Diver),Time)
%~ cpc :- holds(horizontalUp(Diver),Time)
%~ ooo :- [   cl([holds(horizontalUp(Diver),Time)],[])]
%~ cpc :- if(    terminates(rotatePitch(Diver),at(horizontalUp(Diver),Time)),       cl([holds(horizontalUp(Diver),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(rotatePitch(Diver),at(horizontalUp(Diver),Time)),       cl([holds(horizontalUp(Diver),Time)],[]))],       [])]
cl(    (     rotatePitch(Diver)terminates horizontalUp(Diver)at Time if     cl(holds(horizontalUp(Diver),Time),[])),       []).
 %  cl(    if(    terminates(rotatePitch(Diver),at(horizontalUp(Diver),Time)),       cl(holds(horizontalUp(Diver),Time),[])),       []).
 %  % =================================.

% event RotateYaw(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3611).
%~ From E:
%~ 
%~ event( rotateYaw(diver))
%~ cpc :- events([rotateYaw/1])
%~ ooo :- [   cl([events([rotateYaw/1])],[])]
%~ cpc :- actions([rotateYaw/1])
%~ ooo :- [   cl([actions([rotateYaw/1])],[])]
%~ cpc :- mpred_prop(rotateYaw(diver),action)
%~ ooo :- [   cl([mpred_prop(rotateYaw(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3611).
( cl(events(rotateYaw/1),[])  ,    cl(mpred_prop(rotateYaw(diver),action),[]) ,     cl(actions(rotateYaw/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3614).
%; try taking out Holding condition here
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(RapidAscendToSurface(diver),time) &
% !({diver1} HoldsAt(Holding(diver,diver1),time)) ->
% Happens(RotateYaw(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3616).
%~ From E:
%~ 
%~ ( happens(ascend1(Diver),Time)  ,    not( happens(rapidAscendToSurface(Diver),Time)) ,     not( thereExists(Diver1,holds(holding(Diver,Diver1),Time)))) ->         happens(rotateYaw(Diver),Time)
%~ cpc :- ( happens(ascend1(Diver),Time)  ,    not( happens(rapidAscendToSurface(Diver),Time)) ,     not( thereExists(Diver1,holds(holding(Diver,Diver1),Time)))) ->         happens(rotateYaw(Diver),Time)
%~ ooo :- [   cl(    [   exists( Diver1,   ( happens(rotateYaw(Diver),Time)  ;    not( happens(ascend1(Diver),Time)) ;     happens(rapidAscendToSurface(Diver),Time) ;     holds(holding(Diver,Diver1),Time)))],       [])]
cl(    exists( Diver1,   ( happens(rotateYaw(Diver),Time)  ;    not( happens(ascend1(Diver),Time)) ;     happens(rapidAscendToSurface(Diver),Time) ;     holds(holding(Diver,Diver1),Time))),       []).
 %  ( cl(    exists( Diver1,   ( happens(rotateYaw(Diver),Time)  ;    not( happens(ascend1(Diver),Time)) ;     happens(rapidAscendToSurface(Diver),Time) ;     holds(holding(Diver,Diver1),Time))),       [])).
 %  % =================================.

% fluent UnderWater(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3620).
%~ From E:
%~ 
%~ fluent( underWater(object))
%~ cpc :- fluents([underWater/1])
%~ ooo :- [   cl([fluents([underWater/1])],[])]
%~ cpc :- mpred_prop(underWater(object),fluent)
%~ ooo :- [   cl([mpred_prop(underWater(object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3620).
cl(mpred_prop(underWater(object),fluent),[]),cl(fluents(underWater/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3623).
% [object,depth,time]
% depth>% 0 &
% HoldsAt(AtDepth(object,depth),time) ->
% HoldsAt(UnderWater(object),time).
%~ From E:
%~ 
%~ Depth>0,holds(atDepth(Object,Depth),Time) ->         holds(underWater(Object),Time)
%~ cpc :- Depth>0,holds(atDepth(Object,Depth),Time) ->         holds(underWater(Object),Time)
%~ ooo :- [   cl(    [   holds(underWater(Object),Time)],       [      comparison(Depth,0,>),           holds(atDepth(Object,Depth),Time)])]
cl(    holds(underWater(Object),Time),       comparison(Depth,0,>),holds(atDepth(Object,Depth),Time)).
 %  cl(    holds(underWater(Object),Time),       comparison(Depth,0,>),holds(atDepth(Object,Depth),Time)).
 %  % =================================.

% event EnterWater(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3627).
%~ From E:
%~ 
%~ event( enterWater(object))
%~ cpc :- events([enterWater/1])
%~ ooo :- [   cl([events([enterWater/1])],[])]
%~ cpc :- mpred_prop(enterWater(object),event)
%~ ooo :- [   cl([mpred_prop(enterWater(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3627).
cl(mpred_prop(enterWater(object),event),[]),cl(events(enterWater/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3630).
% event Surface(object)
%~ From E:
%~ 
%~ event( surface(object))
%~ cpc :- events([surface/1])
%~ ooo :- [   cl([events([surface/1])],[])]
%~ cpc :- mpred_prop(surface(object),event)
%~ ooo :- [   cl([mpred_prop(surface(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3630).
cl(mpred_prop(surface(object),event),[]),cl(events(surface/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3632).
% [object,time]
% Initiates(EnterWater(object),UnderWater(object),time).
%~ From E:
%~ 
%~ initiates_at(enterWater(Object),underWater(Object),Time)
%~ cpc :- initiates(enterWater(Object),underWater(Object),Time)
%~ ooo :- [   cl([initiates(enterWater(Object),underWater(Object),Time)],[])]
cl(initiates(enterWater(Object),underWater(Object),Time),[]).
 %  cl(initiates(enterWater(Object),underWater(Object),Time),[]).
 %  % =================================.


% [diver,time]
% Happens(EnterWater(diver),time) ->
% !{diver1} HoldsAt(Holding(diver1,diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3636).
%~ From E:
%~ 
%~ happens(enterWater(Diver),Time) ->         not( thereExists(Diver1,holds(holding(Diver1,Diver),Time)))
%~ cpc :- happens(enterWater(Diver),Time) ->         not( thereExists(Diver1,holds(holding(Diver1,Diver),Time)))
%~ ooo :- [   cl(    [   exists( Diver1,   (     not( holds(holding(Diver1,Diver),Time)) ;     not( happens(enterWater(Diver),Time))))],       [])]
cl(    exists( Diver1,   (     not( holds(holding(Diver1,Diver),Time)) ;     not( happens(enterWater(Diver),Time)))),       []).
 %  ( cl(    exists( Diver1,   (     not( holds(holding(Diver1,Diver),Time)) ;     not( happens(enterWater(Diver),Time)))),       [])).
 %  % =================================.


% [object,depth,time]
% depth=% 0 ->
% Initiates(EnterWater(object),AtDepth(object,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3640).
%~ From E:
%~ 
%~ Depth=0 ->         initiates_at(enterWater(Object),atDepth(Object,Depth),Time)
%~ cpc :- Depth=0
%~ ooo :- [   cl([equals(Depth,0)],[])]
%~ cpc :- if(    initiates(enterWater(Object),at(atDepth(Object,Depth),Time)),       cl([equals(Depth,0)],[]))
%~ ooo :- [   cl(    [   if(    initiates(enterWater(Object),at(atDepth(Object,Depth),Time)),       cl([equals(Depth,0)],[]))],       [])]
cl(    (     enterWater(Object)initiates atDepth(Object,Depth)at Time if     cl(equals(Depth,0),[])),       []).
 %  cl(    if(    initiates(enterWater(Object),at(atDepth(Object,Depth),Time)),       cl(equals(Depth,0),[])),       []).
 %  % =================================.


% [object,time]
% Terminates(Surface(object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3644).
%~ From E:
%~ 
%~ terminates_at(surface(Object),underWater(Object),Time)
%~ cpc :- terminates(surface(Object),underWater(Object),Time)
%~ ooo :- [   cl([terminates(surface(Object),underWater(Object),Time)],[])]
cl(terminates(surface(Object),underWater(Object),Time),[]).
 %  cl(terminates(surface(Object),underWater(Object),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3646).
% [diver,time]
% Terminates(Surface(diver),PositivelyBuoyant(diver),time).
%~ From E:
%~ 
%~ terminates_at(surface(Diver),positivelyBuoyant(Diver),Time)
%~ cpc :- terminates(surface(Diver),positivelyBuoyant(Diver),Time)
%~ ooo :- [   cl([terminates(surface(Diver),positivelyBuoyant(Diver),Time)],[])]
cl(terminates(surface(Diver),positivelyBuoyant(Diver),Time),[]).
 %  cl(terminates(surface(Diver),positivelyBuoyant(Diver),Time),[]).
 %  % =================================.


% [diver,time]
% Terminates(Surface(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3650).
%~ From E:
%~ 
%~ terminates_at(surface(Diver),negativelyBuoyant(Diver),Time)
%~ cpc :- terminates(surface(Diver),negativelyBuoyant(Diver),Time)
%~ ooo :- [   cl([terminates(surface(Diver),negativelyBuoyant(Diver),Time)],[])]
cl(terminates(surface(Diver),negativelyBuoyant(Diver),Time),[]).
 %  cl(terminates(surface(Diver),negativelyBuoyant(Diver),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3652).
% [diver,time]
% Terminates(Surface(diver),NeutrallyBuoyant(diver),time).
%~ From E:
%~ 
%~ terminates_at(surface(Diver),neutrallyBuoyant(Diver),Time)
%~ cpc :- terminates(surface(Diver),neutrallyBuoyant(Diver),Time)
%~ ooo :- [   cl([terminates(surface(Diver),neutrallyBuoyant(Diver),Time)],[])]
cl(terminates(surface(Diver),neutrallyBuoyant(Diver),Time),[]).
 %  cl(terminates(surface(Diver),neutrallyBuoyant(Diver),Time),[]).
 %  % =================================.


% [object,depth,time]
% Terminates(Surface(object),AtDepth(object,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3656).
%~ From E:
%~ 
%~ terminates_at(surface(Object),atDepth(Object,Depth),Time)
%~ cpc :- terminates(surface(Object),atDepth(Object,Depth),Time)
%~ ooo :- [   cl([terminates(surface(Object),atDepth(Object,Depth),Time)],[])]
cl(terminates(surface(Object),atDepth(Object,Depth),Time),[]).
 %  cl(terminates(surface(Object),atDepth(Object,Depth),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3658).
% [diver,time]
 % Happens(EnterWater(diver),time) ->
% HoldsAt(Vertical(diver),time).
%~ From E:
%~ 
%~ happens(enterWater(Diver),Time) ->         holds(vertical(Diver),Time)
%~ cpc :- happens(enterWater(Diver),Time) ->         holds(vertical(Diver),Time)
%~ ooo :- [   cl(    [   holds(vertical(Diver),Time)],       [      happens(enterWater(Diver),Time)])]
cl(holds(vertical(Diver),Time),happens(enterWater(Diver),Time)).
 %  cl(holds(vertical(Diver),Time),happens(enterWater(Diver),Time)).
 %  % =================================.

% fluent StandingOn(diver,boat)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3660).
%~ From E:
%~ 
%~ fluent( standingOn(diver,boat))
%~ cpc :- fluents([standingOn/2])
%~ ooo :- [   cl([fluents([standingOn/2])],[])]
%~ cpc :- mpred_prop(standingOn(diver,boat),fluent)
%~ ooo :- [   cl([mpred_prop(standingOn(diver,boat),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3660).
cl(mpred_prop(standingOn(diver,boat),fluent),[]),cl(fluents(standingOn/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3663).
% event StandOn(diver,boat)
%~ From E:
%~ 
%~ event( standOn(diver,boat))
%~ cpc :- events([standOn/2])
%~ ooo :- [   cl([events([standOn/2])],[])]
%~ cpc :- actions([standOn/2])
%~ ooo :- [   cl([actions([standOn/2])],[])]
%~ cpc :- mpred_prop(standOn(diver,boat),action)
%~ ooo :- [   cl([mpred_prop(standOn(diver,boat),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3663).
( cl(events(standOn/2),[])  ,    cl(mpred_prop(standOn(diver,boat),action),[]) ,     cl(actions(standOn/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3665).
% [diver,boat,time]
% Terminates(EnterWater(diver),StandingOn(diver,boat),time).
%~ From E:
%~ 
%~ terminates_at(enterWater(Diver),standingOn(Diver,Boat),Time)
%~ cpc :- terminates(enterWater(Diver),standingOn(Diver,Boat),Time)
%~ ooo :- [   cl([terminates(enterWater(Diver),standingOn(Diver,Boat),Time)],[])]
cl(terminates(enterWater(Diver),standingOn(Diver,Boat),Time),[]).
 %  cl(terminates(enterWater(Diver),standingOn(Diver,Boat),Time),[]).
 %  % =================================.


% [diver,boat,time]
% Initiates(StandOn(diver,boat),StandingOn(diver,boat),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3669).
%~ From E:
%~ 
%~ initiates_at(standOn(Diver,Boat),standingOn(Diver,Boat),Time)
%~ cpc :- initiates(standOn(Diver,Boat),standingOn(Diver,Boat),Time)
%~ ooo :- [   cl(    [   initiates(standOn(Diver,Boat),standingOn(Diver,Boat),Time)],       [])]
cl(initiates(standOn(Diver,Boat),standingOn(Diver,Boat),Time),[]).
 %  cl(initiates(standOn(Diver,Boat),standingOn(Diver,Boat),Time),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3671).
% fluent PositivelyBuoyant(diver)
%~ From E:
%~ 
%~ fluent( positivelyBuoyant(diver))
%~ cpc :- fluents([positivelyBuoyant/1])
%~ ooo :- [   cl([fluents([positivelyBuoyant/1])],[])]
%~ cpc :- mpred_prop(positivelyBuoyant(diver),fluent)
%~ ooo :- [   cl([mpred_prop(positivelyBuoyant(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3671).
cl(mpred_prop(positivelyBuoyant(diver),fluent),[]),cl(fluents(positivelyBuoyant/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3673).
% fluent NeutrallyBuoyant(diver)
%~ From E:
%~ 
%~ fluent( neutrallyBuoyant(diver))
%~ cpc :- fluents([neutrallyBuoyant/1])
%~ ooo :- [   cl([fluents([neutrallyBuoyant/1])],[])]
%~ cpc :- mpred_prop(neutrallyBuoyant(diver),fluent)
%~ ooo :- [   cl([mpred_prop(neutrallyBuoyant(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3673).
cl(mpred_prop(neutrallyBuoyant(diver),fluent),[]),cl(fluents(neutrallyBuoyant/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3675).
% fluent NegativelyBuoyant(diver)
%~ From E:
%~ 
%~ fluent( negativelyBuoyant(diver))
%~ cpc :- fluents([negativelyBuoyant/1])
%~ ooo :- [   cl([fluents([negativelyBuoyant/1])],[])]
%~ cpc :- mpred_prop(negativelyBuoyant(diver),fluent)
%~ ooo :- [   cl([mpred_prop(negativelyBuoyant(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3675).
cl(mpred_prop(negativelyBuoyant(diver),fluent),[]),cl(fluents(negativelyBuoyant/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3677).
% mutex PositivelyBuoyant, NeutrallyBuoyant, NegativelyBuoyant
%~ From E:
%~ 
%~ :-( call_pel_directive( mutex(positivelyBuoyant)))
:-( call_pel_directive( mutex(positivelyBuoyant))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3677).
%~ From E:
%~ 
%~ :-( call_pel_directive( mutex(neutrallyBuoyant)))
:-( call_pel_directive( mutex(neutrallyBuoyant))).
%~ From E:
%~ 
%~ :-( call_pel_directive( mutex(negativelyBuoyant)))
:-( call_pel_directive( mutex(negativelyBuoyant))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3679).
% [diver,time]
% HoldsAt(PositivelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
%~ From E:
%~ 
%~ holds(positivelyBuoyant(Diver),Time) ->         holds(underWater(Diver),Time)
%~ cpc :- holds(positivelyBuoyant(Diver),Time) ->         holds(underWater(Diver),Time)
%~ ooo :- [   cl(    [   holds(underWater(Diver),Time)],       [      holds(positivelyBuoyant(Diver),Time)])]
cl(holds(underWater(Diver),Time),holds(positivelyBuoyant(Diver),Time)).
 %  cl(holds(underWater(Diver),Time),holds(positivelyBuoyant(Diver),Time)).
 %  % =================================.


% [diver,time]
% HoldsAt(NeutrallyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3684).
%~ From E:
%~ 
%~ holds(neutrallyBuoyant(Diver),Time) ->         holds(underWater(Diver),Time)
%~ cpc :- holds(neutrallyBuoyant(Diver),Time) ->         holds(underWater(Diver),Time)
%~ ooo :- [   cl(    [   holds(underWater(Diver),Time)],       [      holds(neutrallyBuoyant(Diver),Time)])]
cl(holds(underWater(Diver),Time),holds(neutrallyBuoyant(Diver),Time)).
 %  cl(holds(underWater(Diver),Time),holds(neutrallyBuoyant(Diver),Time)).
 %  % =================================.


% [diver,time]
% HoldsAt(NegativelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3688).
%~ From E:
%~ 
%~ holds(negativelyBuoyant(Diver),Time) ->         holds(underWater(Diver),Time)
%~ cpc :- holds(negativelyBuoyant(Diver),Time) ->         holds(underWater(Diver),Time)
%~ ooo :- [   cl(    [   holds(underWater(Diver),Time)],       [      holds(negativelyBuoyant(Diver),Time)])]
cl(holds(underWater(Diver),Time),holds(negativelyBuoyant(Diver),Time)).
 %  cl(holds(underWater(Diver),Time),holds(negativelyBuoyant(Diver),Time)).
 %  % =================================.

% event PressDeflateButton(diver,bc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3690).
%~ From E:
%~ 
%~ event( pressDeflateButton(diver,bc))
%~ cpc :- events([pressDeflateButton/2])
%~ ooo :- [   cl([events([pressDeflateButton/2])],[])]
%~ cpc :- actions([pressDeflateButton/2])
%~ ooo :- [   cl([actions([pressDeflateButton/2])],[])]
%~ cpc :- mpred_prop(pressDeflateButton(diver,bc),action)
%~ ooo :- [   cl([mpred_prop(pressDeflateButton(diver,bc),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3690).
( cl(events(pressDeflateButton/2),[])  ,    cl(mpred_prop(pressDeflateButton(diver,bc),action),[]) ,     cl(actions(pressDeflateButton/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3693).
% event PressDumpButton(diver,bc)
%~ From E:
%~ 
%~ event( pressDumpButton(diver,bc))
%~ cpc :- events([pressDumpButton/2])
%~ ooo :- [   cl([events([pressDumpButton/2])],[])]
%~ cpc :- actions([pressDumpButton/2])
%~ ooo :- [   cl([actions([pressDumpButton/2])],[])]
%~ cpc :- mpred_prop(pressDumpButton(diver,bc),action)
%~ ooo :- [   cl([mpred_prop(pressDumpButton(diver,bc),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3693).
( cl(events(pressDumpButton/2),[])  ,    cl(mpred_prop(pressDumpButton(diver,bc),action),[]) ,     cl(actions(pressDumpButton/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3695).
% event PressInflateButton(diver,bc)
%~ From E:
%~ 
%~ event( pressInflateButton(diver,bc))
%~ cpc :- events([pressInflateButton/2])
%~ ooo :- [   cl([events([pressInflateButton/2])],[])]
%~ cpc :- actions([pressInflateButton/2])
%~ ooo :- [   cl([actions([pressInflateButton/2])],[])]
%~ cpc :- mpred_prop(pressInflateButton(diver,bc),action)
%~ ooo :- [   cl([mpred_prop(pressInflateButton(diver,bc),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3695).
( cl(events(pressInflateButton/2),[])  ,    cl(mpred_prop(pressInflateButton(diver,bc),action),[]) ,     cl(actions(pressInflateButton/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3697).
% [diver,bc,time]
% Happens(PressDeflateButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
%~ From E:
%~ 
%~ happens(pressDeflateButton(Diver,Bc),Time) ->         holds(vertical(Diver),Time),holds(underWater(Bc),Time)
%~ cpc :- happens(pressDeflateButton(Diver,Bc),Time) ->         holds(vertical(Diver),Time),holds(underWater(Bc),Time)
%~ ooo :- [   cl(    [   holds(vertical(Diver),Time)],       [      happens(pressDeflateButton(Diver,Bc),Time)]),     cl(      [   holds(underWater(Bc),Time)],           [        happens(pressDeflateButton(Diver,Bc),Time)])]
(     cl(      holds(vertical(Diver),Time),           happens(pressDeflateButton(Diver,Bc),Time)) ,     cl(      holds(underWater(Bc),Time),           happens(pressDeflateButton(Diver,Bc),Time))).
 %  (     cl(      holds(vertical(Diver),Time),           happens(pressDeflateButton(Diver,Bc),Time)) ,     cl(      holds(underWater(Bc),Time),           happens(pressDeflateButton(Diver,Bc),Time))).
 %  % =================================.


% [diver,bc,time]
% Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3703).
%~ From E:
%~ 
%~ happens(pressDumpButton(Diver,Bc),Time) ->         holds(vertical(Diver),Time),holds(underWater(Bc),Time)
%~ cpc :- happens(pressDumpButton(Diver,Bc),Time) ->         holds(vertical(Diver),Time),holds(underWater(Bc),Time)
%~ ooo :- [   cl(    [   holds(vertical(Diver),Time)],       [      happens(pressDumpButton(Diver,Bc),Time)]),     cl(      [   holds(underWater(Bc),Time)],           [        happens(pressDumpButton(Diver,Bc),Time)])]
(     cl(      holds(vertical(Diver),Time),           happens(pressDumpButton(Diver,Bc),Time)) ,     cl(      holds(underWater(Bc),Time),           happens(pressDumpButton(Diver,Bc),Time))).
 %  (     cl(      holds(vertical(Diver),Time),           happens(pressDumpButton(Diver,Bc),Time)) ,     cl(      holds(underWater(Bc),Time),           happens(pressDumpButton(Diver,Bc),Time))).
 %  % =================================.


% [diver,bc,time]
 % Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3706).
%~ From E:
%~ 
%~ happens(pressDumpButton(Diver,Bc),Time) ->         holds(uncontrolledBuoyancy(Diver),Time)
%~ cpc :- happens(pressDumpButton(Diver,Bc),Time) ->         holds(uncontrolledBuoyancy(Diver),Time)
%~ ooo :- [   cl(    [   holds(uncontrolledBuoyancy(Diver),Time)],       [      happens(pressDumpButton(Diver,Bc),Time)])]
cl(    holds(uncontrolledBuoyancy(Diver),Time),       happens(pressDumpButton(Diver,Bc),Time)).
 %  cl(    holds(uncontrolledBuoyancy(Diver),Time),       happens(pressDumpButton(Diver,Bc),Time)).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDeflateButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3711).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         initiates_at(pressDeflateButton(Diver,Bc),negativelyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    initiates(pressDeflateButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(pressDeflateButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressDeflateButton(Diver,Bc)initiates negativelyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    initiates(pressDeflateButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3715).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         terminates_at(pressDeflateButton(Diver,Bc),neutrallyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    terminates(pressDeflateButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(pressDeflateButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressDeflateButton(Diver,Bc)terminates neutrallyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    terminates(pressDeflateButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3719).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         terminates_at(pressDeflateButton(Diver,Bc),positivelyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    terminates(pressDeflateButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(pressDeflateButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressDeflateButton(Diver,Bc)terminates positivelyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    terminates(pressDeflateButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDumpButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3723).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         initiates_at(pressDumpButton(Diver,Bc),negativelyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    initiates(pressDumpButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(pressDumpButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressDumpButton(Diver,Bc)initiates negativelyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    initiates(pressDumpButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3727).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         terminates_at(pressDumpButton(Diver,Bc),neutrallyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    terminates(pressDumpButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(pressDumpButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressDumpButton(Diver,Bc)terminates neutrallyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    terminates(pressDumpButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3731).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         terminates_at(pressDumpButton(Diver,Bc),positivelyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    terminates(pressDumpButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(pressDumpButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressDumpButton(Diver,Bc)terminates positivelyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    terminates(pressDumpButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressInflateButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3735).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         initiates_at(pressInflateButton(Diver,Bc),neutrallyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    initiates(pressInflateButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(pressInflateButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressInflateButton(Diver,Bc)initiates neutrallyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    initiates(pressInflateButton(Diver,Bc),at(neutrallyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3739).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         terminates_at(pressInflateButton(Diver,Bc),positivelyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    terminates(pressInflateButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(pressInflateButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressInflateButton(Diver,Bc)terminates positivelyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    terminates(pressInflateButton(Diver,Bc),at(positivelyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3743).
%~ From E:
%~ 
%~ holds(wearing(Diver,Bc),Time) ->         terminates_at(pressInflateButton(Diver,Bc),negativelyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Bc),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Bc),Time)],[])]
%~ cpc :- if(    terminates(pressInflateButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(pressInflateButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Bc),Time)],[]))],       [])]
cl(    (     pressInflateButton(Diver,Bc)terminates negativelyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  cl(    if(    terminates(pressInflateButton(Diver,Bc),at(negativelyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Bc),Time),[])),       []).
 %  % =================================.


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Initiates(TakeOff(diver,weight),PositivelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3747).
%~ From E:
%~ 
%~ holds(wearing(Diver,Weight),Time) ->         initiates_at(takeOff(Diver,Weight),positivelyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Weight),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Weight),Time)],[])]
%~ cpc :- if(    initiates(takeOff(Diver,Weight),at(positivelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Weight),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(takeOff(Diver,Weight),at(positivelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Weight),Time)],[]))],       [])]
cl(    (     takeOff(Diver,Weight)initiates positivelyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Weight),Time),[])),       []).
 %  cl(    if(    initiates(takeOff(Diver,Weight),at(positivelyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Weight),Time),[])),       []).
 %  % =================================.


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3751).
%~ From E:
%~ 
%~ holds(wearing(Diver,Weight),Time) ->         terminates_at(takeOff(Diver,Weight),negativelyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Weight),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Weight),Time)],[])]
%~ cpc :- if(    terminates(takeOff(Diver,Weight),at(negativelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Weight),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(takeOff(Diver,Weight),at(negativelyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Weight),Time)],[]))],       [])]
cl(    (     takeOff(Diver,Weight)terminates negativelyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Weight),Time),[])),       []).
 %  cl(    if(    terminates(takeOff(Diver,Weight),at(negativelyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Weight),Time),[])),       []).
 %  % =================================.


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NeutrallyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3755).
%~ From E:
%~ 
%~ holds(wearing(Diver,Weight),Time) ->         terminates_at(takeOff(Diver,Weight),neutrallyBuoyant(Diver),Time)
%~ cpc :- holds(wearing(Diver,Weight),Time)
%~ ooo :- [   cl([holds(wearing(Diver,Weight),Time)],[])]
%~ cpc :- if(    terminates(takeOff(Diver,Weight),at(neutrallyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Weight),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(takeOff(Diver,Weight),at(neutrallyBuoyant(Diver),Time)),       cl([holds(wearing(Diver,Weight),Time)],[]))],       [])]
cl(    (     takeOff(Diver,Weight)terminates neutrallyBuoyant(Diver)at Time if     cl(holds(wearing(Diver,Weight),Time),[])),       []).
 %  cl(    if(    terminates(takeOff(Diver,Weight),at(neutrallyBuoyant(Diver),Time)),       cl(holds(wearing(Diver,Weight),Time),[])),       []).
 %  % =================================.

% fluent UncontrolledBuoyancy(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3757).
%~ From E:
%~ 
%~ fluent( uncontrolledBuoyancy(diver))
%~ cpc :- fluents([uncontrolledBuoyancy/1])
%~ ooo :- [   cl([fluents([uncontrolledBuoyancy/1])],[])]
%~ cpc :- mpred_prop(uncontrolledBuoyancy(diver),fluent)
%~ ooo :- [   cl([mpred_prop(uncontrolledBuoyancy(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3757).
cl(mpred_prop(uncontrolledBuoyancy(diver),fluent),[]),cl(fluents(uncontrolledBuoyancy/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3760).
% event LoseBuoyancyControl(diver)
%~ From E:
%~ 
%~ event( loseBuoyancyControl(diver))
%~ cpc :- events([loseBuoyancyControl/1])
%~ ooo :- [   cl([events([loseBuoyancyControl/1])],[])]
%~ cpc :- actions([loseBuoyancyControl/1])
%~ ooo :- [   cl([actions([loseBuoyancyControl/1])],[])]
%~ cpc :- mpred_prop(loseBuoyancyControl(diver),action)
%~ ooo :- [   cl([mpred_prop(loseBuoyancyControl(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3760).
( cl(events(loseBuoyancyControl/1),[])  ,    cl(mpred_prop(loseBuoyancyControl(diver),action),[]) ,     cl(actions(loseBuoyancyControl/1),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3762).
% predicate IsInexperiencedDiver(diver)
%~ From E:
%~ 
%~ predicate( isInexperiencedDiver(diver))
%~ cpc :- predicates([isInexperiencedDiver/1])
%~ ooo :- [   cl([predicates([isInexperiencedDiver/1])],[])]
%~ cpc :- mpred_prop(isInexperiencedDiver(diver),predicate)
%~ ooo :- [   cl([mpred_prop(isInexperiencedDiver(diver),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3762).
cl(mpred_prop(isInexperiencedDiver(diver),predicate),[]),cl(predicates(isInexperiencedDiver/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3764).
% [diver,time]
% Happens(LoseBuoyancyControl(diver),time) ->
% IsInexperiencedDiver(diver).
%~ From E:
%~ 
%~ happens(loseBuoyancyControl(Diver),Time) ->         isInexperiencedDiver(Diver)
%~ cpc :- happens(loseBuoyancyControl(Diver),Time) ->         isInexperiencedDiver(Diver)
%~ ooo :- [   cl(    [   isInexperiencedDiver(Diver)],       [      happens(loseBuoyancyControl(Diver),Time)])]
cl(isInexperiencedDiver(Diver),happens(loseBuoyancyControl(Diver),Time)).
 %  cl(isInexperiencedDiver(Diver),happens(loseBuoyancyControl(Diver),Time)).
 %  % =================================.


% [diver,time]
% Initiates(LoseBuoyancyControl(diver),UncontrolledBuoyancy(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3769).
%~ From E:
%~ 
%~ initiates_at(loseBuoyancyControl(Diver),uncontrolledBuoyancy(Diver),Time)
%~ cpc :- initiates(loseBuoyancyControl(Diver),uncontrolledBuoyancy(Diver),Time)
%~ ooo :- [   cl([initiates(loseBuoyancyControl(Diver),uncontrolledBuoyancy(Diver),Time)],[])]
cl(initiates(loseBuoyancyControl(Diver),uncontrolledBuoyancy(Diver),Time),[]).
 %  cl(initiates(loseBuoyancyControl(Diver),uncontrolledBuoyancy(Diver),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3771).
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),PositivelyBuoyant(diver),time).
%~ From E:
%~ 
%~ initiates_at(loseBuoyancyControl(Diver),positivelyBuoyant(Diver),Time)
%~ cpc :- initiates(loseBuoyancyControl(Diver),positivelyBuoyant(Diver),Time)
%~ ooo :- [   cl([initiates(loseBuoyancyControl(Diver),positivelyBuoyant(Diver),Time)],[])]
cl(initiates(loseBuoyancyControl(Diver),positivelyBuoyant(Diver),Time),[]).
 %  cl(initiates(loseBuoyancyControl(Diver),positivelyBuoyant(Diver),Time),[]).
 %  % =================================.


% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3775).
%~ From E:
%~ 
%~ terminates_at(loseBuoyancyControl(Diver),negativelyBuoyant(Diver),Time)
%~ cpc :- terminates(loseBuoyancyControl(Diver),negativelyBuoyant(Diver),Time)
%~ ooo :- [   cl([terminates(loseBuoyancyControl(Diver),negativelyBuoyant(Diver),Time)],[])]
cl(terminates(loseBuoyancyControl(Diver),negativelyBuoyant(Diver),Time),[]).
 %  cl(terminates(loseBuoyancyControl(Diver),negativelyBuoyant(Diver),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3777).
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NeutrallyBuoyant(diver),time).
%~ From E:
%~ 
%~ terminates_at(loseBuoyancyControl(Diver),neutrallyBuoyant(Diver),Time)
%~ cpc :- terminates(loseBuoyancyControl(Diver),neutrallyBuoyant(Diver),Time)
%~ ooo :- [   cl([terminates(loseBuoyancyControl(Diver),neutrallyBuoyant(Diver),Time)],[])]
cl(terminates(loseBuoyancyControl(Diver),neutrallyBuoyant(Diver),Time),[]).
 %  cl(terminates(loseBuoyancyControl(Diver),neutrallyBuoyant(Diver),Time),[]).
 %  % =================================.


%; determining fluent

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3781).
% fluent AscendDescendAmount(diver,depth)
%~ From E:
%~ 
%~ fluent( ascendDescendAmount(diver,depth))
%~ cpc :- fluents([ascendDescendAmount/2])
%~ ooo :- [   cl([fluents([ascendDescendAmount/2])],[])]
%~ cpc :- mpred_prop(ascendDescendAmount(diver,depth),fluent)
%~ ooo :- [   cl([mpred_prop(ascendDescendAmount(diver,depth),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3781).
cl(mpred_prop(ascendDescendAmount(diver,depth),fluent),[]),cl(fluents(ascendDescendAmount/2),[]).

% noninertial AscendDescendAmount
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(ascendDescendAmount)))
:-( call_pel_directive( noninertial(ascendDescendAmount))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3784).
% [diver,depth1,depth2,time]
% HoldsAt(AscendDescendAmount(diver,depth1),time) &
% HoldsAt(AscendDescendAmount(diver,depth2),time) ->
% depth1=depth2.
%~ From E:
%~ 
%~ (     holds(ascendDescendAmount(Diver,Depth1),Time) ,     holds(ascendDescendAmount(Diver,Depth2),Time)) ->         Depth1=Depth2
%~ cpc :- (     holds(ascendDescendAmount(Diver,Depth1),Time) ,     holds(ascendDescendAmount(Diver,Depth2),Time)) ->         Depth1=Depth2
%~ ooo :- [   cl(    [   equals(Depth1,Depth2)],       [      holds(ascendDescendAmount(Diver,Depth1),Time),           holds(ascendDescendAmount(Diver,Depth2),Time)])]
cl( equals(Depth1,Depth2),   (     holds(ascendDescendAmount(Diver,Depth1),Time) ,     holds(ascendDescendAmount(Diver,Depth2),Time))).
 %  cl( equals(Depth1,Depth2),   (     holds(ascendDescendAmount(Diver,Depth1),Time) ,     holds(ascendDescendAmount(Diver,Depth2),Time))).
 %  % =================================.


% [diver,depth,time]
% Happens(Descend(diver,depth),time) ->
% HoldsAt(NegativelyBuoyant(diver),time) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth-depth1),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3790).
%~ From E:
%~ 
%~ happens(descend(Diver,Depth),Time) ->         (     holds(negativelyBuoyant(Diver),Time) ,     thereExists( Depth1,     (     holds(ascendDescendAmount(Diver,Depth1),Time) ,     holds(atDepth(Diver,Depth-Depth1),Time))))
%~ cpc :- happens(descend(Diver,Depth),Time) ->         (     holds(negativelyBuoyant(Diver),Time) ,     thereExists( Depth1,     (     holds(ascendDescendAmount(Diver,Depth1),Time) ,     holds(atDepth(Diver,Depth-Depth1),Time))))
%~ ooo :- [   cl(    [   exists( Depth1,   (     ( holds(negativelyBuoyant(Diver),Time)  ,        holds(ascendDescendAmount(Diver,Depth1),Time) ,         holds(atDepth(Diver,Depth-Depth1),Time)) ;     not( happens(descend(Diver,Depth),Time))))],       [])]
cl(    exists( Depth1,   (     ( holds(negativelyBuoyant(Diver),Time)  ,        holds(ascendDescendAmount(Diver,Depth1),Time) ,         holds(atDepth(Diver,Depth-Depth1),Time)) ;     not( happens(descend(Diver,Depth),Time)))),       []).
 %  cl(    exists( Depth1,   (     ( holds(negativelyBuoyant(Diver),Time)  ,        holds(ascendDescendAmount(Diver,Depth1),Time) ,         holds(atDepth(Diver,Depth-Depth1),Time)) ;     not( happens(descend(Diver,Depth),Time)))),       []).
 %  % =================================.

% event KickUp(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3795).
%~ From E:
%~ 
%~ event( kickUp(diver))
%~ cpc :- events([kickUp/1])
%~ ooo :- [   cl([events([kickUp/1])],[])]
%~ cpc :- actions([kickUp/1])
%~ ooo :- [   cl([actions([kickUp/1])],[])]
%~ cpc :- mpred_prop(kickUp(diver),action)
%~ ooo :- [   cl([mpred_prop(kickUp(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3795).
( cl(events(kickUp/1),[])  ,    cl(mpred_prop(kickUp(diver),action),[]) ,     cl(actions(kickUp/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
% [diver,depth,time]
% Happens(Ascend(diver,depth),time) ->
% (HoldsAt(PositivelyBuoyant(diver),time) |
%  (HoldsAt(NeutrallyBuoyant(diver),time) & Happens(KickUp(diver),time))) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth+depth1),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
%~ From E:
%~ 
%~ happens(ascend(Diver,Depth),Time) ->         (     (         holds(positivelyBuoyant(Diver),Time) ;         holds(neutrallyBuoyant(Diver),Time),happens(kickUp(Diver),Time)) ,     thereExists( Depth1,     (     holds(ascendDescendAmount(Diver,Depth1),Time) ,     holds(atDepth(Diver,Depth+Depth1),Time))))
%~ cpc :- happens(ascend(Diver,Depth),Time) ->         (     (         holds(positivelyBuoyant(Diver),Time) ;         holds(neutrallyBuoyant(Diver),Time),happens(kickUp(Diver),Time)) ,     thereExists( Depth1,     (     holds(ascendDescendAmount(Diver,Depth1),Time) ,     holds(atDepth(Diver,Depth+Depth1),Time))))
%~ ooo :- [   cl(    [   exists( Depth1,   (     ( (     holds(positivelyBuoyant(Diver),Time) ;     holds(neutrallyBuoyant(Diver),Time),happens(kickUp(Diver),Time))  ,        holds(ascendDescendAmount(Diver,Depth1),Time) ,         holds(atDepth(Diver,Depth+Depth1),Time)) ;     not( happens(ascend(Diver,Depth),Time))))],       [])]
cl(    exists( Depth1,   (     ( (     holds(positivelyBuoyant(Diver),Time) ;     holds(neutrallyBuoyant(Diver),Time),happens(kickUp(Diver),Time))  ,        holds(ascendDescendAmount(Diver,Depth1),Time) ,         holds(atDepth(Diver,Depth+Depth1),Time)) ;     not( happens(ascend(Diver,Depth),Time)))),       []).
 %  cl(    exists( Depth1,   (     ( (     holds(positivelyBuoyant(Diver),Time) ;     holds(neutrallyBuoyant(Diver),Time),happens(kickUp(Diver),Time))  ,        holds(ascendDescendAmount(Diver,Depth1),Time) ,         holds(atDepth(Diver,Depth+Depth1),Time)) ;     not( happens(ascend(Diver,Depth),Time)))),       []).
 %  % =================================.


% [diver,time]
% Happens(KickUp(diver),time) ->
% HoldsAt(Vertical(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3807).
%~ From E:
%~ 
%~ happens(kickUp(Diver),Time) ->         holds(vertical(Diver),Time)
%~ cpc :- happens(kickUp(Diver),Time) ->         holds(vertical(Diver),Time)
%~ ooo :- [   cl([holds(vertical(Diver),Time)],[happens(kickUp(Diver),Time)])]
cl(holds(vertical(Diver),Time),happens(kickUp(Diver),Time)).
 %  cl(holds(vertical(Diver),Time),happens(kickUp(Diver),Time)).
 %  % =================================.

% event SwimAround(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3809).
%~ From E:
%~ 
%~ event( swimAround(diver))
%~ cpc :- events([swimAround/1])
%~ ooo :- [   cl([events([swimAround/1])],[])]
%~ cpc :- actions([swimAround/1])
%~ ooo :- [   cl([actions([swimAround/1])],[])]
%~ cpc :- mpred_prop(swimAround(diver),action)
%~ ooo :- [   cl([mpred_prop(swimAround(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3809).
( cl(events(swimAround/1),[])  ,    cl(mpred_prop(swimAround(diver),action),[]) ,     cl(actions(swimAround/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3812).
% [diver,time]
% Happens(SwimAround(diver),time) ->
% HoldsAt(HorizontalDown(diver),time).
%~ From E:
%~ 
%~ happens(swimAround(Diver),Time) ->         holds(horizontalDown(Diver),Time)
%~ cpc :- happens(swimAround(Diver),Time) ->         holds(horizontalDown(Diver),Time)
%~ ooo :- [   cl(    [   holds(horizontalDown(Diver),Time)],       [      happens(swimAround(Diver),Time)])]
cl(holds(horizontalDown(Diver),Time),happens(swimAround(Diver),Time)).
 %  cl(holds(horizontalDown(Diver),Time),happens(swimAround(Diver),Time)).
 %  % =================================.


%; signaling

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3818).
% event SignalDescend(diver,diver)
%~ From E:
%~ 
%~ event( signalDescend(diver,diver))
%~ cpc :- events([signalDescend/2])
%~ ooo :- [   cl([events([signalDescend/2])],[])]
%~ cpc :- actions([signalDescend/2])
%~ ooo :- [   cl([actions([signalDescend/2])],[])]
%~ cpc :- mpred_prop(signalDescend(diver,diver),action)
%~ ooo :- [   cl([mpred_prop(signalDescend(diver,diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3818).
( cl(events(signalDescend/2),[])  ,    cl(mpred_prop(signalDescend(diver,diver),action),[]) ,     cl(actions(signalDescend/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3820).
% event SignalOutOfTime(diver,diver)
%~ From E:
%~ 
%~ event( signalOutOfTime(diver,diver))
%~ cpc :- events([signalOutOfTime/2])
%~ ooo :- [   cl([events([signalOutOfTime/2])],[])]
%~ cpc :- actions([signalOutOfTime/2])
%~ ooo :- [   cl([actions([signalOutOfTime/2])],[])]
%~ cpc :- mpred_prop(signalOutOfTime(diver,diver),action)
%~ ooo :- [   cl([mpred_prop(signalOutOfTime(diver,diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3820).
( cl(events(signalOutOfTime/2),[])  ,    cl(mpred_prop(signalOutOfTime(diver,diver),action),[]) ,     cl(actions(signalOutOfTime/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3822).
% event SignalAscend(diver,diver)
%~ From E:
%~ 
%~ event( signalAscend(diver,diver))
%~ cpc :- events([signalAscend/2])
%~ ooo :- [   cl([events([signalAscend/2])],[])]
%~ cpc :- actions([signalAscend/2])
%~ ooo :- [   cl([actions([signalAscend/2])],[])]
%~ cpc :- mpred_prop(signalAscend(diver,diver),action)
%~ ooo :- [   cl([mpred_prop(signalAscend(diver,diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3822).
( cl(events(signalAscend/2),[])  ,    cl(mpred_prop(signalAscend(diver,diver),action),[]) ,     cl(actions(signalAscend/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3824).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;Happens(SignalOutOfTime(diver1,diver2),time-1).
%;[diver1,diver2,time]
%;Happens(SignalDescend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalOutOfTime(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;event LookAt(agent,object)
%;fluent See(agent,object)
%;[agent,object,time]
%;Initiates(LookAt(agent,object),See(agent,object),time).
%;[agent,object1,object2,time]
%;object1!=object2 ->
%;Terminates(LookAt(agent,object1),
%;           See(agent,object2),
%;           time).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3856).
% event Descend1(diver)
%~ From E:
%~ 
%~ event( descend1(diver))
%~ cpc :- events([descend1/1])
%~ ooo :- [   cl([events([descend1/1])],[])]
%~ cpc :- actions([descend1/1])
%~ ooo :- [   cl([actions([descend1/1])],[])]
%~ cpc :- mpred_prop(descend1(diver),action)
%~ ooo :- [   cl([mpred_prop(descend1(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3856).
( cl(events(descend1/1),[])  ,    cl(mpred_prop(descend1(diver),action),[]) ,     cl(actions(descend1/1),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3858).
% event Ascend1(diver)
%~ From E:
%~ 
%~ event( ascend1(diver))
%~ cpc :- events([ascend1/1])
%~ ooo :- [   cl([events([ascend1/1])],[])]
%~ cpc :- actions([ascend1/1])
%~ ooo :- [   cl([actions([ascend1/1])],[])]
%~ cpc :- mpred_prop(ascend1(diver),action)
%~ ooo :- [   cl([mpred_prop(ascend1(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3858).
( cl(events(ascend1/1),[])  ,    cl(mpred_prop(ascend1(diver),action),[]) ,     cl(actions(ascend1/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3860).
%;[diver,object,time]
%;Terminates(Descend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(Ascend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(RotateYaw(diver),See(diver,object),time).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3869).
% event RapidAscendToSurface(diver)
%~ From E:
%~ 
%~ event( rapidAscendToSurface(diver))
%~ cpc :- events([rapidAscendToSurface/1])
%~ ooo :- [   cl([events([rapidAscendToSurface/1])],[])]
%~ cpc :- actions([rapidAscendToSurface/1])
%~ ooo :- [   cl([actions([rapidAscendToSurface/1])],[])]
%~ cpc :- mpred_prop(rapidAscendToSurface(diver),action)
%~ ooo :- [   cl([mpred_prop(rapidAscendToSurface(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3869).
( cl(events(rapidAscendToSurface/1),[])  ,    cl(mpred_prop(rapidAscendToSurface(diver),action),[]) ,     cl(actions(rapidAscendToSurface/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3871).
% [diver,time]
% Happens(Descend1(diver),time) <->
% ({depth} Happens(Descend(diver,depth),time)).
%~ From E:
%~ 
%~ (     happens(descend1(Diver),Time) <->     thereExists(Depth,happens(descend(Diver,Depth),Time)))
%~ cpc :- (     happens(descend1(Diver),Time) <->     thereExists(Depth,happens(descend(Diver,Depth),Time)))
%~ ooo :- [   cl(    [   exists( Depth,   exists( Depth,   (     (         happens(descend(Diver,Depth),Time) ;         not( happens(descend1(Diver),Time))) ,     (         happens(descend1(Diver),Time) ;         not( happens(descend(Diver,Depth),Time))))))],       [])]
cl(    exists( Depth,   exists( Depth,   (     (         happens(descend(Diver,Depth),Time) ;         not( happens(descend1(Diver),Time))) ,     (         happens(descend1(Diver),Time) ;         not( happens(descend(Diver,Depth),Time)))))),       []).
 %  cl(    exists( Depth,   exists( Depth,   (     (         happens(descend(Diver,Depth),Time) ;         not( happens(descend1(Diver),Time))) ,     (         happens(descend1(Diver),Time) ;         not( happens(descend(Diver,Depth),Time)))))),       []).
 %  % =================================.


% [diver,time]
% Happens(Ascend1(diver),time) <->
% ({depth} Happens(Ascend(diver,depth),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3876).
%~ From E:
%~ 
%~ (     happens(ascend1(Diver),Time) <->     thereExists(Depth,happens(ascend(Diver,Depth),Time)))
%~ cpc :- (     happens(ascend1(Diver),Time) <->     thereExists(Depth,happens(ascend(Diver,Depth),Time)))
%~ ooo :- [   cl(    [   exists( Depth,   exists( Depth,   (     (         happens(ascend(Diver,Depth),Time) ;         not( happens(ascend1(Diver),Time))) ,     (         happens(ascend1(Diver),Time) ;         not( happens(ascend(Diver,Depth),Time))))))],       [])]
cl(    exists( Depth,   exists( Depth,   (     (         happens(ascend(Diver,Depth),Time) ;         not( happens(ascend1(Diver),Time))) ,     (         happens(ascend1(Diver),Time) ;         not( happens(ascend(Diver,Depth),Time)))))),       []).
 %  cl(    exists( Depth,   exists( Depth,   (     (         happens(ascend(Diver,Depth),Time) ;         not( happens(ascend1(Diver),Time))) ,     (         happens(ascend1(Diver),Time) ;         not( happens(ascend(Diver,Depth),Time)))))),       []).
 %  % =================================.


% [diver,time]
% Happens(RapidAscendToSurface(diver),time) ->
% Happens(Ascend(diver,0),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3880).
%~ From E:
%~ 
%~ happens(rapidAscendToSurface(Diver),Time) ->         happens(ascend(Diver,0),Time)
%~ cpc :- happens(rapidAscendToSurface(Diver),Time) ->         happens(ascend(Diver,0),Time)
%~ ooo :- [   cl(    [   happens(ascend(Diver,0),Time)],       [      happens(rapidAscendToSurface(Diver),Time)])]
cl(happens(ascend(Diver,0),Time),happens(rapidAscendToSurface(Diver),Time)).
 %  cl(happens(ascend(Diver,0),Time),happens(rapidAscendToSurface(Diver),Time)).
 %  % =================================.

% event AscendLine(diver,line)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3882).
%~ From E:
%~ 
%~ event( ascendLine(diver,line))
%~ cpc :- events([ascendLine/2])
%~ ooo :- [   cl([events([ascendLine/2])],[])]
%~ cpc :- actions([ascendLine/2])
%~ ooo :- [   cl([actions([ascendLine/2])],[])]
%~ cpc :- mpred_prop(ascendLine(diver,line),action)
%~ ooo :- [   cl([mpred_prop(ascendLine(diver,line),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3882).
( cl(events(ascendLine/2),[])  ,    cl(mpred_prop(ascendLine(diver,line),action),[]) ,     cl(actions(ascendLine/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3885).
% [diver,line,time]
% Happens(AscendLine(diver,line),time) ->
% Happens(Ascend1(diver),time).
%~ From E:
%~ 
%~ happens(ascendLine(Diver,Line),Time) ->         happens(ascend1(Diver),Time)
%~ cpc :- happens(ascendLine(Diver,Line),Time) ->         happens(ascend1(Diver),Time)
%~ ooo :- [   cl(    [   happens(ascend1(Diver),Time)],       [      happens(ascendLine(Diver,Line),Time)])]
cl(happens(ascend1(Diver),Time),happens(ascendLine(Diver,Line),Time)).
 %  cl(happens(ascend1(Diver),Time),happens(ascendLine(Diver,Line),Time)).
 %  % =================================.

% fluent Disoriented(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3888).
%~ From E:
%~ 
%~ fluent( disoriented(diver))
%~ cpc :- fluents([disoriented/1])
%~ ooo :- [   cl([fluents([disoriented/1])],[])]
%~ cpc :- mpred_prop(disoriented(diver),fluent)
%~ ooo :- [   cl([mpred_prop(disoriented(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3888).
cl(mpred_prop(disoriented(diver),fluent),[]),cl(fluents(disoriented/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3891).
% event BecomeDisoriented(diver)
%~ From E:
%~ 
%~ event( becomeDisoriented(diver))
%~ cpc :- events([becomeDisoriented/1])
%~ ooo :- [   cl([events([becomeDisoriented/1])],[])]
%~ cpc :- actions([becomeDisoriented/1])
%~ ooo :- [   cl([actions([becomeDisoriented/1])],[])]
%~ cpc :- mpred_prop(becomeDisoriented(diver),action)
%~ ooo :- [   cl([mpred_prop(becomeDisoriented(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3891).
( cl(events(becomeDisoriented/1),[])  ,    cl(mpred_prop(becomeDisoriented(diver),action),[]) ,     cl(actions(becomeDisoriented/1),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3893).
% event BecomeReoriented(diver)
%~ From E:
%~ 
%~ event( becomeReoriented(diver))
%~ cpc :- events([becomeReoriented/1])
%~ ooo :- [   cl([events([becomeReoriented/1])],[])]
%~ cpc :- actions([becomeReoriented/1])
%~ ooo :- [   cl([actions([becomeReoriented/1])],[])]
%~ cpc :- mpred_prop(becomeReoriented(diver),action)
%~ ooo :- [   cl([mpred_prop(becomeReoriented(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3893).
( cl(events(becomeReoriented/1),[])  ,    cl(mpred_prop(becomeReoriented(diver),action),[]) ,     cl(actions(becomeReoriented/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3895).
% [diver,time]
% Initiates(BecomeDisoriented(diver),Disoriented(diver),time).
%~ From E:
%~ 
%~ initiates_at(becomeDisoriented(Diver),disoriented(Diver),Time)
%~ cpc :- initiates(becomeDisoriented(Diver),disoriented(Diver),Time)
%~ ooo :- [   cl([initiates(becomeDisoriented(Diver),disoriented(Diver),Time)],[])]
cl(initiates(becomeDisoriented(Diver),disoriented(Diver),Time),[]).
 %  cl(initiates(becomeDisoriented(Diver),disoriented(Diver),Time),[]).
 %  % =================================.


% [diver,time]
% Terminates(BecomeReoriented(diver),Disoriented(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3899).
%~ From E:
%~ 
%~ terminates_at(becomeReoriented(Diver),disoriented(Diver),Time)
%~ cpc :- terminates(becomeReoriented(Diver),disoriented(Diver),Time)
%~ ooo :- [   cl([terminates(becomeReoriented(Diver),disoriented(Diver),Time)],[])]
cl(terminates(becomeReoriented(Diver),disoriented(Diver),Time),[]).
 %  cl(terminates(becomeReoriented(Diver),disoriented(Diver),Time),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3901).
% fluent DisturbedSilt()
%~ From E:
%~ 
%~ fluent(disturbedSilt())
%~ cpc :- fluents([disturbedSilt/0])
%~ ooo :- [   cl([fluents([disturbedSilt/0])],[])]
%~ cpc :- mpred_prop(disturbedSilt(),fluent)
%~ ooo :- [   cl([mpred_prop(disturbedSilt(),fluent)],[])]
cl(mpred_prop(disturbedSilt(),fluent),[]),cl((fluents disturbedSilt/0),[]).
 %  cl(mpred_prop(disturbedSilt,fluent),[]),cl(fluents(disturbedSilt/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3903).
% event DisturbSilt(diver)
%~ From E:
%~ 
%~ event( disturbSilt(diver))
%~ cpc :- events([disturbSilt/1])
%~ ooo :- [   cl([events([disturbSilt/1])],[])]
%~ cpc :- actions([disturbSilt/1])
%~ ooo :- [   cl([actions([disturbSilt/1])],[])]
%~ cpc :- mpred_prop(disturbSilt(diver),action)
%~ ooo :- [   cl([mpred_prop(disturbSilt(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3903).
( cl(events(disturbSilt/1),[])  ,    cl(mpred_prop(disturbSilt(diver),action),[]) ,     cl(actions(disturbSilt/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3905).
% [diver,time]
% Initiates(DisturbSilt(diver),DisturbedSilt(),time).
%~ From E:
%~ 
%~ initiates_at(disturbSilt(Diver),disturbedSilt(),Time)
%~ cpc :- initiates(disturbSilt(Diver),disturbedSilt(),Time)
%~ ooo :- [   cl([initiates(disturbSilt(Diver),disturbedSilt(),Time)],[])]
cl(initiates(disturbSilt(Diver),disturbedSilt(),Time),[]).
 %  cl(initiates(disturbSilt(Diver),disturbedSilt,Time),[]).
 %  % =================================.


% [diver,time]
% Happens(BecomeDisoriented(diver),time) ->
% (!HoldsAt(DisturbedSilt(),time-1) &
%  HoldsAt(DisturbedSilt(),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3909).
%~ From E:
%~ 
%~ happens(becomeDisoriented(Diver),Time) ->         holds(not(disturbedSilt()),Time-1),holds(disturbedSilt(),Time)
%~ cpc :- happens(becomeDisoriented(Diver),Time) ->         holds(not(disturbedSilt()),Time-1),holds(disturbedSilt(),Time)
%~ ooo :- [   cl( [], [  [   holds(disturbedSilt(),Time-1),     happens(becomeDisoriented(Diver),Time)])],     cl(      [   holds(disturbedSilt(),Time)],           [        happens(becomeDisoriented(Diver),Time)])]
(     cl([],(holds(disturbedSilt(),Time-1),happens(becomeDisoriented(Diver),Time))) ,     cl(holds(disturbedSilt(),Time),happens(becomeDisoriented(Diver),Time))).
 %  (     cl([],(holds(disturbedSilt,Time-1),happens(becomeDisoriented(Diver),Time))) ,     cl(holds(disturbedSilt,Time),happens(becomeDisoriented(Diver),Time))).
 %  % =================================.

% event Panic(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3912).
%~ From E:
%~ 
%~ event( panic(diver))
%~ cpc :- events([panic/1])
%~ ooo :- [   cl([events([panic/1])],[])]
%~ cpc :- actions([panic/1])
%~ ooo :- [   cl([actions([panic/1])],[])]
%~ cpc :- mpred_prop(panic(diver),action)
%~ ooo :- [   cl([mpred_prop(panic(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3912).
( cl(events(panic/1),[])  ,    cl(mpred_prop(panic(diver),action),[]) ,     cl(actions(panic/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3915).
% [diver,time]
 % Happens(Panic(diver),time) ->
% HoldsAt(Disoriented(diver),time) |
% HoldsAt(UncontrolledBuoyancy(diver),time) |
% ({equipment} Happens(Lose(diver,equipment),time-1)) |
% Happens(Vomit(diver),time-1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3915).
%~ From E:
%~ 
%~ happens(panic(Diver),Time) ->         ( holds(disoriented(Diver),Time)  ;    holds(uncontrolledBuoyancy(Diver),Time) ;     thereExists(Equipment,happens(lose(Diver,Equipment),Time-1)) ;     happens(vomit(Diver),Time-1))
%~ cpc :- happens(panic(Diver),Time) ->         ( holds(disoriented(Diver),Time)  ;    holds(uncontrolledBuoyancy(Diver),Time) ;     thereExists(Equipment,happens(lose(Diver,Equipment),Time-1)) ;     happens(vomit(Diver),Time-1))
%~ ooo :- [   cl(    [   exists( Equipment,   ( holds(disoriented(Diver),Time)  ;    holds(uncontrolledBuoyancy(Diver),Time) ;     happens(lose(Diver,Equipment),Time-1) ;     happens(vomit(Diver),Time-1) ;     not( happens(panic(Diver),Time))))],       [])]
cl(    exists( Equipment,   ( holds(disoriented(Diver),Time)  ;    holds(uncontrolledBuoyancy(Diver),Time) ;     happens(lose(Diver,Equipment),Time-1) ;     happens(vomit(Diver),Time-1) ;     not( happens(panic(Diver),Time)))),       []).
 %  ( cl(    exists( Equipment,   ( holds(disoriented(Diver),Time)  ;    holds(uncontrolledBuoyancy(Diver),Time) ;     happens(lose(Diver,Equipment),Time-1) ;     happens(vomit(Diver),Time-1) ;     not( happens(panic(Diver),Time)))),       [])).
 %  % =================================.

% event Vomit(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3920).
%~ From E:
%~ 
%~ event( vomit(diver))
%~ cpc :- events([vomit/1])
%~ ooo :- [   cl([events([vomit/1])],[])]
%~ cpc :- actions([vomit/1])
%~ ooo :- [   cl([actions([vomit/1])],[])]
%~ cpc :- mpred_prop(vomit(diver),action)
%~ ooo :- [   cl([mpred_prop(vomit(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3920).
( cl(events(vomit/1),[])  ,    cl(mpred_prop(vomit(diver),action),[]) ,     cl(actions(vomit/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3923).
%; conditions

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3925).
% fluent Unconscious(diver)
%~ From E:
%~ 
%~ fluent( unconscious(diver))
%~ cpc :- fluents([unconscious/1])
%~ ooo :- [   cl([fluents([unconscious/1])],[])]
%~ cpc :- mpred_prop(unconscious(diver),fluent)
%~ ooo :- [   cl([mpred_prop(unconscious(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3925).
cl(mpred_prop(unconscious(diver),fluent),[]),cl(fluents(unconscious/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3927).
% event GoUnconscious(diver)
%~ From E:
%~ 
%~ event( goUnconscious(diver))
%~ cpc :- events([goUnconscious/1])
%~ ooo :- [   cl([events([goUnconscious/1])],[])]
%~ cpc :- actions([goUnconscious/1])
%~ ooo :- [   cl([actions([goUnconscious/1])],[])]
%~ cpc :- mpred_prop(goUnconscious(diver),action)
%~ ooo :- [   cl([mpred_prop(goUnconscious(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3927).
( cl(events(goUnconscious/1),[])  ,    cl(mpred_prop(goUnconscious(diver),action),[]) ,     cl(actions(goUnconscious/1),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3929).
% event RegainConsciousness(diver)
%~ From E:
%~ 
%~ event( regainConsciousness(diver))
%~ cpc :- events([regainConsciousness/1])
%~ ooo :- [   cl([events([regainConsciousness/1])],[])]
%~ cpc :- actions([regainConsciousness/1])
%~ ooo :- [   cl([actions([regainConsciousness/1])],[])]
%~ cpc :- mpred_prop(regainConsciousness(diver),action)
%~ ooo :- [   cl([mpred_prop(regainConsciousness(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3929).
( cl(events(regainConsciousness/1),[])  ,    cl(mpred_prop(regainConsciousness(diver),action),[]) ,     cl(actions(regainConsciousness/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3931).
% [diver,time]
% Initiates(GoUnconscious(diver),Unconscious(diver),time).
%~ From E:
%~ 
%~ initiates_at(goUnconscious(Diver),unconscious(Diver),Time)
%~ cpc :- initiates(goUnconscious(Diver),unconscious(Diver),Time)
%~ ooo :- [   cl([initiates(goUnconscious(Diver),unconscious(Diver),Time)],[])]
cl(initiates(goUnconscious(Diver),unconscious(Diver),Time),[]).
 %  cl(initiates(goUnconscious(Diver),unconscious(Diver),Time),[]).
 %  % =================================.


% [diver,time]
% Terminates(RegainConsciousness(diver),Unconscious(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3935).
%~ From E:
%~ 
%~ terminates_at(regainConsciousness(Diver),unconscious(Diver),Time)
%~ cpc :- terminates(regainConsciousness(Diver),unconscious(Diver),Time)
%~ ooo :- [   cl([terminates(regainConsciousness(Diver),unconscious(Diver),Time)],[])]
cl(terminates(regainConsciousness(Diver),unconscious(Diver),Time),[]).
 %  cl(terminates(regainConsciousness(Diver),unconscious(Diver),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3937).
% [diver,time]
% Happens(GoUnconscious(diver),time) ->
% Happens(RapidAscendToSurface(diver),time).
%~ From E:
%~ 
%~ happens(goUnconscious(Diver),Time) ->         happens(rapidAscendToSurface(Diver),Time)
%~ cpc :- happens(goUnconscious(Diver),Time) ->         happens(rapidAscendToSurface(Diver),Time)
%~ ooo :- [   cl(    [   happens(rapidAscendToSurface(Diver),Time)],       [      happens(goUnconscious(Diver),Time)])]
cl(    happens(rapidAscendToSurface(Diver),Time),       happens(goUnconscious(Diver),Time)).
 %  cl(    happens(rapidAscendToSurface(Diver),Time),       happens(goUnconscious(Diver),Time)).
 %  % =================================.

% fluent HasEarPain(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3940).
%~ From E:
%~ 
%~ fluent( hasEarPain(diver))
%~ cpc :- fluents([hasEarPain/1])
%~ ooo :- [   cl([fluents([hasEarPain/1])],[])]
%~ cpc :- mpred_prop(hasEarPain(diver),fluent)
%~ ooo :- [   cl([mpred_prop(hasEarPain(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3940).
cl(mpred_prop(hasEarPain(diver),fluent),[]),cl(fluents(hasEarPain/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3943).
% event StartEarPain(diver)
%~ From E:
%~ 
%~ event( startEarPain(diver))
%~ cpc :- events([startEarPain/1])
%~ ooo :- [   cl([events([startEarPain/1])],[])]
%~ cpc :- actions([startEarPain/1])
%~ ooo :- [   cl([actions([startEarPain/1])],[])]
%~ cpc :- mpred_prop(startEarPain(diver),action)
%~ ooo :- [   cl([mpred_prop(startEarPain(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3943).
( cl(events(startEarPain/1),[])  ,    cl(mpred_prop(startEarPain(diver),action),[]) ,     cl(actions(startEarPain/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3945).
% [diver,time]
 % Initiates(StartEarPain(diver),HasEarPain(diver),time).
%~ From E:
%~ 
%~ initiates_at(startEarPain(Diver),hasEarPain(Diver),Time)
%~ cpc :- initiates(startEarPain(Diver),hasEarPain(Diver),Time)
%~ ooo :- [   cl([initiates(startEarPain(Diver),hasEarPain(Diver),Time)],[])]
cl(initiates(startEarPain(Diver),hasEarPain(Diver),Time),[]).
 %  cl(initiates(startEarPain(Diver),hasEarPain(Diver),Time),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3947).
% fluent HasRupturedEardrum(diver)
%~ From E:
%~ 
%~ fluent( hasRupturedEardrum(diver))
%~ cpc :- fluents([hasRupturedEardrum/1])
%~ ooo :- [   cl([fluents([hasRupturedEardrum/1])],[])]
%~ cpc :- mpred_prop(hasRupturedEardrum(diver),fluent)
%~ ooo :- [   cl([mpred_prop(hasRupturedEardrum(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3947).
cl(mpred_prop(hasRupturedEardrum(diver),fluent),[]),cl(fluents(hasRupturedEardrum/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3949).
% event RuptureEardrum(diver)
%~ From E:
%~ 
%~ event( ruptureEardrum(diver))
%~ cpc :- events([ruptureEardrum/1])
%~ ooo :- [   cl([events([ruptureEardrum/1])],[])]
%~ cpc :- actions([ruptureEardrum/1])
%~ ooo :- [   cl([actions([ruptureEardrum/1])],[])]
%~ cpc :- mpred_prop(ruptureEardrum(diver),action)
%~ ooo :- [   cl([mpred_prop(ruptureEardrum(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3949).
( cl(events(ruptureEardrum/1),[])  ,    cl(mpred_prop(ruptureEardrum(diver),action),[]) ,     cl(actions(ruptureEardrum/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3951).
% [diver,time]
% Initiates(RuptureEardrum(diver),HasRupturedEardrum(diver),time).
%~ From E:
%~ 
%~ initiates_at(ruptureEardrum(Diver),hasRupturedEardrum(Diver),Time)
%~ cpc :- initiates(ruptureEardrum(Diver),hasRupturedEardrum(Diver),Time)
%~ ooo :- [   cl([initiates(ruptureEardrum(Diver),hasRupturedEardrum(Diver),Time)],[])]
cl(initiates(ruptureEardrum(Diver),hasRupturedEardrum(Diver),Time),[]).
 %  cl(initiates(ruptureEardrum(Diver),hasRupturedEardrum(Diver),Time),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3953).
% fluent ConditionOK(diver)
%~ From E:
%~ 
%~ fluent( conditionOK(diver))
%~ cpc :- fluents([conditionOK/1])
%~ ooo :- [   cl([fluents([conditionOK/1])],[])]
%~ cpc :- mpred_prop(conditionOK(diver),fluent)
%~ ooo :- [   cl([mpred_prop(conditionOK(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3953).
cl(mpred_prop(conditionOK(diver),fluent),[]),cl(fluents(conditionOK/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3955).
% fluent HasDecompressionIllness(diver)
%~ From E:
%~ 
%~ fluent( hasDecompressionIllness(diver))
%~ cpc :- fluents([hasDecompressionIllness/1])
%~ ooo :- [   cl([fluents([hasDecompressionIllness/1])],[])]
%~ cpc :- mpred_prop(hasDecompressionIllness(diver),fluent)
%~ ooo :- [   cl([mpred_prop(hasDecompressionIllness(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3955).
cl(mpred_prop(hasDecompressionIllness(diver),fluent),[]),cl(fluents(hasDecompressionIllness/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3957).
% event StartDecompressionIllness(diver)
%~ From E:
%~ 
%~ event( startDecompressionIllness(diver))
%~ cpc :- events([startDecompressionIllness/1])
%~ ooo :- [   cl([events([startDecompressionIllness/1])],[])]
%~ cpc :- actions([startDecompressionIllness/1])
%~ ooo :- [   cl([actions([startDecompressionIllness/1])],[])]
%~ cpc :- mpred_prop(startDecompressionIllness(diver),action)
%~ ooo :- [   cl([mpred_prop(startDecompressionIllness(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3957).
( cl(events(startDecompressionIllness/1),[])  ,    cl(mpred_prop(startDecompressionIllness(diver),action),[]) ,     cl(actions(startDecompressionIllness/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3959).
% [diver,time]
% Initiates(StartDecompressionIllness(diver),
%           HasDecompressionIllness(diver),
%           time).
%~ From E:
%~ 
%~ initiates_at(startDecompressionIllness(Diver),hasDecompressionIllness(Diver),Time)
%~ cpc :- initiates(startDecompressionIllness(Diver),hasDecompressionIllness(Diver),Time)
%~ ooo :- [   cl(    [   initiates(startDecompressionIllness(Diver),hasDecompressionIllness(Diver),Time)],       [])]
cl(initiates(startDecompressionIllness(Diver),hasDecompressionIllness(Diver),Time),[]).
 %  cl(initiates(startDecompressionIllness(Diver),hasDecompressionIllness(Diver),Time),[]).
 %  % =================================.

% fluent SignalingDecompress(computer,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3963).
%~ From E:
%~ 
%~ fluent( signalingDecompress(computer,diver))
%~ cpc :- fluents([signalingDecompress/2])
%~ ooo :- [   cl([fluents([signalingDecompress/2])],[])]
%~ cpc :- mpred_prop(signalingDecompress(computer,diver),fluent)
%~ ooo :- [   cl([mpred_prop(signalingDecompress(computer,diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3963).
cl(mpred_prop(signalingDecompress(computer,diver),fluent),[]),cl(fluents(signalingDecompress/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3966).
% fluent SignalingLowOnAir(computer,airtank,diver)
%~ From E:
%~ 
%~ fluent( signalingLowOnAir(computer,airtank,diver))
%~ cpc :- fluents([signalingLowOnAir/3])
%~ ooo :- [   cl([fluents([signalingLowOnAir/3])],[])]
%~ cpc :- mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent)
%~ ooo :- [   cl([mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3966).
cl(mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent),[]),cl(fluents(signalingLowOnAir/3),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3968).
% [computer,airtank,diver,time]
% HoldsAt(SignalingLowOnAir(computer,airtank,diver),time) ->
% HoldsAt(LowOnAir(airtank),time).
%~ From E:
%~ 
%~ holds(signalingLowOnAir(Computer,Airtank,Diver),Time) ->         holds(lowOnAir(Airtank),Time)
%~ cpc :- holds(signalingLowOnAir(Computer,Airtank,Diver),Time) ->         holds(lowOnAir(Airtank),Time)
%~ ooo :- [   cl(    [   holds(lowOnAir(Airtank),Time)],       [      holds(signalingLowOnAir(Computer,Airtank,Diver),Time)])]
cl(    holds(lowOnAir(Airtank),Time),       holds(signalingLowOnAir(Computer,Airtank,Diver),Time)).
 %  cl(    holds(lowOnAir(Airtank),Time),       holds(signalingLowOnAir(Computer,Airtank,Diver),Time)).
 %  % =================================.


% [computer,diver,time]
% HoldsAt(SignalingDecompress(computer,diver),time) ->
% !{time1} time1<time & Happens(Decompress(diver),time1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3973).
%~ From E:
%~ 
%~ holds(signalingDecompress(Computer,Diver),Time) ->         not( thereExists( Time1,   Time1<Time,happens(decompress(Diver),Time1)))
%~ cpc :- holds(signalingDecompress(Computer,Diver),Time) ->         not( thereExists( Time1,   Time1<Time,happens(decompress(Diver),Time1)))
%~ ooo :- [   cl(    [   exists( Time1,   ( not(comparison(Time1,Time,<))  ;    not( happens(decompress(Diver),Time1)) ;     not( holds(signalingDecompress(Computer,Diver),Time))))],       [])]
cl(    exists( Time1,   ( not comparison(Time1,Time,<)  ;    not( happens(decompress(Diver),Time1)) ;     not( holds(signalingDecompress(Computer,Diver),Time)))),       []).
 %  ( cl(    exists( Time1,   ( not(comparison(Time1,Time,<))  ;    not( happens(decompress(Diver),Time1)) ;     not( holds(signalingDecompress(Computer,Diver),Time)))),       [])).
 %  % =================================.

% event Decompress(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3975).
%~ From E:
%~ 
%~ event( decompress(diver))
%~ cpc :- events([decompress/1])
%~ ooo :- [   cl([events([decompress/1])],[])]
%~ cpc :- actions([decompress/1])
%~ ooo :- [   cl([actions([decompress/1])],[])]
%~ cpc :- mpred_prop(decompress(diver),action)
%~ ooo :- [   cl([mpred_prop(decompress(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3975).
( cl(events(decompress/1),[])  ,    cl(mpred_prop(decompress(diver),action),[]) ,     cl(actions(decompress/1),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3978).
% event EqualizeEars(diver)
%~ From E:
%~ 
%~ event( equalizeEars(diver))
%~ cpc :- events([equalizeEars/1])
%~ ooo :- [   cl([events([equalizeEars/1])],[])]
%~ cpc :- actions([equalizeEars/1])
%~ ooo :- [   cl([actions([equalizeEars/1])],[])]
%~ cpc :- mpred_prop(equalizeEars(diver),action)
%~ ooo :- [   cl([mpred_prop(equalizeEars(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3978).
( cl(events(equalizeEars/1),[])  ,    cl(mpred_prop(equalizeEars(diver),action),[]) ,     cl(actions(equalizeEars/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3980).
% [diver,time]
% (Happens(Descend1(diver),time) | Happens(Ascend1(diver),time)) &
% !Happens(EqualizeEars(diver),time) ->
% Happens(StartEarPain(diver),time) &
% Happens(RuptureEardrum(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3980).
%~ From E:
%~ 
%~ (     happens(descend1(Diver),Time);happens(ascend1(Diver),Time) ,     not( happens(equalizeEars(Diver),Time))) ->         happens(startEarPain(Diver),Time),happens(ruptureEardrum(Diver),Time)
%~ cpc :- (     happens(descend1(Diver),Time);happens(ascend1(Diver),Time) ,     not( happens(equalizeEars(Diver),Time))) ->         happens(startEarPain(Diver),Time),happens(ruptureEardrum(Diver),Time)
%~ ooo :- [   cl(    [   happens(startEarPain(Diver),Time),     happens(equalizeEars(Diver),Time)],       [      happens(descend1(Diver),Time)]),     cl(      [   happens(startEarPain(Diver),Time),     happens(equalizeEars(Diver),Time)],           [        happens(ascend1(Diver),Time)]),     cl(      [   happens(ruptureEardrum(Diver),Time),     happens(equalizeEars(Diver),Time)],           [        happens(descend1(Diver),Time)]),     cl(      [   happens(ruptureEardrum(Diver),Time),     happens(equalizeEars(Diver),Time)],           [        happens(ascend1(Diver),Time)])]
( cl(    happens(startEarPain(Diver),Time),happens(equalizeEars(Diver),Time),       happens(descend1(Diver),Time))  ,    cl(      happens(startEarPain(Diver),Time),happens(equalizeEars(Diver),Time),           happens(ascend1(Diver),Time)) ,     cl(      happens(ruptureEardrum(Diver),Time),happens(equalizeEars(Diver),Time),           happens(descend1(Diver),Time)) ,     cl(      happens(ruptureEardrum(Diver),Time),happens(equalizeEars(Diver),Time),           happens(ascend1(Diver),Time))).
 %  ( cl(    happens(startEarPain(Diver),Time),happens(equalizeEars(Diver),Time),       happens(descend1(Diver),Time))  ,    cl(      happens(startEarPain(Diver),Time),happens(equalizeEars(Diver),Time),           happens(ascend1(Diver),Time)) ,     cl(      happens(ruptureEardrum(Diver),Time),happens(equalizeEars(Diver),Time),           happens(descend1(Diver),Time)) ,     cl(      happens(ruptureEardrum(Diver),Time),happens(equalizeEars(Diver),Time),           happens(ascend1(Diver),Time))).
 %  % =================================.


% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(Decompress(diver),time) ->
% Happens(StartDecompressionIllness(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3987).
%~ From E:
%~ 
%~ happens(ascend1(Diver),Time),not(happens(decompress(Diver),Time)) ->         happens(startDecompressionIllness(Diver),Time)
%~ cpc :- happens(ascend1(Diver),Time),not(happens(decompress(Diver),Time)) ->         happens(startDecompressionIllness(Diver),Time)
%~ ooo :- [   cl(    [   happens(startDecompressionIllness(Diver),Time),     happens(decompress(Diver),Time)],       [      happens(ascend1(Diver),Time)])]
cl(    (     happens(startDecompressionIllness(Diver),Time) ,     happens(decompress(Diver),Time)),       happens(ascend1(Diver),Time)).
 %  cl(    (     happens(startDecompressionIllness(Diver),Time) ,     happens(decompress(Diver),Time)),       happens(ascend1(Diver),Time)).
 %  % =================================.


% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) &
% Happens(Ascend1(diver1),time) &
% !Happens(Decompress(diver2),time) ->
% Happens(StartDecompressionIllness(diver2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3992).
%~ From E:
%~ 
%~ ( holds(holding(Diver1,Diver2),Time)  ,    happens(ascend1(Diver1),Time) ,     not( happens(decompress(Diver2),Time))) ->         happens(startDecompressionIllness(Diver2),Time)
%~ cpc :- ( holds(holding(Diver1,Diver2),Time)  ,    happens(ascend1(Diver1),Time) ,     not( happens(decompress(Diver2),Time))) ->         happens(startDecompressionIllness(Diver2),Time)
%~ ooo :- [   cl(    [   happens(startDecompressionIllness(Diver2),Time),     happens(decompress(Diver2),Time)],       [      holds(holding(Diver1,Diver2),Time),           happens(ascend1(Diver1),Time)])]
cl(    (     happens(startDecompressionIllness(Diver2),Time) ,     happens(decompress(Diver2),Time)),       (           holds(holding(Diver1,Diver2),Time) ,           happens(ascend1(Diver1),Time))).
 %  cl(    (     happens(startDecompressionIllness(Diver2),Time) ,     happens(decompress(Diver2),Time)),       (           holds(holding(Diver1,Diver2),Time) ,           happens(ascend1(Diver1),Time))).
 %  % =================================.


% [diver,time]
% Happens(Decompress(diver),time) ->
% ({depth} depth>0 & HoldsAt(AtDepth(diver,depth),time)) &
% !HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',3998).
%~ From E:
%~ 
%~ happens(decompress(Diver),Time) ->         (     thereExists(Depth,(Depth>0,holds(atDepth(Diver,Depth),Time))) ,     holds(not(uncontrolledBuoyancy(Diver)),Time))
%~ cpc :- happens(decompress(Diver),Time) ->         (     thereExists(Depth,(Depth>0,holds(atDepth(Diver,Depth),Time))) ,     holds(not(uncontrolledBuoyancy(Diver)),Time))
%~ ooo :- [   cl(    [   exists( Depth,   (     ( comparison(Depth,0,>)  ,        holds(atDepth(Diver,Depth),Time) ,         not( holds(uncontrolledBuoyancy(Diver),Time))) ;     not( happens(decompress(Diver),Time))))],       [])]
cl(    exists( Depth,   (     ( comparison(Depth,0,>)  ,        holds(atDepth(Diver,Depth),Time) ,         not( holds(uncontrolledBuoyancy(Diver),Time))) ;     not( happens(decompress(Diver),Time)))),       []).
 %  cl(    exists( Depth,   (     ( comparison(Depth,0,>)  ,        holds(atDepth(Diver,Depth),Time) ,         not( holds(uncontrolledBuoyancy(Diver),Time))) ;     not( happens(decompress(Diver),Time)))),       []).
 %  % =================================.

% fluent HasHeadache(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4001).
%~ From E:
%~ 
%~ fluent( hasHeadache(diver))
%~ cpc :- fluents([hasHeadache/1])
%~ ooo :- [   cl([fluents([hasHeadache/1])],[])]
%~ cpc :- mpred_prop(hasHeadache(diver),fluent)
%~ ooo :- [   cl([mpred_prop(hasHeadache(diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4001).
cl(mpred_prop(hasHeadache(diver),fluent),[]),cl(fluents(hasHeadache/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
% [diver,time]
% HoldsAt(ConditionOK(diver),time) ->
% !HoldsAt(Unconscious(diver),time) &
% !HoldsAt(HasEarPain(diver),time) &
% !HoldsAt(HasRupturedEardrum(diver),time) &
% !HoldsAt(HasDecompressionIllness(diver),time) &
% !HoldsAt(HasHeadache(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
%~ From E:
%~ 
%~ holds(conditionOK(Diver),Time) ->         ( holds(not(unconscious(Diver)),Time)  ,    holds(not(hasEarPain(Diver)),Time) ,     holds(not(hasRupturedEardrum(Diver)),Time) ,     holds(not(hasDecompressionIllness(Diver)),Time) ,     holds(not(hasHeadache(Diver)),Time))
%~ cpc :- holds(conditionOK(Diver),Time) ->         ( holds(not(unconscious(Diver)),Time)  ,    holds(not(hasEarPain(Diver)),Time) ,     holds(not(hasRupturedEardrum(Diver)),Time) ,     holds(not(hasDecompressionIllness(Diver)),Time) ,     holds(not(hasHeadache(Diver)),Time))
%~ ooo :- [   cl( [], [  [   holds(unconscious(Diver),Time),     holds(conditionOK(Diver),Time)])],     cl( [], [    [   holds(hasEarPain(Diver),Time),     holds(conditionOK(Diver),Time)])],     cl( [], [    [   holds(hasRupturedEardrum(Diver),Time),     holds(conditionOK(Diver),Time)])],     cl( [], [    [   holds(hasDecompressionIllness(Diver),Time),     holds(conditionOK(Diver),Time)])],     cl( [], [    [   holds(hasHeadache(Diver),Time),     holds(conditionOK(Diver),Time)])]]
( cl([],(holds(unconscious(Diver),Time),holds(conditionOK(Diver),Time)))  ,    cl([],(holds(hasEarPain(Diver),Time),holds(conditionOK(Diver),Time))) ,     cl( [],     holds(hasRupturedEardrum(Diver),Time),holds(conditionOK(Diver),Time)) ,     cl( [],     holds(hasDecompressionIllness(Diver),Time),holds(conditionOK(Diver),Time)) ,     cl([],(holds(hasHeadache(Diver),Time),holds(conditionOK(Diver),Time)))).
 %  ( cl([],(holds(unconscious(Diver),Time),holds(conditionOK(Diver),Time)))  ,    cl([],(holds(hasEarPain(Diver),Time),holds(conditionOK(Diver),Time))) ,     cl( [],     holds(hasRupturedEardrum(Diver),Time),holds(conditionOK(Diver),Time)) ,     cl( [],     holds(hasDecompressionIllness(Diver),Time),holds(conditionOK(Diver),Time)) ,     cl([],(holds(hasHeadache(Diver),Time),holds(conditionOK(Diver),Time)))).
 %  % =================================.

% event BeAirlifted(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4011).
%~ From E:
%~ 
%~ event( beAirlifted(diver))
%~ cpc :- events([beAirlifted/1])
%~ ooo :- [   cl([events([beAirlifted/1])],[])]
%~ cpc :- actions([beAirlifted/1])
%~ ooo :- [   cl([actions([beAirlifted/1])],[])]
%~ cpc :- mpred_prop(beAirlifted(diver),action)
%~ ooo :- [   cl([mpred_prop(beAirlifted(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4011).
( cl(events(beAirlifted/1),[])  ,    cl(mpred_prop(beAirlifted(diver),action),[]) ,     cl(actions(beAirlifted/1),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4014).
% event TakeInWater(diver)
%~ From E:
%~ 
%~ event( takeInWater(diver))
%~ cpc :- events([takeInWater/1])
%~ ooo :- [   cl([events([takeInWater/1])],[])]
%~ cpc :- actions([takeInWater/1])
%~ ooo :- [   cl([actions([takeInWater/1])],[])]
%~ cpc :- mpred_prop(takeInWater(diver),action)
%~ ooo :- [   cl([mpred_prop(takeInWater(diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4014).
( cl(events(takeInWater/1),[])  ,    cl(mpred_prop(takeInWater(diver),action),[]) ,     cl(actions(takeInWater/1),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4016).
% fluent LowOnAir(airtank)
%~ From E:
%~ 
%~ fluent( lowOnAir(airtank))
%~ cpc :- fluents([lowOnAir/1])
%~ ooo :- [   cl([fluents([lowOnAir/1])],[])]
%~ cpc :- mpred_prop(lowOnAir(airtank),fluent)
%~ ooo :- [   cl([mpred_prop(lowOnAir(airtank),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4016).
cl(mpred_prop(lowOnAir(airtank),fluent),[]),cl(fluents(lowOnAir/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4018).
% event BecomeLowOnAir(airtank)
%~ From E:
%~ 
%~ event( becomeLowOnAir(airtank))
%~ cpc :- events([becomeLowOnAir/1])
%~ ooo :- [   cl([events([becomeLowOnAir/1])],[])]
%~ cpc :- mpred_prop(becomeLowOnAir(airtank),event)
%~ ooo :- [   cl([mpred_prop(becomeLowOnAir(airtank),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4018).
cl(mpred_prop(becomeLowOnAir(airtank),event),[]),cl(events(becomeLowOnAir/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4020).
% [airtank,time]
% Initiates(BecomeLowOnAir(airtank),LowOnAir(airtank),time).
%~ From E:
%~ 
%~ initiates_at(becomeLowOnAir(Airtank),lowOnAir(Airtank),Time)
%~ cpc :- initiates(becomeLowOnAir(Airtank),lowOnAir(Airtank),Time)
%~ ooo :- [   cl([initiates(becomeLowOnAir(Airtank),lowOnAir(Airtank),Time)],[])]
cl(initiates(becomeLowOnAir(Airtank),lowOnAir(Airtank),Time),[]).
 %  cl(initiates(becomeLowOnAir(Airtank),lowOnAir(Airtank),Time),[]).
 %  % =================================.


%; initial state
% [diver]
 % HoldsAt(ConditionOK(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4024).
%~ From E:
%~ 
%~ holds(conditionOK(Diver),0)
%~ cpc :- holds(conditionOK(Diver),0)
%~ ooo :- [   cl([holds(conditionOK(Diver),0)],[])]
cl(holds(conditionOK(Diver),0),[]).
 %  cl(holds(conditionOK(Diver),0),[]).
 %  % =================================.


% [diver]
 % HoldsAt(Vertical(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4024).
%~ From E:
%~ 
%~ holds(vertical(Diver),0)
%~ cpc :- holds(vertical(Diver),0)
%~ ooo :- [   cl([holds(vertical(Diver),0)],[])]
cl(holds(vertical(Diver),0),[]).
 %  cl(holds(vertical(Diver),0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4026).
% !HoldsAt(DisturbedSilt(),0).
%~ From E:
%~ 
%~ holds(not(disturbedSilt()),0)
initially( not disturbedSilt()).
 %  initial_state([not(disturbedSilt)]).
 %  % =================================.


% [diver]
 % !HoldsAt(UncontrolledBuoyancy(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4026).
%~ From E:
%~ 
%~ holds(not(uncontrolledBuoyancy(Diver)),0)
%~ cpc :- holds(not(uncontrolledBuoyancy(Diver)),0)
%~ ooo :- [   cl([],[holds(uncontrolledBuoyancy(Diver),0)])]
cl([],holds(uncontrolledBuoyancy(Diver),0)).
 %  cl([],holds(uncontrolledBuoyancy(Diver),0)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4028).
% [diver]
 % !HoldsAt(Disoriented(diver),0).
%~ From E:
%~ 
%~ holds(not(disoriented(Diver)),0)
%~ cpc :- holds(not(disoriented(Diver)),0)
%~ ooo :- [   cl([],[holds(disoriented(Diver),0)])]
cl([],holds(disoriented(Diver),0)).
 %  cl([],holds(disoriented(Diver),0)).
 %  % =================================.


% [diver]
 % !HoldsAt(PositivelyBuoyant(diver),0) &
%         !HoldsAt(NeutrallyBuoyant(diver),0) &
%         !HoldsAt(NegativelyBuoyant(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4028).
%~ From E:
%~ 
%~ ( holds(not(positivelyBuoyant(Diver)),0)  ,    holds(not(neutrallyBuoyant(Diver)),0) ,     holds(not(negativelyBuoyant(Diver)),0))
%~ cpc :- holds(not(positivelyBuoyant(Diver)),0)
%~ ooo :- [   cl([],[holds(positivelyBuoyant(Diver),0)])]
%~ cpc :- holds(not(neutrallyBuoyant(Diver)),0)
%~ ooo :- [   cl([],[holds(neutrallyBuoyant(Diver),0)])]
%~ cpc :- holds(not(negativelyBuoyant(Diver)),0)
%~ ooo :- [   cl([],[holds(negativelyBuoyant(Diver),0)])]
( cl([],holds(positivelyBuoyant(Diver),0))  ,    cl([],holds(neutrallyBuoyant(Diver),0)) ,     cl([],holds(negativelyBuoyant(Diver),0))).
 %  ( cl([],holds(positivelyBuoyant(Diver),0))  ,    cl([],holds(neutrallyBuoyant(Diver),0)) ,     cl([],holds(negativelyBuoyant(Diver),0))).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4032).
% [diver,object]
 % !HoldsAt(Wearing(diver,object),0).
%~ From E:
%~ 
%~ holds(not(wearing(Diver,Object)),0)
%~ cpc :- holds(not(wearing(Diver,Object)),0)
%~ ooo :- [   cl([],[holds(wearing(Diver,Object),0)])]
cl([],holds(wearing(Diver,Object),0)).
 %  cl([],holds(wearing(Diver,Object),0)).
 %  % =================================.


% [diver,object]
 % !HoldsAt(Holding(diver,object),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4032).
%~ From E:
%~ 
%~ holds(not(holding(Diver,Object)),0)
%~ cpc :- holds(not(holding(Diver,Object)),0)
%~ ooo :- [   cl([],[holds(holding(Diver,Object),0)])]
cl([],holds(holding(Diver,Object),0)).
 %  cl([],holds(holding(Diver,Object),0)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4034).
% [diver1,diver2]
 % !HoldsAt(Separated(diver1,diver2),0).
%~ From E:
%~ 
%~ holds(not(separated(Diver1,Diver2)),0)
%~ cpc :- holds(not(separated(Diver1,Diver2)),0)
%~ ooo :- [   cl([],[holds(separated(Diver1,Diver2),0)])]
cl([],holds(separated(Diver1,Diver2),0)).
 %  cl([],holds(separated(Diver1,Diver2),0)).
 %  % =================================.


%;[agent,object] !HoldsAt(See(agent,object),0).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4037).
% fluent Separated(diver,diver)
%~ From E:
%~ 
%~ fluent( separated(diver,diver))
%~ cpc :- fluents([separated/2])
%~ ooo :- [   cl([fluents([separated/2])],[])]
%~ cpc :- mpred_prop(separated(diver,diver),fluent)
%~ ooo :- [   cl([mpred_prop(separated(diver,diver),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4037).
cl(mpred_prop(separated(diver,diver),fluent),[]),cl(fluents(separated/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4039).
% [diver1,diver2,time]
% HoldsAt(Separated(diver1,diver2),time) ->
% HoldsAt(Separated(diver2,diver1),time).
%~ From E:
%~ 
%~ holds(separated(Diver1,Diver2),Time) ->         holds(separated(Diver2,Diver1),Time)
%~ cpc :- holds(separated(Diver1,Diver2),Time) ->         holds(separated(Diver2,Diver1),Time)
%~ ooo :- [   cl(    [   holds(separated(Diver2,Diver1),Time)],       [      holds(separated(Diver1,Diver2),Time)])]
cl(    holds(separated(Diver2,Diver1),Time),       holds(separated(Diver1,Diver2),Time)).
 %  cl(    holds(separated(Diver2,Diver1),Time),       holds(separated(Diver1,Diver2),Time)).
 %  % =================================.

% event BecomeSeparated(diver,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4042).
%~ From E:
%~ 
%~ event( becomeSeparated(diver,diver))
%~ cpc :- events([becomeSeparated/2])
%~ ooo :- [   cl([events([becomeSeparated/2])],[])]
%~ cpc :- actions([becomeSeparated/2])
%~ ooo :- [   cl([actions([becomeSeparated/2])],[])]
%~ cpc :- mpred_prop(becomeSeparated(diver,diver),action)
%~ ooo :- [   cl([mpred_prop(becomeSeparated(diver,diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4042).
( cl(events(becomeSeparated/2),[])  ,    cl(mpred_prop(becomeSeparated(diver,diver),action),[]) ,     cl(actions(becomeSeparated/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4045).
% event BeReunitedWith(diver,diver)
%~ From E:
%~ 
%~ event( beReunitedWith(diver,diver))
%~ cpc :- events([beReunitedWith/2])
%~ ooo :- [   cl([events([beReunitedWith/2])],[])]
%~ cpc :- actions([beReunitedWith/2])
%~ ooo :- [   cl([actions([beReunitedWith/2])],[])]
%~ cpc :- mpred_prop(beReunitedWith(diver,diver),action)
%~ ooo :- [   cl([mpred_prop(beReunitedWith(diver,diver),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4045).
( cl(events(beReunitedWith/2),[])  ,    cl(mpred_prop(beReunitedWith(diver,diver),action),[]) ,     cl(actions(beReunitedWith/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4047).
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver1,diver2),time).
%~ From E:
%~ 
%~ initiates_at( becomeSeparated(Diver1,Diver2),   separated(Diver1,Diver2),     Time)
%~ cpc :- initiates( becomeSeparated(Diver1,Diver2),   separated(Diver1,Diver2),     Time)
%~ ooo :- [   cl(    [   initiates( becomeSeparated(Diver1,Diver2),   separated(Diver1,Diver2),     Time)],       [])]
cl(    initiates( becomeSeparated(Diver1,Diver2),   separated(Diver1,Diver2),     Time),       []).
 %  cl(    initiates( becomeSeparated(Diver1,Diver2),   separated(Diver1,Diver2),     Time),       []).
 %  % =================================.


% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4051).
%~ From E:
%~ 
%~ initiates_at( becomeSeparated(Diver1,Diver2),   separated(Diver2,Diver1),     Time)
%~ cpc :- initiates( becomeSeparated(Diver1,Diver2),   separated(Diver2,Diver1),     Time)
%~ ooo :- [   cl(    [   initiates( becomeSeparated(Diver1,Diver2),   separated(Diver2,Diver1),     Time)],       [])]
cl(    initiates( becomeSeparated(Diver1,Diver2),   separated(Diver2,Diver1),     Time),       []).
 %  cl(    initiates( becomeSeparated(Diver1,Diver2),   separated(Diver2,Diver1),     Time),       []).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4053).
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver1,diver2),time).
%~ From E:
%~ 
%~ terminates_at( beReunitedWith(Diver1,Diver2),   separated(Diver1,Diver2),     Time)
%~ cpc :- terminates( beReunitedWith(Diver1,Diver2),   separated(Diver1,Diver2),     Time)
%~ ooo :- [   cl(    [   terminates( beReunitedWith(Diver1,Diver2),   separated(Diver1,Diver2),     Time)],       [])]
cl(    terminates( beReunitedWith(Diver1,Diver2),   separated(Diver1,Diver2),     Time),       []).
 %  cl(    terminates( beReunitedWith(Diver1,Diver2),   separated(Diver1,Diver2),     Time),       []).
 %  % =================================.


% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4057).
%~ From E:
%~ 
%~ terminates_at( beReunitedWith(Diver1,Diver2),   separated(Diver2,Diver1),     Time)
%~ cpc :- terminates( beReunitedWith(Diver1,Diver2),   separated(Diver2,Diver1),     Time)
%~ ooo :- [   cl(    [   terminates( beReunitedWith(Diver1,Diver2),   separated(Diver2,Diver1),     Time)],       [])]
cl(    terminates( beReunitedWith(Diver1,Diver2),   separated(Diver2,Diver1),     Time),       []).
 %  cl(    terminates( beReunitedWith(Diver1,Diver2),   separated(Diver2,Diver1),     Time),       []).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4059).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Dress.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Dress
%; (cf Sleep)
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4081).
% event PutOn(agent,clothing)
%~ From E:
%~ 
%~ event( putOn(agent,clothing))
%~ cpc :- events([putOn/2])
%~ ooo :- [   cl([events([putOn/2])],[])]
%~ cpc :- actions([putOn/2])
%~ ooo :- [   cl([actions([putOn/2])],[])]
%~ cpc :- mpred_prop(putOn(agent,clothing),action)
%~ ooo :- [   cl([mpred_prop(putOn(agent,clothing),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4081).
( cl(events(putOn/2),[])  ,    cl(mpred_prop(putOn(agent,clothing),action),[]) ,     cl(actions(putOn/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4083).
% event TakeOff(agent,clothing)
%~ From E:
%~ 
%~ event( takeOff(agent,clothing))
%~ cpc :- events([takeOff/2])
%~ ooo :- [   cl([events([takeOff/2])],[])]
%~ cpc :- actions([takeOff/2])
%~ ooo :- [   cl([actions([takeOff/2])],[])]
%~ cpc :- mpred_prop(takeOff(agent,clothing),action)
%~ ooo :- [   cl([mpred_prop(takeOff(agent,clothing),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4083).
( cl(events(takeOff/2),[])  ,    cl(mpred_prop(takeOff(agent,clothing),action),[]) ,     cl(actions(takeOff/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4085).
% fluent Wearing(agent,clothing)
%~ From E:
%~ 
%~ fluent( wearing(agent,clothing))
%~ cpc :- fluents([wearing/2])
%~ ooo :- [   cl([fluents([wearing/2])],[])]
%~ cpc :- mpred_prop(wearing(agent,clothing),fluent)
%~ ooo :- [   cl([mpred_prop(wearing(agent,clothing),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4085).
cl(mpred_prop(wearing(agent,clothing),fluent),[]),cl(fluents(wearing/2),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4087).
% [agent,clothing,time]
% Initiates(PutOn(agent,clothing),
%           Wearing(agent,clothing),
%           time).
%~ From E:
%~ 
%~ initiates_at(putOn(Agent,Clothing),wearing(Agent,Clothing),Time)
%~ cpc :- initiates(putOn(Agent,Clothing),wearing(Agent,Clothing),Time)
%~ ooo :- [   cl(    [   initiates(putOn(Agent,Clothing),wearing(Agent,Clothing),Time)],       [])]
cl(initiates(putOn(Agent,Clothing),wearing(Agent,Clothing),Time),[]).
 %  cl(initiates(putOn(Agent,Clothing),wearing(Agent,Clothing),Time),[]).
 %  % =================================.


% [agent,clothing,time]
% Happens(PutOn(agent,clothing),time) ->
% !HoldsAt(Wearing(agent,clothing),time) &
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4093).
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(clothing,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4095).
%~ From E:
%~ 
%~ exists( Location,   happens(putOn(Agent,Clothing),Time) ->         ( holds(not(wearing(Agent,Clothing)),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Clothing,Location),Time)))
%~ cpc :- exists( Location,   happens(putOn(Agent,Clothing),Time) ->         ( holds(not(wearing(Agent,Clothing)),Time)  ,    holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Clothing,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     ( not( holds(wearing(Agent,Clothing),Time))  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Clothing,Location),Time)) ;     not( happens(putOn(Agent,Clothing),Time))))],       [])]
cl(    exists( Location,   (     ( not( holds(wearing(Agent,Clothing),Time))  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Clothing,Location),Time)) ;     not( happens(putOn(Agent,Clothing),Time)))),       []).
 %  cl(    exists( Location,   (     ( not( holds(wearing(Agent,Clothing),Time))  ,        holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Clothing,Location),Time)) ;     not( happens(putOn(Agent,Clothing),Time)))),       []).
 %  % =================================.


% [agent,clothing,time]
% Terminates(TakeOff(agent,clothing),
%            Wearing(agent,clothing),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4099).
%~ From E:
%~ 
%~ terminates_at(takeOff(Agent,Clothing),wearing(Agent,Clothing),Time)
%~ cpc :- terminates(takeOff(Agent,Clothing),wearing(Agent,Clothing),Time)
%~ ooo :- [   cl(    [   terminates(takeOff(Agent,Clothing),wearing(Agent,Clothing),Time)],       [])]
cl(    terminates(takeOff(Agent,Clothing),wearing(Agent,Clothing),Time),       []).
 %  cl(    terminates(takeOff(Agent,Clothing),wearing(Agent,Clothing),Time),       []).
 %  % =================================.


% [agent,clothing,time]
% Happens(TakeOff(agent,clothing),time) ->
% HoldsAt(Wearing(agent,clothing),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4104).
%~ From E:
%~ 
%~ happens(takeOff(Agent,Clothing),Time) ->         holds(wearing(Agent,Clothing),Time)
%~ cpc :- happens(takeOff(Agent,Clothing),Time) ->         holds(wearing(Agent,Clothing),Time)
%~ ooo :- [   cl(    [   holds(wearing(Agent,Clothing),Time)],       [      happens(takeOff(Agent,Clothing),Time)])]
cl(    holds(wearing(Agent,Clothing),Time),       happens(takeOff(Agent,Clothing),Time)).
 %  cl(    holds(wearing(Agent,Clothing),Time),       happens(takeOff(Agent,Clothing),Time)).
 %  % =================================.


% [agent,clothing,location,time]
% Releases(PutOn(agent,clothing),At(clothing,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4108).
%~ From E:
%~ 
%~ releases_at(putOn(Agent,Clothing),at_loc(Clothing,Location),Time)
%~ cpc :- releases(putOn(Agent,Clothing),at_loc(Clothing,Location),Time)
%~ ooo :- [   cl(    [   releases(putOn(Agent,Clothing),at_loc(Clothing,Location),Time)],       [])]
cl(releases(putOn(Agent,Clothing),at_loc(Clothing,Location),Time),[]).
 %  cl(releases(putOn(Agent,Clothing),at_loc(Clothing,Location),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4110).
% [agent,clothing,location,time]
% HoldsAt(Wearing(agent,clothing),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(clothing,location),time).
%~ From E:
%~ 
%~ (     holds(wearing(Agent,Clothing),Time) ,     holds(at_loc(Agent,Location),Time)) ->         holds(at_loc(Clothing,Location),Time)
%~ cpc :- (     holds(wearing(Agent,Clothing),Time) ,     holds(at_loc(Agent,Location),Time)) ->         holds(at_loc(Clothing,Location),Time)
%~ ooo :- [   cl(    [   holds(at_loc(Clothing,Location),Time)],       [      holds(wearing(Agent,Clothing),Time),           holds(at_loc(Agent,Location),Time)])]
cl(    holds(at_loc(Clothing,Location),Time),       (           holds(wearing(Agent,Clothing),Time) ,           holds(at_loc(Agent,Location),Time))).
 %  cl(    holds(at_loc(Clothing,Location),Time),       (           holds(wearing(Agent,Clothing),Time) ,           holds(at_loc(Agent,Location),Time))).
 %  % =================================.


%;[agent,clothing,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(TakeOff(agent,clothing),At(clothing,location2),time).
% [agent,clothing,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(TakeOff(agent,clothing),At(clothing,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4120).
%~ From E:
%~ 
%~ holds(at_loc(Agent,Location),Time) ->         initiates_at(takeOff(Agent,Clothing),at_loc(Clothing,Location),Time)
%~ cpc :- holds(at_loc(Agent,Location),Time)
%~ ooo :- [   cl([holds(at_loc(Agent,Location),Time)],[])]
%~ cpc :- if(    initiates(takeOff(Agent,Clothing),at(at_loc(Clothing,Location),Time)),       cl([holds(at_loc(Agent,Location),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(takeOff(Agent,Clothing),at(at_loc(Clothing,Location),Time)),       cl([holds(at_loc(Agent,Location),Time)],[]))],       [])]
cl(    (     (         takeOff(Agent,Clothing) initiates         at_loc(Clothing,Location)at Time) if     cl(holds(at_loc(Agent,Location),Time),[])),       []).
 %  cl(    if(    initiates(takeOff(Agent,Clothing),at(at_loc(Clothing,Location),Time)),       cl(holds(at_loc(Agent,Location),Time),[])),       []).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/HungerNeed.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; hunger need
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4145).
% fluent Hungry(agent)
%~ From E:
%~ 
%~ fluent( hungry(agent))
%~ cpc :- fluents([hungry/1])
%~ ooo :- [   cl([fluents([hungry/1])],[])]
%~ cpc :- mpred_prop(hungry(agent),fluent)
%~ ooo :- [   cl([mpred_prop(hungry(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4145).
cl(mpred_prop(hungry(agent),fluent),[]),cl(fluents(hungry/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4147).
% fluent Satiated(agent)
%~ From E:
%~ 
%~ fluent( satiated(agent))
%~ cpc :- fluents([satiated/1])
%~ ooo :- [   cl([fluents([satiated/1])],[])]
%~ cpc :- mpred_prop(satiated(agent),fluent)
%~ ooo :- [   cl([mpred_prop(satiated(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4147).
cl(mpred_prop(satiated(agent),fluent),[]),cl(fluents(satiated/1),[]).

% noninertial Satiated
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(satiated)))
:-( call_pel_directive( noninertial(satiated))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4150).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).
%~ From E:
%~ 
%~ <->(holds(hungry(Agent),Time),holds(not(satiated(Agent)),Time))
%~ cpc :- <->(holds(hungry(Agent),Time),holds(not(satiated(Agent)),Time))
%~ ooo :- [   cl([],[holds(satiated(Agent),Time),holds(hungry(Agent),Time)]),     cl([holds(hungry(Agent),Time),holds(satiated(Agent),Time)],[])]
(     cl([],(holds(satiated(Agent),Time),holds(hungry(Agent),Time))) ,     cl((holds(hungry(Agent),Time),holds(satiated(Agent),Time)),[])).
 %  (     cl([],(holds(satiated(Agent),Time),holds(hungry(Agent),Time))) ,     cl((holds(hungry(Agent),Time),holds(satiated(Agent),Time)),[])).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4152).
% event Eat(agent,food)
%~ From E:
%~ 
%~ event( eat(agent,food))
%~ cpc :- events([eat/2])
%~ ooo :- [   cl([events([eat/2])],[])]
%~ cpc :- actions([eat/2])
%~ ooo :- [   cl([actions([eat/2])],[])]
%~ cpc :- mpred_prop(eat(agent,food),action)
%~ ooo :- [   cl([mpred_prop(eat(agent,food),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4152).
( cl(events(eat/2),[])  ,    cl(mpred_prop(eat(agent,food),action),[]) ,     cl(actions(eat/2),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4154).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4156).
%~ From E:
%~ 
%~ exists( Location,   happens(eat(Agent,Food),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Food,Location),Time)))
%~ cpc :- exists( Location,   happens(eat(Agent,Food),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Food,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(eat(Agent,Food),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(eat(Agent,Food),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(eat(Agent,Food),Time)))),       []).
 %  % =================================.


% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4161).
%~ From E:
%~ 
%~ terminates_at(eat(Agent,Food),hungry(Agent),Time)
%~ cpc :- terminates(eat(Agent,Food),hungry(Agent),Time)
%~ ooo :- [   cl([terminates(eat(Agent,Food),hungry(Agent),Time)],[])]
cl(terminates(eat(Agent,Food),hungry(Agent),Time),[]).
 %  cl(terminates(eat(Agent,Food),hungry(Agent),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4163).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Restaurant.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4181).
% sort restaurant: script
%~ From E:
%~ 
%~ subsort(restaurant,script)
subsort(restaurant,script).

% sort waiter: agent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4181).
%~ From E:
%~ 
%~ subsort(waiter,agent)
subsort(waiter,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4183).
% sort cook: agent
%~ From E:
%~ 
%~ subsort(cook,agent)
subsort(cook,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4185).
% function BillOf(restaurant): bill
%~ From E:
%~ 
%~ function(billOf(restaurant),bill)
function(billOf(restaurant),bill).

% function CookOf(restaurant): cook
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4185).
%~ From E:
%~ 
%~ function(cookOf(restaurant),cook)
function(cookOf(restaurant),cook).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4187).
% function TableOf(restaurant): table
%~ From E:
%~ 
%~ function(tableOf(restaurant),table)
function(tableOf(restaurant),table).

% function WaiterOf(restaurant): waiter
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4187).
%~ From E:
%~ 
%~ function(waiterOf(restaurant),waiter)
function(waiterOf(restaurant),waiter).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4189).
% function KitchenDoorOf(restaurant): door
%~ From E:
%~ 
%~ function(kitchenDoorOf(restaurant),door)
function(kitchenDoorOf(restaurant),door).
%; awaiting customer/waiter has set down bill on customer's table

% fluent BeWaiter0(waiter)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4191).
%~ From E:
%~ 
%~ fluent( beWaiter0(waiter))
%~ cpc :- fluents([beWaiter0/1])
%~ ooo :- [   cl([fluents([beWaiter0/1])],[])]
%~ cpc :- mpred_prop(beWaiter0(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter0(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4191).
cl(mpred_prop(beWaiter0(waiter),fluent),[]),cl(fluents(beWaiter0/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4194).
%; awaiting customer order

% fluent BeWaiter1(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter1(waiter))
%~ cpc :- fluents([beWaiter1/1])
%~ ooo :- [   cl([fluents([beWaiter1/1])],[])]
%~ cpc :- mpred_prop(beWaiter1(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter1(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4194).
cl(mpred_prop(beWaiter1(waiter),fluent),[]),cl(fluents(beWaiter1/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4197).
%; has customer order

% fluent BeWaiter2(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter2(waiter))
%~ cpc :- fluents([beWaiter2/1])
%~ ooo :- [   cl([fluents([beWaiter2/1])],[])]
%~ cpc :- mpred_prop(beWaiter2(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter2(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4197).
cl(mpred_prop(beWaiter2(waiter),fluent),[]),cl(fluents(beWaiter2/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4200).
%; in kitchen

% fluent BeWaiter3(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter3(waiter))
%~ cpc :- fluents([beWaiter3/1])
%~ ooo :- [   cl([fluents([beWaiter3/1])],[])]
%~ cpc :- mpred_prop(beWaiter3(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter3(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4200).
cl(mpred_prop(beWaiter3(waiter),fluent),[]),cl(fluents(beWaiter3/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4203).
%; awaiting preparation of order

% fluent BeWaiter4(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter4(waiter))
%~ cpc :- fluents([beWaiter4/1])
%~ ooo :- [   cl([fluents([beWaiter4/1])],[])]
%~ cpc :- mpred_prop(beWaiter4(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter4(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4203).
cl(mpred_prop(beWaiter4(waiter),fluent),[]),cl(fluents(beWaiter4/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4206).
%; has order

% fluent BeWaiter5(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter5(waiter))
%~ cpc :- fluents([beWaiter5/1])
%~ ooo :- [   cl([fluents([beWaiter5/1])],[])]
%~ cpc :- mpred_prop(beWaiter5(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter5(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4206).
cl(mpred_prop(beWaiter5(waiter),fluent),[]),cl(fluents(beWaiter5/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4209).
%; back in dining room

% fluent BeWaiter6(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter6(waiter))
%~ cpc :- fluents([beWaiter6/1])
%~ ooo :- [   cl([fluents([beWaiter6/1])],[])]
%~ cpc :- mpred_prop(beWaiter6(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter6(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4209).
cl(mpred_prop(beWaiter6(waiter),fluent),[]),cl(fluents(beWaiter6/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4212).
%; order delivered to customer (can ask if all is OK)

% fluent BeWaiter7(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter7(waiter))
%~ cpc :- fluents([beWaiter7/1])
%~ ooo :- [   cl([fluents([beWaiter7/1])],[])]
%~ cpc :- mpred_prop(beWaiter7(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter7(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4212).
cl(mpred_prop(beWaiter7(waiter),fluent),[]),cl(fluents(beWaiter7/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4215).
%; customer has requested bill

% fluent BeWaiter8(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter8(waiter))
%~ cpc :- fluents([beWaiter8/1])
%~ ooo :- [   cl([fluents([beWaiter8/1])],[])]
%~ cpc :- mpred_prop(beWaiter8(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter8(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4215).
cl(mpred_prop(beWaiter8(waiter),fluent),[]),cl(fluents(beWaiter8/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4218).
%; waiter is holding bill

% fluent BeWaiter9(waiter)
%~ From E:
%~ 
%~ fluent( beWaiter9(waiter))
%~ cpc :- fluents([beWaiter9/1])
%~ ooo :- [   cl([fluents([beWaiter9/1])],[])]
%~ cpc :- mpred_prop(beWaiter9(waiter),fluent)
%~ ooo :- [   cl([mpred_prop(beWaiter9(waiter),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4218).
cl(mpred_prop(beWaiter9(waiter),fluent),[]),cl(fluents(beWaiter9/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4221).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
%~ From E:
%~ 
%~ xor( [   beWaiter0, beWaiter1,beWaiter2,beWaiter3,beWaiter4,
%~   beWaiter5,beWaiter6,beWaiter7,beWaiter8,
%~       beWaiter9])
%~ cpc :- xor( [   beWaiter0, beWaiter1,beWaiter2,beWaiter3,beWaiter4,
%~   beWaiter5,beWaiter6,beWaiter7,beWaiter8,
%~       beWaiter9])
%~ ooo :- [   cl(    [   xor( [   beWaiter0, beWaiter1,beWaiter2,beWaiter3,beWaiter4,
%~   beWaiter5,beWaiter6,beWaiter7,beWaiter8,
%~       beWaiter9])],       [])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4221).
cl(    xor( ( beWaiter0  ,    beWaiter1 ,     beWaiter2 ,     beWaiter3 ,     beWaiter4 ,     beWaiter5 ,     beWaiter6 ,     beWaiter7 ,     beWaiter8 ,     beWaiter9)),       []).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4223).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4223).
%~ From E:
%~ 
%~ holds(beWaiter0(Waiter),Time) ->         terminates_at(greet(Waiter,Agent),beWaiter0(Waiter),Time)
%~ cpc :- holds(beWaiter0(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter0(Waiter),Time)],[])]
%~ cpc :- if(    terminates(greet(Waiter,Agent),at(beWaiter0(Waiter),Time)),       cl([holds(beWaiter0(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(greet(Waiter,Agent),at(beWaiter0(Waiter),Time)),       cl([holds(beWaiter0(Waiter),Time)],[]))],       [])]
cl(    (     greet(Waiter,Agent)terminates beWaiter0(Waiter)at Time if     cl(holds(beWaiter0(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(greet(Waiter,Agent),at(beWaiter0(Waiter),Time)),       cl(holds(beWaiter0(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4230).
%~ From E:
%~ 
%~ holds(beWaiter0(Waiter),Time) ->         initiates_at(greet(Waiter,Agent),beWaiter1(Waiter),Time)
%~ cpc :- holds(beWaiter0(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter0(Waiter),Time)],[])]
%~ cpc :- if(    initiates(greet(Waiter,Agent),at(beWaiter1(Waiter),Time)),       cl([holds(beWaiter0(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(greet(Waiter,Agent),at(beWaiter1(Waiter),Time)),       cl([holds(beWaiter0(Waiter),Time)],[]))],       [])]
cl(    (     greet(Waiter,Agent)initiates beWaiter1(Waiter)at Time if     cl(holds(beWaiter0(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(greet(Waiter,Agent),at(beWaiter1(Waiter),Time)),       cl(holds(beWaiter0(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4236).
%~ From E:
%~ 
%~ holds(beWaiter1(Waiter),Time) ->         terminates_at(order(Agent,Waiter,Food),beWaiter1(Waiter),Time)
%~ cpc :- holds(beWaiter1(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter1(Waiter),Time)],[])]
%~ cpc :- if(    terminates(order(Agent,Waiter,Food),at(beWaiter1(Waiter),Time)),       cl([holds(beWaiter1(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(order(Agent,Waiter,Food),at(beWaiter1(Waiter),Time)),       cl([holds(beWaiter1(Waiter),Time)],[]))],       [])]
cl(    (     order(Agent,Waiter,Food)terminates beWaiter1(Waiter)at Time if     cl(holds(beWaiter1(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(order(Agent,Waiter,Food),at(beWaiter1(Waiter),Time)),       cl(holds(beWaiter1(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4242).
%~ From E:
%~ 
%~ holds(beWaiter1(Waiter),Time) ->         initiates_at(order(Agent,Waiter,Food),beWaiter2(Waiter),Time)
%~ cpc :- holds(beWaiter1(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter1(Waiter),Time)],[])]
%~ cpc :- if(    initiates(order(Agent,Waiter,Food),at(beWaiter2(Waiter),Time)),       cl([holds(beWaiter1(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(order(Agent,Waiter,Food),at(beWaiter2(Waiter),Time)),       cl([holds(beWaiter1(Waiter),Time)],[]))],       [])]
cl(    (     order(Agent,Waiter,Food)initiates beWaiter2(Waiter)at Time if     cl(holds(beWaiter1(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(order(Agent,Waiter,Food),at(beWaiter2(Waiter),Time)),       cl(holds(beWaiter1(Waiter),Time),[])),       []).
 %  % =================================.


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4248).
%~ From E:
%~ 
%~ waiterOf(Restaurant)=Waiter,holds(beWaiter2(Waiter),Time) ->         happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time)
%~ cpc :- waiterOf(Restaurant)=Waiter,holds(beWaiter2(Waiter),Time) ->         happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time)
%~ ooo :- [   cl(    [   happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time)],       [      equals(waiterOf(Restaurant),Waiter),           holds(beWaiter2(Waiter),Time)])]
cl(    happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time),       equals(waiterOf(Restaurant),Waiter),holds(beWaiter2(Waiter),Time)).
 %  cl(    happens(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time),       equals(waiterOf(Restaurant),Waiter),holds(beWaiter2(Waiter),Time)).
 %  % =================================.


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4253).
%~ From E:
%~ 
%~ ( holds(beWaiter2(Waiter),Time)  ,      waiterOf(Restaurant) =             Waiter ,       kitchenDoorOf(Restaurant) =             Door) ->         terminates_at(walkThroughDoor12(Waiter,Door),beWaiter2(Waiter),Time)
%~ cpc :- holds(beWaiter2(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter2(Waiter),Time)],[])]
%~ cpc :- if(    terminates(walkThroughDoor12(Waiter,Door),at(beWaiter2(Waiter),Time)),       ( cl([holds(beWaiter2(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))
%~ ooo :- [   cl(    [   if(    terminates(walkThroughDoor12(Waiter,Door),at(beWaiter2(Waiter),Time)),       ( cl([holds(beWaiter2(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))],       [])]
cl(    (     walkThroughDoor12(Waiter,Door)terminates beWaiter2(Waiter)at Time if     ( cl(holds(beWaiter2(Waiter),Time),[])  ,        waiterOf(Restaurant,Waiter) ,         kitchenDoorOf(Restaurant,Door))),       []).
 %  cl(    if(    terminates(walkThroughDoor12(Waiter,Door),at(beWaiter2(Waiter),Time)),       ( cl(holds(beWaiter2(Waiter),Time),[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door))),       []).
 %  % =================================.


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4261).
%~ From E:
%~ 
%~ ( holds(beWaiter2(Waiter),Time)  ,      waiterOf(Restaurant) =             Waiter ,       kitchenDoorOf(Restaurant) =             Door) ->         initiates_at(walkThroughDoor12(Waiter,Door),beWaiter3(Waiter),Time)
%~ cpc :- holds(beWaiter2(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter2(Waiter),Time)],[])]
%~ cpc :- if(    initiates(walkThroughDoor12(Waiter,Door),at(beWaiter3(Waiter),Time)),       ( cl([holds(beWaiter2(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))
%~ ooo :- [   cl(    [   if(    initiates(walkThroughDoor12(Waiter,Door),at(beWaiter3(Waiter),Time)),       ( cl([holds(beWaiter2(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))],       [])]
cl(    (     walkThroughDoor12(Waiter,Door)initiates beWaiter3(Waiter)at Time if     ( cl(holds(beWaiter2(Waiter),Time),[])  ,        waiterOf(Restaurant,Waiter) ,         kitchenDoorOf(Restaurant,Door))),       []).
 %  cl(    if(    initiates(walkThroughDoor12(Waiter,Door),at(beWaiter3(Waiter),Time)),       ( cl(holds(beWaiter2(Waiter),Time),[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door))),       []).
 %  % =================================.


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4269).
%~ From E:
%~ 
%~ (     holds(beWaiter3(waiterOf(Restaurant)),Time) ,     thereExists( Agent,     holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time))) ->         happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)
%~ cpc :- (     holds(beWaiter3(waiterOf(Restaurant)),Time) ,     thereExists( Agent,     holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time))) ->         happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)
%~ ooo :- [   cl(    [   exists( Agent,   ( happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)  ;    not( holds(beWaiter3(waiterOf(Restaurant)),Time)) ;     not( holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time))))],       [])]
cl(    exists( Agent,   ( happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)  ;    not( holds(beWaiter3(waiterOf(Restaurant)),Time)) ;     not( holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time)))),       []).
 %  ( cl(    exists( Agent,   ( happens(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)  ;    not( holds(beWaiter3(waiterOf(Restaurant)),Time)) ;     not( holds(knowOrder(waiterOf(Restaurant),Agent,Food),Time)))),       [])).
 %  % =================================.


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4274).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      cookOf(Restaurant) =             Cook ,     holds(beWaiter3(Waiter),Time)) ->         terminates_at(order(Waiter,Cook,Food),beWaiter3(Waiter),Time)
%~ cpc :- holds(beWaiter3(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter3(Waiter),Time)],[])]
%~ cpc :- if(    terminates(order(Waiter,Cook,Food),at(beWaiter3(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl([holds(beWaiter3(Waiter),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates(order(Waiter,Cook,Food),at(beWaiter3(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl([holds(beWaiter3(Waiter),Time)],[])))],       [])]
cl(    (     order(Waiter,Cook,Food)terminates beWaiter3(Waiter)at Time if     ( waiterOf(Restaurant,Waiter)  ,        cookOf(Restaurant,Cook) ,         cl(holds(beWaiter3(Waiter),Time),[]))),       []).
 %  cl(    if(    terminates(order(Waiter,Cook,Food),at(beWaiter3(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl(holds(beWaiter3(Waiter),Time),[]))),       []).
 %  % =================================.


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4282).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      cookOf(Restaurant) =             Cook ,     holds(beWaiter3(Waiter),Time)) ->         initiates_at(order(Waiter,Cook,Food),beWaiter4(Waiter),Time)
%~ cpc :- holds(beWaiter3(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter3(Waiter),Time)],[])]
%~ cpc :- if(    initiates(order(Waiter,Cook,Food),at(beWaiter4(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl([holds(beWaiter3(Waiter),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates(order(Waiter,Cook,Food),at(beWaiter4(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl([holds(beWaiter3(Waiter),Time)],[])))],       [])]
cl(    (     order(Waiter,Cook,Food)initiates beWaiter4(Waiter)at Time if     ( waiterOf(Restaurant,Waiter)  ,        cookOf(Restaurant,Cook) ,         cl(holds(beWaiter3(Waiter),Time),[]))),       []).
 %  cl(    if(    initiates(order(Waiter,Cook,Food),at(beWaiter4(Waiter),Time)),       ( waiterOf(Restaurant,Waiter)  ,          cookOf(Restaurant,Cook) ,           cl(holds(beWaiter3(Waiter),Time),[]))),       []).
 %  % =================================.


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4290).
%~ From E:
%~ 
%~ ( holds(beWaiter4(Waiter),Time)  ,    thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)) ,     holds(foodPrepared(Food),Time)) ->         happens(pickUp(Waiter,Food),Time)
%~ cpc :- ( holds(beWaiter4(Waiter),Time)  ,    thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)) ,     holds(foodPrepared(Food),Time)) ->         happens(pickUp(Waiter,Food),Time)
%~ ooo :- [   cl(    [   exists( Agent,   ( happens(pickUp(Waiter,Food),Time)  ;    not( holds(beWaiter4(Waiter),Time)) ;     not( holds(knowOrder(Waiter,Agent,Food),Time)) ;     not( holds(foodPrepared(Food),Time))))],       [])]
cl(    exists( Agent,   ( happens(pickUp(Waiter,Food),Time)  ;    not( holds(beWaiter4(Waiter),Time)) ;     not( holds(knowOrder(Waiter,Agent,Food),Time)) ;     not( holds(foodPrepared(Food),Time)))),       []).
 %  ( cl(    exists( Agent,   ( happens(pickUp(Waiter,Food),Time)  ;    not( holds(beWaiter4(Waiter),Time)) ;     not( holds(knowOrder(Waiter,Agent,Food),Time)) ;     not( holds(foodPrepared(Food),Time)))),       [])).
 %  % =================================.


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4296).
%~ From E:
%~ 
%~ (     holds(beWaiter4(Waiter),Time) ,     thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))) ->         terminates_at(pickUp(Waiter,Food),beWaiter4(Waiter),Time)
%~ cpc :- holds(beWaiter4(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter4(Waiter),Time)],[])]
%~ cpc :- thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))
%~ ooo :- [   cl(    [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],       [])]
%~ cpc :- if(    terminates(pickUp(Waiter,Food),at(beWaiter4(Waiter),Time)),       (           cl([holds(beWaiter4(Waiter),Time)],[]) ,           cl(         [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],                 [])))
%~ ooo :- [   cl(    [   if(    terminates(pickUp(Waiter,Food),at(beWaiter4(Waiter),Time)),       (           cl([holds(beWaiter4(Waiter),Time)],[]) ,           cl(         [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],                 [])))],       [])]
cl(    (     pickUp(Waiter,Food)terminates beWaiter4(Waiter)at Time if     (         cl(holds(beWaiter4(Waiter),Time),[]) ,         cl(exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)),[]))),       []).
 %  cl(    if(    terminates(pickUp(Waiter,Food),at(beWaiter4(Waiter),Time)),       (           cl(holds(beWaiter4(Waiter),Time),[]) ,           cl(exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)),[]))),       []).
 %  % =================================.


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4303).
%~ From E:
%~ 
%~ (     holds(beWaiter4(Waiter),Time) ,     thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))) ->         initiates_at(pickUp(Waiter,Food),beWaiter5(Waiter),Time)
%~ cpc :- holds(beWaiter4(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter4(Waiter),Time)],[])]
%~ cpc :- thereExists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))
%~ ooo :- [   cl(    [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],       [])]
%~ cpc :- if(    initiates(pickUp(Waiter,Food),at(beWaiter5(Waiter),Time)),       (           cl([holds(beWaiter4(Waiter),Time)],[]) ,           cl(         [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],                 [])))
%~ ooo :- [   cl(    [   if(    initiates(pickUp(Waiter,Food),at(beWaiter5(Waiter),Time)),       (           cl([holds(beWaiter4(Waiter),Time)],[]) ,           cl(         [   exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time))],                 [])))],       [])]
cl(    (     pickUp(Waiter,Food)initiates beWaiter5(Waiter)at Time if     (         cl(holds(beWaiter4(Waiter),Time),[]) ,         cl(exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)),[]))),       []).
 %  cl(    if(    initiates(pickUp(Waiter,Food),at(beWaiter5(Waiter),Time)),       (           cl(holds(beWaiter4(Waiter),Time),[]) ,           cl(exists(Agent,holds(knowOrder(Waiter,Agent,Food),Time)),[]))),       []).
 %  % =================================.


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4310).
%~ From E:
%~ 
%~ waiterOf(Restaurant)=Waiter,holds(beWaiter5(Waiter),Time) ->         happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time)
%~ cpc :- waiterOf(Restaurant)=Waiter,holds(beWaiter5(Waiter),Time) ->         happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time)
%~ ooo :- [   cl(    [   happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time)],       [      equals(waiterOf(Restaurant),Waiter),           holds(beWaiter5(Waiter),Time)])]
cl(    happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time),       equals(waiterOf(Restaurant),Waiter),holds(beWaiter5(Waiter),Time)).
 %  cl(    happens(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time),       equals(waiterOf(Restaurant),Waiter),holds(beWaiter5(Waiter),Time)).
 %  % =================================.


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4315).
%~ From E:
%~ 
%~ ( holds(beWaiter5(Waiter),Time)  ,      waiterOf(Restaurant) =             Waiter ,       kitchenDoorOf(Restaurant) =             Door) ->         terminates_at(walkThroughDoor21(Waiter,Door),beWaiter5(Waiter),Time)
%~ cpc :- holds(beWaiter5(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter5(Waiter),Time)],[])]
%~ cpc :- if(    terminates(walkThroughDoor21(Waiter,Door),at(beWaiter5(Waiter),Time)),       ( cl([holds(beWaiter5(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))
%~ ooo :- [   cl(    [   if(    terminates(walkThroughDoor21(Waiter,Door),at(beWaiter5(Waiter),Time)),       ( cl([holds(beWaiter5(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))],       [])]
cl(    (     walkThroughDoor21(Waiter,Door)terminates beWaiter5(Waiter)at Time if     ( cl(holds(beWaiter5(Waiter),Time),[])  ,        waiterOf(Restaurant,Waiter) ,         kitchenDoorOf(Restaurant,Door))),       []).
 %  cl(    if(    terminates(walkThroughDoor21(Waiter,Door),at(beWaiter5(Waiter),Time)),       ( cl(holds(beWaiter5(Waiter),Time),[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door))),       []).
 %  % =================================.


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4323).
%~ From E:
%~ 
%~ ( holds(beWaiter5(Waiter),Time)  ,      waiterOf(Restaurant) =             Waiter ,       kitchenDoorOf(Restaurant) =             Door) ->         initiates_at(walkThroughDoor21(Waiter,Door),beWaiter6(Waiter),Time)
%~ cpc :- holds(beWaiter5(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter5(Waiter),Time)],[])]
%~ cpc :- if(    initiates(walkThroughDoor21(Waiter,Door),at(beWaiter6(Waiter),Time)),       ( cl([holds(beWaiter5(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))
%~ ooo :- [   cl(    [   if(    initiates(walkThroughDoor21(Waiter,Door),at(beWaiter6(Waiter),Time)),       ( cl([holds(beWaiter5(Waiter),Time)],[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door)))],       [])]
cl(    (     walkThroughDoor21(Waiter,Door)initiates beWaiter6(Waiter)at Time if     ( cl(holds(beWaiter5(Waiter),Time),[])  ,        waiterOf(Restaurant,Waiter) ,         kitchenDoorOf(Restaurant,Door))),       []).
 %  cl(    if(    initiates(walkThroughDoor21(Waiter,Door),at(beWaiter6(Waiter),Time)),       ( cl(holds(beWaiter5(Waiter),Time),[])  ,          waiterOf(Restaurant,Waiter) ,           kitchenDoorOf(Restaurant,Door))),       []).
 %  % =================================.


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4331).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      tableOf(Restaurant) =             Table ,     holds(beWaiter6(Waiter),Time) ,     holds(holding(Waiter,Food),Time)) ->         happens(placeOn(Waiter,Food,Table),Time)
%~ cpc :- ( waiterOf(Restaurant) =         Waiter  ,      tableOf(Restaurant) =             Table ,     holds(beWaiter6(Waiter),Time) ,     holds(holding(Waiter,Food),Time)) ->         happens(placeOn(Waiter,Food,Table),Time)
%~ ooo :- [   cl(    [   happens(placeOn(Waiter,Food,Table),Time)],       [      equals(waiterOf(Restaurant),Waiter),           equals(tableOf(Restaurant),Table),           holds(beWaiter6(Waiter),Time),           holds(holding(Waiter,Food),Time)])]
cl(    happens(placeOn(Waiter,Food,Table),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(tableOf(Restaurant),Table) ,           holds(beWaiter6(Waiter),Time) ,           holds(holding(Waiter,Food),Time))).
 %  cl(    happens(placeOn(Waiter,Food,Table),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(tableOf(Restaurant),Table) ,           holds(beWaiter6(Waiter),Time) ,           holds(holding(Waiter,Food),Time))).
 %  % =================================.


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4338).
%~ From E:
%~ 
%~ holds(beWaiter6(Waiter),Time) ->         terminates_at(placeOn(Waiter,Food,Table),beWaiter6(Waiter),Time)
%~ cpc :- holds(beWaiter6(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter6(Waiter),Time)],[])]
%~ cpc :- if(    terminates(placeOn(Waiter,Food,Table),at(beWaiter6(Waiter),Time)),       cl([holds(beWaiter6(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(placeOn(Waiter,Food,Table),at(beWaiter6(Waiter),Time)),       cl([holds(beWaiter6(Waiter),Time)],[]))],       [])]
cl(    (     placeOn(Waiter,Food,Table)terminates beWaiter6(Waiter)at Time if     cl(holds(beWaiter6(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(placeOn(Waiter,Food,Table),at(beWaiter6(Waiter),Time)),       cl(holds(beWaiter6(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4344).
%~ From E:
%~ 
%~ holds(beWaiter6(Waiter),Time) ->         initiates_at(placeOn(Waiter,Food,Table),beWaiter7(Waiter),Time)
%~ cpc :- holds(beWaiter6(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter6(Waiter),Time)],[])]
%~ cpc :- if(    initiates(placeOn(Waiter,Food,Table),at(beWaiter7(Waiter),Time)),       cl([holds(beWaiter6(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(placeOn(Waiter,Food,Table),at(beWaiter7(Waiter),Time)),       cl([holds(beWaiter6(Waiter),Time)],[]))],       [])]
cl(    (     placeOn(Waiter,Food,Table)initiates beWaiter7(Waiter)at Time if     cl(holds(beWaiter6(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(placeOn(Waiter,Food,Table),at(beWaiter7(Waiter),Time)),       cl(holds(beWaiter6(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4350).
%~ From E:
%~ 
%~ holds(beWaiter7(Waiter),Time) ->         terminates_at(request(Agent,Waiter,Bill),beWaiter7(Waiter),Time)
%~ cpc :- holds(beWaiter7(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter7(Waiter),Time)],[])]
%~ cpc :- if(    terminates(request(Agent,Waiter,Bill),at(beWaiter7(Waiter),Time)),       cl([holds(beWaiter7(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(request(Agent,Waiter,Bill),at(beWaiter7(Waiter),Time)),       cl([holds(beWaiter7(Waiter),Time)],[]))],       [])]
cl(    (     request(Agent,Waiter,Bill)terminates beWaiter7(Waiter)at Time if     cl(holds(beWaiter7(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(request(Agent,Waiter,Bill),at(beWaiter7(Waiter),Time)),       cl(holds(beWaiter7(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4356).
%~ From E:
%~ 
%~ holds(beWaiter7(Waiter),Time) ->         initiates_at(request(Agent,Waiter,Bill),beWaiter8(Waiter),Time)
%~ cpc :- holds(beWaiter7(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter7(Waiter),Time)],[])]
%~ cpc :- if(    initiates(request(Agent,Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl([holds(beWaiter7(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(request(Agent,Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl([holds(beWaiter7(Waiter),Time)],[]))],       [])]
cl(    (     request(Agent,Waiter,Bill)initiates beWaiter8(Waiter)at Time if     cl(holds(beWaiter7(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(request(Agent,Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl(holds(beWaiter7(Waiter),Time),[])),       []).
 %  % =================================.


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4362).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      billOf(Restaurant) =             Bill ,     holds(beWaiter8(Waiter),Time)) ->         happens(pickUp(Waiter,Bill),Time)
%~ cpc :- ( waiterOf(Restaurant) =         Waiter  ,      billOf(Restaurant) =             Bill ,     holds(beWaiter8(Waiter),Time)) ->         happens(pickUp(Waiter,Bill),Time)
%~ ooo :- [   cl(    [   happens(pickUp(Waiter,Bill),Time)],       [      equals(waiterOf(Restaurant),Waiter),           equals(billOf(Restaurant),Bill),           holds(beWaiter8(Waiter),Time)])]
cl(    happens(pickUp(Waiter,Bill),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(billOf(Restaurant),Bill) ,           holds(beWaiter8(Waiter),Time))).
 %  cl(    happens(pickUp(Waiter,Bill),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(billOf(Restaurant),Bill) ,           holds(beWaiter8(Waiter),Time))).
 %  % =================================.


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4368).
%~ From E:
%~ 
%~ holds(beWaiter8(Waiter),Time) ->         terminates_at(pickUp(Waiter,Bill),beWaiter8(Waiter),Time)
%~ cpc :- holds(beWaiter8(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter8(Waiter),Time)],[])]
%~ cpc :- if(    terminates(pickUp(Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl([holds(beWaiter8(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(pickUp(Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl([holds(beWaiter8(Waiter),Time)],[]))],       [])]
cl(    (     pickUp(Waiter,Bill)terminates beWaiter8(Waiter)at Time if     cl(holds(beWaiter8(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(pickUp(Waiter,Bill),at(beWaiter8(Waiter),Time)),       cl(holds(beWaiter8(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4374).
%~ From E:
%~ 
%~ holds(beWaiter8(Waiter),Time) ->         initiates_at(pickUp(Waiter,Bill),beWaiter9(Waiter),Time)
%~ cpc :- holds(beWaiter8(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter8(Waiter),Time)],[])]
%~ cpc :- if(    initiates(pickUp(Waiter,Bill),at(beWaiter9(Waiter),Time)),       cl([holds(beWaiter8(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(pickUp(Waiter,Bill),at(beWaiter9(Waiter),Time)),       cl([holds(beWaiter8(Waiter),Time)],[]))],       [])]
cl(    (     pickUp(Waiter,Bill)initiates beWaiter9(Waiter)at Time if     cl(holds(beWaiter8(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(pickUp(Waiter,Bill),at(beWaiter9(Waiter),Time)),       cl(holds(beWaiter8(Waiter),Time),[])),       []).
 %  % =================================.


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4380).
%~ From E:
%~ 
%~ ( waiterOf(Restaurant) =         Waiter  ,      billOf(Restaurant) =             Bill ,       tableOf(Restaurant) =             Table ,     holds(beWaiter9(Waiter),Time)) ->         happens(placeOn(Waiter,Bill,Table),Time)
%~ cpc :- ( waiterOf(Restaurant) =         Waiter  ,      billOf(Restaurant) =             Bill ,       tableOf(Restaurant) =             Table ,     holds(beWaiter9(Waiter),Time)) ->         happens(placeOn(Waiter,Bill,Table),Time)
%~ ooo :- [   cl(    [   happens(placeOn(Waiter,Bill,Table),Time)],       [      equals(waiterOf(Restaurant),Waiter),           equals(billOf(Restaurant),Bill),           equals(tableOf(Restaurant),Table),           holds(beWaiter9(Waiter),Time)])]
cl(    happens(placeOn(Waiter,Bill,Table),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(billOf(Restaurant),Bill) ,           equals(tableOf(Restaurant),Table) ,           holds(beWaiter9(Waiter),Time))).
 %  cl(    happens(placeOn(Waiter,Bill,Table),Time),       ( equals(waiterOf(Restaurant),Waiter)  ,          equals(billOf(Restaurant),Bill) ,           equals(tableOf(Restaurant),Table) ,           holds(beWaiter9(Waiter),Time))).
 %  % =================================.


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4387).
%~ From E:
%~ 
%~ holds(beWaiter9(Waiter),Time) ->         terminates_at(placeOn(Waiter,Bill,Table),beWaiter9(Waiter),Time)
%~ cpc :- holds(beWaiter9(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter9(Waiter),Time)],[])]
%~ cpc :- if(    terminates(placeOn(Waiter,Bill,Table),at(beWaiter9(Waiter),Time)),       cl([holds(beWaiter9(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(placeOn(Waiter,Bill,Table),at(beWaiter9(Waiter),Time)),       cl([holds(beWaiter9(Waiter),Time)],[]))],       [])]
cl(    (     placeOn(Waiter,Bill,Table)terminates beWaiter9(Waiter)at Time if     cl(holds(beWaiter9(Waiter),Time),[])),       []).
 %  cl(    if(    terminates(placeOn(Waiter,Bill,Table),at(beWaiter9(Waiter),Time)),       cl(holds(beWaiter9(Waiter),Time),[])),       []).
 %  % =================================.


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4393).
%~ From E:
%~ 
%~ holds(beWaiter9(Waiter),Time) ->         initiates_at(placeOn(Waiter,Bill,Table),beWaiter0(Waiter),Time)
%~ cpc :- holds(beWaiter9(Waiter),Time)
%~ ooo :- [   cl([holds(beWaiter9(Waiter),Time)],[])]
%~ cpc :- if(    initiates(placeOn(Waiter,Bill,Table),at(beWaiter0(Waiter),Time)),       cl([holds(beWaiter9(Waiter),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(placeOn(Waiter,Bill,Table),at(beWaiter0(Waiter),Time)),       cl([holds(beWaiter9(Waiter),Time)],[]))],       [])]
cl(    (     placeOn(Waiter,Bill,Table)initiates beWaiter0(Waiter)at Time if     cl(holds(beWaiter9(Waiter),Time),[])),       []).
 %  cl(    if(    initiates(placeOn(Waiter,Bill,Table),at(beWaiter0(Waiter),Time)),       cl(holds(beWaiter9(Waiter),Time),[])),       []).
 %  % =================================.


%; awaiting next waiter order

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4399).
% fluent BeCook0(cook)
%~ From E:
%~ 
%~ fluent( beCook0(cook))
%~ cpc :- fluents([beCook0/1])
%~ ooo :- [   cl([fluents([beCook0/1])],[])]
%~ cpc :- mpred_prop(beCook0(cook),fluent)
%~ ooo :- [   cl([mpred_prop(beCook0(cook),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4399).
cl(mpred_prop(beCook0(cook),fluent),[]),cl(fluents(beCook0/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4401).
%; waiter order received

% fluent BeCook1(cook)
%~ From E:
%~ 
%~ fluent( beCook1(cook))
%~ cpc :- fluents([beCook1/1])
%~ ooo :- [   cl([fluents([beCook1/1])],[])]
%~ cpc :- mpred_prop(beCook1(cook),fluent)
%~ ooo :- [   cl([mpred_prop(beCook1(cook),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4401).
cl(mpred_prop(beCook1(cook),fluent),[]),cl(fluents(beCook1/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4404).
% xor BeCook0, BeCook1
%~ From E:
%~ 
%~ xor( [beCook0,beCook1])
%~ cpc :- xor( [beCook0,beCook1])
%~ ooo :- [   cl([xor([beCook0,beCook1])],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4404).
cl(xor((beCook0,beCook1)),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4406).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4406).
%~ From E:
%~ 
%~ holds(beCook0(Cook),Time) ->         terminates_at(order(Agent,Cook,Food),beCook0(Cook),Time)
%~ cpc :- holds(beCook0(Cook),Time)
%~ ooo :- [   cl([holds(beCook0(Cook),Time)],[])]
%~ cpc :- if(    terminates(order(Agent,Cook,Food),at(beCook0(Cook),Time)),       cl([holds(beCook0(Cook),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(order(Agent,Cook,Food),at(beCook0(Cook),Time)),       cl([holds(beCook0(Cook),Time)],[]))],       [])]
cl(    (     order(Agent,Cook,Food)terminates beCook0(Cook)at Time if     cl(holds(beCook0(Cook),Time),[])),       []).
 %  cl(    if(    terminates(order(Agent,Cook,Food),at(beCook0(Cook),Time)),       cl(holds(beCook0(Cook),Time),[])),       []).
 %  % =================================.


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4413).
%~ From E:
%~ 
%~ holds(beCook0(Cook),Time) ->         initiates_at(order(Agent,Cook,Food),beCook1(Cook),Time)
%~ cpc :- holds(beCook0(Cook),Time)
%~ ooo :- [   cl([holds(beCook0(Cook),Time)],[])]
%~ cpc :- if(    initiates(order(Agent,Cook,Food),at(beCook1(Cook),Time)),       cl([holds(beCook0(Cook),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(order(Agent,Cook,Food),at(beCook1(Cook),Time)),       cl([holds(beCook0(Cook),Time)],[]))],       [])]
cl(    (     order(Agent,Cook,Food)initiates beCook1(Cook)at Time if     cl(holds(beCook0(Cook),Time),[])),       []).
 %  cl(    if(    initiates(order(Agent,Cook,Food),at(beCook1(Cook),Time)),       cl(holds(beCook0(Cook),Time),[])),       []).
 %  % =================================.

% event FoodPrepare(agent,food)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4417).
%~ From E:
%~ 
%~ event( foodPrepare(agent,food))
%~ cpc :- events([foodPrepare/2])
%~ ooo :- [   cl([events([foodPrepare/2])],[])]
%~ cpc :- actions([foodPrepare/2])
%~ ooo :- [   cl([actions([foodPrepare/2])],[])]
%~ cpc :- mpred_prop(foodPrepare(agent,food),action)
%~ ooo :- [   cl([mpred_prop(foodPrepare(agent,food),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4417).
( cl(events(foodPrepare/2),[])  ,    cl(mpred_prop(foodPrepare(agent,food),action),[]) ,     cl(actions(foodPrepare/2),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4420).
% fluent FoodPrepared(food)
%~ From E:
%~ 
%~ fluent( foodPrepared(food))
%~ cpc :- fluents([foodPrepared/1])
%~ ooo :- [   cl([fluents([foodPrepared/1])],[])]
%~ cpc :- mpred_prop(foodPrepared(food),fluent)
%~ ooo :- [   cl([mpred_prop(foodPrepared(food),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4420).
cl(mpred_prop(foodPrepared(food),fluent),[]),cl(fluents(foodPrepared/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4422).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).
%~ From E:
%~ 
%~ initiates_at(foodPrepare(Agent,Food),foodPrepared(Food),Time)
%~ cpc :- initiates(foodPrepare(Agent,Food),foodPrepared(Food),Time)
%~ ooo :- [   cl([initiates(foodPrepare(Agent,Food),foodPrepared(Food),Time)],[])]
cl(initiates(foodPrepare(Agent,Food),foodPrepared(Food),Time),[]).
 %  cl(initiates(foodPrepare(Agent,Food),foodPrepared(Food),Time),[]).
 %  % =================================.


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4428).
%~ From E:
%~ 
%~ exists( Location,   happens(foodPrepare(Agent,Food),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Food,Location),Time)))
%~ cpc :- exists( Location,   happens(foodPrepare(Agent,Food),Time) ->         (     holds(at_loc(Agent,Location),Time) ,     holds(at_loc(Food,Location),Time)))
%~ ooo :- [   cl(    [   exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(foodPrepare(Agent,Food),Time))))],       [])]
cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(foodPrepare(Agent,Food),Time)))),       []).
 %  cl(    exists( Location,   (     (         holds(at_loc(Agent,Location),Time) ,         holds(at_loc(Food,Location),Time)) ;     not( happens(foodPrepare(Agent,Food),Time)))),       []).
 %  % =================================.


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4434).
%~ From E:
%~ 
%~ (     holds(beCook1(Cook),Time) ,     holds(knowOrder(Cook,Agent,Food),Time)) ->         happens(foodPrepare(Cook,Food),Time)
%~ cpc :- (     holds(beCook1(Cook),Time) ,     holds(knowOrder(Cook,Agent,Food),Time)) ->         happens(foodPrepare(Cook,Food),Time)
%~ ooo :- [   cl(    [   happens(foodPrepare(Cook,Food),Time)],       [      holds(beCook1(Cook),Time),           holds(knowOrder(Cook,Agent,Food),Time)])]
cl(    happens(foodPrepare(Cook,Food),Time),       (           holds(beCook1(Cook),Time) ,           holds(knowOrder(Cook,Agent,Food),Time))).
 %  cl(    happens(foodPrepare(Cook,Food),Time),       (           holds(beCook1(Cook),Time) ,           holds(knowOrder(Cook,Agent,Food),Time))).
 %  % =================================.


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4439).
%~ From E:
%~ 
%~ holds(beCook1(Cook),Time) ->         terminates_at(foodPrepare(Cook,Food),beCook1(Cook),Time)
%~ cpc :- holds(beCook1(Cook),Time)
%~ ooo :- [   cl([holds(beCook1(Cook),Time)],[])]
%~ cpc :- if(    terminates(foodPrepare(Cook,Food),at(beCook1(Cook),Time)),       cl([holds(beCook1(Cook),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates(foodPrepare(Cook,Food),at(beCook1(Cook),Time)),       cl([holds(beCook1(Cook),Time)],[]))],       [])]
cl(    (     foodPrepare(Cook,Food)terminates beCook1(Cook)at Time if     cl(holds(beCook1(Cook),Time),[])),       []).
 %  cl(    if(    terminates(foodPrepare(Cook,Food),at(beCook1(Cook),Time)),       cl(holds(beCook1(Cook),Time),[])),       []).
 %  % =================================.


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4445).
%~ From E:
%~ 
%~ holds(beCook1(Cook),Time) ->         initiates_at(foodPrepare(Cook,Food),beCook0(Cook),Time)
%~ cpc :- holds(beCook1(Cook),Time)
%~ ooo :- [   cl([holds(beCook1(Cook),Time)],[])]
%~ cpc :- if(    initiates(foodPrepare(Cook,Food),at(beCook0(Cook),Time)),       cl([holds(beCook1(Cook),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(foodPrepare(Cook,Food),at(beCook0(Cook),Time)),       cl([holds(beCook1(Cook),Time)],[]))],       [])]
cl(    (     foodPrepare(Cook,Food)initiates beCook0(Cook)at Time if     cl(holds(beCook1(Cook),Time),[])),       []).
 %  cl(    if(    initiates(foodPrepare(Cook,Food),at(beCook0(Cook),Time)),       cl(holds(beCook1(Cook),Time),[])),       []).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/EatingInAHouse.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4479).
% option modeldiff on
%~ From E:
%~ 
%~ :-( call_pel_directive( option(modeldiff,on)))
:-( call_pel_directive( option(modeldiff,on))).

% option encoding 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4479).
%~ From E:
%~ 
%~ :-( call_pel_directive( option(encoding,3)))
:-( call_pel_directive( option(encoding,3))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4481).
% option renaming off
%~ From E:
%~ 
%~ :-( call_pel_directive( option(renaming,off)))
:-( call_pel_directive( option(renaming,off))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4483).
% ignore Love, ThreatenedBy
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(love)))
:-( call_pel_directive( ignore(love))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4483).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(threatenedBy)))
:-( call_pel_directive( ignore(threatenedBy))).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4483).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(lookOutOnto)))
:-( call_pel_directive( ignore(lookOutOnto))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(floor)))
:-( call_pel_directive( ignore(floor))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4483).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(buildingOf)))
:-( call_pel_directive( ignore(buildingOf))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(skyOf)))
:-( call_pel_directive( ignore(skyOf))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4483).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(groundOf)))
:-( call_pel_directive( ignore(groundOf))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4485).
% ignore Inside
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(inside)))
:-( call_pel_directive( ignore(inside))).

% ignore Near, WalkFrom, WalkFromTo, RunFromTo
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4485).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(near)))
:-( call_pel_directive( ignore(near))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(walkFrom)))
:-( call_pel_directive( ignore(walkFrom))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4485).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(walkFromTo)))
:-( call_pel_directive( ignore(walkFromTo))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(runFromTo)))
:-( call_pel_directive( ignore(runFromTo))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
% ignore BillOf, CookOf, TableOf, WaiterOf, KitchenDoorOf
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(billOf)))
:-( call_pel_directive( ignore(billOf))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(cookOf)))
:-( call_pel_directive( ignore(cookOf))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(tableOf)))
:-( call_pel_directive( ignore(tableOf))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(waiterOf)))
:-( call_pel_directive( ignore(waiterOf))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(kitchenDoorOf)))
:-( call_pel_directive( ignore(kitchenDoorOf))).

% ignore BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter0)))
:-( call_pel_directive( ignore(beWaiter0))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter1)))
:-( call_pel_directive( ignore(beWaiter1))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter2)))
:-( call_pel_directive( ignore(beWaiter2))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter3)))
:-( call_pel_directive( ignore(beWaiter3))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter4)))
:-( call_pel_directive( ignore(beWaiter4))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
% ignore BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter5)))
:-( call_pel_directive( ignore(beWaiter5))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter6)))
:-( call_pel_directive( ignore(beWaiter6))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter7)))
:-( call_pel_directive( ignore(beWaiter7))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter8)))
:-( call_pel_directive( ignore(beWaiter8))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beWaiter9)))
:-( call_pel_directive( ignore(beWaiter9))).

% ignore BeCook0, BeCook1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beCook0)))
:-( call_pel_directive( ignore(beCook0))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(beCook1)))
:-( call_pel_directive( ignore(beCook1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
% ignore InviteIn, InvitedIn, IntendToWalkIn, IntentionToWalkIn
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(inviteIn)))
:-( call_pel_directive( ignore(inviteIn))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(invitedIn)))
:-( call_pel_directive( ignore(invitedIn))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(intendToWalkIn)))
:-( call_pel_directive( ignore(intendToWalkIn))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(intentionToWalkIn)))
:-( call_pel_directive( ignore(intentionToWalkIn))).

% ignore ActOnIntentionToWalkIn, Greet, SayGoodbye, CryForJoy
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(actOnIntentionToWalkIn)))
:-( call_pel_directive( ignore(actOnIntentionToWalkIn))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(greet)))
:-( call_pel_directive( ignore(greet))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(sayGoodbye)))
:-( call_pel_directive( ignore(sayGoodbye))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(cryForJoy)))
:-( call_pel_directive( ignore(cryForJoy))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4493).
% ignore Threaten, ReleaseFromThreat, ThreatenedBy
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(threaten)))
:-( call_pel_directive( ignore(threaten))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4493).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(releaseFromThreat)))
:-( call_pel_directive( ignore(releaseFromThreat))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(threatenedBy)))
:-( call_pel_directive( ignore(threatenedBy))).

% ignore Order, KnowOrder, Request, KnowRequest
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4493).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(order)))
:-( call_pel_directive( ignore(order))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(knowOrder)))
:-( call_pel_directive( ignore(knowOrder))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4493).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(request)))
:-( call_pel_directive( ignore(request))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(knowRequest)))
:-( call_pel_directive( ignore(knowRequest))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4495).
% ignore PutInside, TakeOutOf
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(putInside)))
:-( call_pel_directive( ignore(putInside))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4495).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(takeOutOf)))
:-( call_pel_directive( ignore(takeOutOf))).

% ignore SayPleaseToMeet, Move
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4495).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(sayPleaseToMeet)))
:-( call_pel_directive( ignore(sayPleaseToMeet))).
%~ From E:
%~ 
%~ :-( call_pel_directive( ignore(move)))
:-( call_pel_directive( ignore(move))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4498).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4498).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4500).
% load answers/Mueller2003/Ontology.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2003/Ontology.e')))
:-( call_pel_directive( load('answers/Mueller2003/Ontology.e'))).

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4500).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2004c/RTSpaceM.e')))
:-( call_pel_directive( load('answers/Mueller2004c/RTSpaceM.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4502).
% load answers/Mueller2004c/OTSpaceM.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2004c/OTSpaceM.e')))
:-( call_pel_directive( load('answers/Mueller2004c/OTSpaceM.e'))).

% load answers/Mueller2004c/HungerNeed.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4502).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2004c/HungerNeed.e')))
:-( call_pel_directive( load('answers/Mueller2004c/HungerNeed.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4504).
% load answers/Mueller2004c/Restaurant.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2004c/Restaurant.e')))
:-( call_pel_directive( load('answers/Mueller2004c/Restaurant.e'))).

% load answers/Mueller2003/Sleep.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4504).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2003/Sleep.e')))
:-( call_pel_directive( load('answers/Mueller2003/Sleep.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4506).
% load answers/Mueller2003/SpeechAct.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2003/SpeechAct.e')))
:-( call_pel_directive( load('answers/Mueller2003/SpeechAct.e'))).

% load answers/Mueller2004c/Dress.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4506).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('answers/Mueller2004c/Dress.e')))
:-( call_pel_directive( load('answers/Mueller2004c/Dress.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4509).
% room Upstairs1
%~ From E:
%~ 
%~ t(room,upstairs1)
isa(upstairs1,room).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4511).
% staircase Staircase1
%~ From E:
%~ 
%~ t(staircase,staircase1)
isa(staircase1,staircase).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4513).
% room Hallway1
%~ From E:
%~ 
%~ t(room,hallway1)
isa(hallway1,room).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4515).
% Side1(Staircase1)=Hallway1.
%~ From E:
%~ 
%~ side1(staircase1) =         hallway1
side1(staircase1,hallway1).


% Side2(Staircase1)=Upstairs1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4515).
%~ From E:
%~ 
%~ side2(staircase1) =         upstairs1
side2(staircase1,upstairs1).

% door DiningRoomDoor1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4517).
%~ From E:
%~ 
%~ t(door,diningRoomDoor1)
isa(diningRoomDoor1,door).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4520).
% room DiningRoom1
%~ From E:
%~ 
%~ t(room,diningRoom1)
isa(diningRoom1,room).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4522).
% Side1(DiningRoomDoor1)=Hallway1.
%~ From E:
%~ 
%~ side1(diningRoomDoor1) =         hallway1
side1(diningRoomDoor1,hallway1).


% Side2(DiningRoomDoor1)=DiningRoom1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4522).
%~ From E:
%~ 
%~ side2(diningRoomDoor1) =         diningRoom1
side2(diningRoomDoor1,diningRoom1).

% door KitchenDoor1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4524).
%~ From E:
%~ 
%~ t(door,kitchenDoor1)
isa(kitchenDoor1,door).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4527).
% room Kitchen1
%~ From E:
%~ 
%~ t(room,kitchen1)
isa(kitchen1,room).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4529).
% Side1(KitchenDoor1)=DiningRoom1.
%~ From E:
%~ 
%~ side1(kitchenDoor1) =         diningRoom1
side1(kitchenDoor1,diningRoom1).


% Side2(KitchenDoor1)=Kitchen1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4529).
%~ From E:
%~ 
%~ side2(kitchenDoor1) =         kitchen1
side2(kitchenDoor1,kitchen1).

% agent Eater1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4531).
%~ From E:
%~ 
%~ t(agent,eater1)
isa(eater1,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4534).
% agent Eater2
%~ From E:
%~ 
%~ t(agent,eater2)
isa(eater2,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4536).
% clothing Clothing1
%~ From E:
%~ 
%~ t(clothing,clothing1)
isa(clothing1,clothing).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4538).
% clothing Clothing2
%~ From E:
%~ 
%~ t(clothing,clothing2)
isa(clothing2,clothing).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4540).
% chair Chair1
%~ From E:
%~ 
%~ t(chair,chair1)
isa(chair1,chair).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4542).
% chair Chair2
%~ From E:
%~ 
%~ t(chair,chair2)
isa(chair2,chair).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4544).
% food Food1
%~ From E:
%~ 
%~ t(food,food1)
isa(food1,food).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4546).
% agent Cook1
%~ From E:
%~ 
%~ t(agent,cook1)
isa(cook1,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4548).
% table Table1
%~ From E:
%~ 
%~ t(table,table1)
isa(table1,table).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4550).
% content Content1
%~ From E:
%~ 
%~ t(content,content1)
isa(content1,content).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4552).
% content Content2
%~ From E:
%~ 
%~ t(content,content2)
isa(content2,content).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4554).
% outside DummyOutside1
%~ From E:
%~ 
%~ t(outside,dummyOutside1)
isa(dummyOutside1,outside).
%; prune

% sort ona, onb
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4556).
%~ From E:
%~ 
%~ sort(ona)
sort(ona).
%~ From E:
%~ 
%~ sort(onb)
sort(onb).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4558).
% fluent! On(ona,onb)
%~ From E:
%~ 
%~ fluent( on(ona,onb))
%~ cpc :- fluents([on/2])
%~ ooo :- [   cl([fluents([on/2])],[])]
%~ cpc :- mpred_prop(on(ona,onb),fluent)
%~ ooo :- [   cl([mpred_prop(on(ona,onb),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4558).
cl(mpred_prop(on(ona,onb),fluent),[]),cl(fluents(on/2),[]).

% event! PlaceOn(agent,ona,onb)
%~ From E:
%~ 
%~ event( placeOn(agent,ona,onb))
%~ cpc :- events([placeOn/3])
%~ ooo :- [   cl([events([placeOn/3])],[])]
%~ cpc :- actions([placeOn/3])
%~ ooo :- [   cl([actions([placeOn/3])],[])]
%~ cpc :- mpred_prop(placeOn(agent,ona,onb),action)
%~ ooo :- [   cl([mpred_prop(placeOn(agent,ona,onb),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4558).
( cl(events(placeOn/3),[])  ,    cl(mpred_prop(placeOn(agent,ona,onb),action),[]) ,     cl(actions(placeOn/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4560).
% event! TakeOffOf(agent,ona,onb)
%~ From E:
%~ 
%~ event( takeOffOf(agent,ona,onb))
%~ cpc :- events([takeOffOf/3])
%~ ooo :- [   cl([events([takeOffOf/3])],[])]
%~ cpc :- actions([takeOffOf/3])
%~ ooo :- [   cl([actions([takeOffOf/3])],[])]
%~ cpc :- mpred_prop(takeOffOf(agent,ona,onb),action)
%~ ooo :- [   cl([mpred_prop(takeOffOf(agent,ona,onb),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4560).
( cl(events(takeOffOf/3),[])  ,    cl(mpred_prop(takeOffOf(agent,ona,onb),action),[]) ,     cl(actions(takeOffOf/3),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4562).
% sort ordera, orderb, orderc
%~ From E:
%~ 
%~ sort(ordera)
sort(ordera).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4562).
%~ From E:
%~ 
%~ sort(orderb)
sort(orderb).
%~ From E:
%~ 
%~ sort(orderc)
sort(orderc).

% event! Order(ordera,orderb,orderc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4562).
%~ From E:
%~ 
%~ event( order(ordera,orderb,orderc))
%~ cpc :- events([order/3])
%~ ooo :- [   cl([events([order/3])],[])]
%~ cpc :- mpred_prop(order(ordera,orderb,orderc),event)
%~ ooo :- [   cl([mpred_prop(order(ordera,orderb,orderc),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4562).
cl(mpred_prop(order(ordera,orderb,orderc),event),[]),cl(events(order/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4564).
% fluent! KnowOrder(orderb,ordera,orderc)
%~ From E:
%~ 
%~ fluent( knowOrder(orderb,ordera,orderc))
%~ cpc :- fluents([knowOrder/3])
%~ ooo :- [   cl([fluents([knowOrder/3])],[])]
%~ cpc :- mpred_prop(knowOrder(orderb,ordera,orderc),fluent)
%~ ooo :- [   cl([mpred_prop(knowOrder(orderb,ordera,orderc),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4564).
cl(mpred_prop(knowOrder(orderb,ordera,orderc),fluent),[]),cl(fluents(knowOrder/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4566).
% sort requesta, requestb, requestc
%~ From E:
%~ 
%~ sort(requesta)
sort(requesta).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4566).
%~ From E:
%~ 
%~ sort(requestb)
sort(requestb).
%~ From E:
%~ 
%~ sort(requestc)
sort(requestc).

% event! Request(requesta,requestb,requestc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4566).
%~ From E:
%~ 
%~ event( request(requesta,requestb,requestc))
%~ cpc :- events([request/3])
%~ ooo :- [   cl([events([request/3])],[])]
%~ cpc :- mpred_prop(request(requesta,requestb,requestc),event)
%~ ooo :- [   cl([mpred_prop(request(requesta,requestb,requestc),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4566).
cl(mpred_prop(request(requesta,requestb,requestc),event),[]),cl(events(request/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4568).
% fluent! KnowRequest(requestb,requesta,requestc)
%~ From E:
%~ 
%~ fluent( knowRequest(requestb,requesta,requestc))
%~ cpc :- fluents([knowRequest/3])
%~ ooo :- [   cl([fluents([knowRequest/3])],[])]
%~ cpc :- mpred_prop(knowRequest(requestb,requesta,requestc),fluent)
%~ ooo :- [   cl([mpred_prop(knowRequest(requestb,requesta,requestc),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4568).
cl(mpred_prop(knowRequest(requestb,requesta,requestc),fluent),[]),cl(fluents(knowRequest/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4570).
% sort holda, holdb, holdc
%~ From E:
%~ 
%~ sort(holda)
sort(holda).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4570).
%~ From E:
%~ 
%~ sort(holdb)
sort(holdb).
%~ From E:
%~ 
%~ sort(holdc)
sort(holdc).

% event! TakeOffOf(holda,holdb,holdc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4570).
%~ From E:
%~ 
%~ event( takeOffOf(holda,holdb,holdc))
%~ cpc :- events([takeOffOf/3])
%~ ooo :- [   cl([events([takeOffOf/3])],[])]
%~ cpc :- mpred_prop(takeOffOf(holda,holdb,holdc),event)
%~ ooo :- [   cl([mpred_prop(takeOffOf(holda,holdb,holdc),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4570).
cl(mpred_prop(takeOffOf(holda,holdb,holdc),event),[]),cl(events(takeOffOf/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4572).
% event! PickUp(holda,holdb)
%~ From E:
%~ 
%~ event( pickUp(holda,holdb))
%~ cpc :- events([pickUp/2])
%~ ooo :- [   cl([events([pickUp/2])],[])]
%~ cpc :- mpred_prop(pickUp(holda,holdb),event)
%~ ooo :- [   cl([mpred_prop(pickUp(holda,holdb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4572).
cl(mpred_prop(pickUp(holda,holdb),event),[]),cl(events(pickUp/2),[]).

% event! LetGoOf(holda,holdb)
%~ From E:
%~ 
%~ event( letGoOf(holda,holdb))
%~ cpc :- events([letGoOf/2])
%~ ooo :- [   cl([events([letGoOf/2])],[])]
%~ cpc :- mpred_prop(letGoOf(holda,holdb),event)
%~ ooo :- [   cl([mpred_prop(letGoOf(holda,holdb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4572).
cl(mpred_prop(letGoOf(holda,holdb),event),[]),cl(events(letGoOf/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4574).
% event! Hold(holda,holdb)
%~ From E:
%~ 
%~ event( hold(holda,holdb))
%~ cpc :- events([hold/2])
%~ ooo :- [   cl([events([hold/2])],[])]
%~ cpc :- mpred_prop(hold(holda,holdb),event)
%~ ooo :- [   cl([mpred_prop(hold(holda,holdb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4574).
cl(mpred_prop(hold(holda,holdb),event),[]),cl(events(hold/2),[]).

% fluent! Holding(holda,holdb)
%~ From E:
%~ 
%~ fluent( holding(holda,holdb))
%~ cpc :- fluents([holding/2])
%~ ooo :- [   cl([fluents([holding/2])],[])]
%~ cpc :- mpred_prop(holding(holda,holdb),fluent)
%~ ooo :- [   cl([mpred_prop(holding(holda,holdb),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4574).
cl(mpred_prop(holding(holda,holdb),fluent),[]),cl(fluents(holding/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4577).
% sort sita, sitb
%~ From E:
%~ 
%~ sort(sita)
sort(sita).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4577).
%~ From E:
%~ 
%~ sort(sitb)
sort(sitb).

% event! LieOn(sita,sitb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4577).
%~ From E:
%~ 
%~ event( lieOn(sita,sitb))
%~ cpc :- events([lieOn/2])
%~ ooo :- [   cl([events([lieOn/2])],[])]
%~ cpc :- mpred_prop(lieOn(sita,sitb),event)
%~ ooo :- [   cl([mpred_prop(lieOn(sita,sitb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4577).
cl(mpred_prop(lieOn(sita,sitb),event),[]),cl(events(lieOn/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4579).
% event! SitOn(sita,sitb)
%~ From E:
%~ 
%~ event( sitOn(sita,sitb))
%~ cpc :- events([sitOn/2])
%~ ooo :- [   cl([events([sitOn/2])],[])]
%~ cpc :- mpred_prop(sitOn(sita,sitb),event)
%~ ooo :- [   cl([mpred_prop(sitOn(sita,sitb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4579).
cl(mpred_prop(sitOn(sita,sitb),event),[]),cl(events(sitOn/2),[]).

% event! RiseFrom(sita,sitb)
%~ From E:
%~ 
%~ event( riseFrom(sita,sitb))
%~ cpc :- events([riseFrom/2])
%~ ooo :- [   cl([events([riseFrom/2])],[])]
%~ cpc :- mpred_prop(riseFrom(sita,sitb),event)
%~ ooo :- [   cl([mpred_prop(riseFrom(sita,sitb),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4579).
cl(mpred_prop(riseFrom(sita,sitb),event),[]),cl(events(riseFrom/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4581).
% fluent! LyingOn(sita,sitb)
%~ From E:
%~ 
%~ fluent( lyingOn(sita,sitb))
%~ cpc :- fluents([lyingOn/2])
%~ ooo :- [   cl([fluents([lyingOn/2])],[])]
%~ cpc :- mpred_prop(lyingOn(sita,sitb),fluent)
%~ ooo :- [   cl([mpred_prop(lyingOn(sita,sitb),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4581).
cl(mpred_prop(lyingOn(sita,sitb),fluent),[]),cl(fluents(lyingOn/2),[]).

% fluent! SittingOn(sita,sitb)
%~ From E:
%~ 
%~ fluent( sittingOn(sita,sitb))
%~ cpc :- fluents([sittingOn/2])
%~ ooo :- [   cl([fluents([sittingOn/2])],[])]
%~ cpc :- mpred_prop(sittingOn(sita,sitb),fluent)
%~ ooo :- [   cl([mpred_prop(sittingOn(sita,sitb),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4581).
cl(mpred_prop(sittingOn(sita,sitb),fluent),[]),cl(fluents(sittingOn/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4584).
% ona! Food1
%~ From E:
%~ 
%~ t(ona,food1)
isa(food1,ona).

% onb! Table1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4584).
%~ From E:
%~ 
%~ t(onb,table1)
isa(table1,onb).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4586).
% holda! Cook1
%~ From E:
%~ 
%~ t(holda,cook1)
isa(cook1,holda).

% holdb! Food1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4586).
%~ From E:
%~ 
%~ t(holdb,food1)
isa(food1,holdb).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4588).
% holdc! Table1
%~ From E:
%~ 
%~ t(holdc,table1)
isa(table1,holdc).

% sita! Eater1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4588).
%~ From E:
%~ 
%~ t(sita,eater1)
isa(eater1,sita).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4590).
% sitb! Chair1
%~ From E:
%~ 
%~ t(sitb,chair1)
isa(chair1,sitb).
%; initial situation
% [agent]
 % HoldsAt(Dressed(agent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4592).
%~ From E:
%~ 
%~ holds(dressed(Agent),0)
%~ cpc :- holds(dressed(Agent),0)
%~ ooo :- [   cl([holds(dressed(Agent),0)],[])]
cl(holds(dressed(Agent),0),[]).
 %  cl(holds(dressed(Agent),0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4594).
% [agent]
 % HoldsAt(Awake(agent),0).
%~ From E:
%~ 
%~ holds(awake(Agent),0)
%~ cpc :- holds(awake(Agent),0)
%~ ooo :- [   cl([holds(awake(Agent),0)],[])]
cl(holds(awake(Agent),0),[]).
 %  cl(holds(awake(Agent),0),[]).
 %  % =================================.


% [agent]
 % HoldsAt(Sleep3(agent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4594).
%~ From E:
%~ 
%~ holds(sleep3(Agent),0)
%~ cpc :- holds(sleep3(Agent),0)
%~ ooo :- [   cl([holds(sleep3(Agent),0)],[])]
cl(holds(sleep3(Agent),0),[]).
 %  cl(holds(sleep3(Agent),0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4596).
% [agent]
 % HoldsAt(Standing(agent),0).
%~ From E:
%~ 
%~ holds(standing(Agent),0)
%~ cpc :- holds(standing(Agent),0)
%~ ooo :- [   cl([holds(standing(Agent),0)],[])]
cl(holds(standing(Agent),0),[]).
 %  cl(holds(standing(Agent),0),[]).
 %  % =================================.


% [agent]
 % HoldsAt(Standing(agent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4596).
%~ From E:
%~ 
%~ holds(standing(Agent),0)
%~ cpc :- holds(standing(Agent),0)
%~ ooo :- [   cl([holds(standing(Agent),0)],[])]
cl(holds(standing(Agent),0),[]).
 %  cl(holds(standing(Agent),0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4598).
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
%~ From E:
%~ 
%~ holds(not(holding(Agent,Object)),0)
%~ cpc :- holds(not(holding(Agent,Object)),0)
%~ ooo :- [   cl([],[holds(holding(Agent,Object),0)])]
cl([],holds(holding(Agent,Object),0)).
 %  cl([],holds(holding(Agent,Object),0)).
 %  % =================================.


% [food]
 % HoldsAt(At(food,Kitchen1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4598).
%~ From E:
%~ 
%~ holds(at_loc(Food,kitchen1),0)
%~ cpc :- holds(at_loc(Food,kitchen1),0)
%~ ooo :- [   cl([holds(at_loc(Food,kitchen1),0)],[])]
cl(holds(at_loc(Food,kitchen1),0),[]).
 %  cl(holds(at_loc(Food,kitchen1),0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4600).
% [food]
 % !HoldsAt(FoodPrepared(food),0).
%~ From E:
%~ 
%~ holds(not(foodPrepared(Food)),0)
%~ cpc :- holds(not(foodPrepared(Food)),0)
%~ ooo :- [   cl([],[holds(foodPrepared(Food),0)])]
cl([],holds(foodPrepared(Food),0)).
 %  cl([],holds(foodPrepared(Food),0)).
 %  % =================================.


% [agent]
 % HoldsAt(Hungry(agent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4600).
%~ From E:
%~ 
%~ holds(hungry(Agent),0)
%~ cpc :- holds(hungry(Agent),0)
%~ ooo :- [   cl([holds(hungry(Agent),0)],[])]
cl(holds(hungry(Agent),0),[]).
 %  cl(holds(hungry(Agent),0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4602).
% [door]
 % HoldsAt(DoorIsOpen(door),0).
%~ From E:
%~ 
%~ holds(doorIsOpen(Door),0)
%~ cpc :- holds(doorIsOpen(Door),0)
%~ ooo :- [   cl([holds(doorIsOpen(Door),0)],[])]
cl(holds(doorIsOpen(Door),0),[]).
 %  cl(holds(doorIsOpen(Door),0),[]).
 %  % =================================.


% [clothing]
 % HoldsAt(At(clothing,Upstairs1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4602).
%~ From E:
%~ 
%~ holds(at_loc(Clothing,upstairs1),0)
%~ cpc :- holds(at_loc(Clothing,upstairs1),0)
%~ ooo :- [   cl([holds(at_loc(Clothing,upstairs1),0)],[])]
cl(holds(at_loc(Clothing,upstairs1),0),[]).
 %  cl(holds(at_loc(Clothing,upstairs1),0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4604).
% [chair]
 % HoldsAt(At(chair,DiningRoom1),0).
%~ From E:
%~ 
%~ holds(at_loc(Chair,diningRoom1),0)
%~ cpc :- holds(at_loc(Chair,diningRoom1),0)
%~ ooo :- [   cl([holds(at_loc(Chair,diningRoom1),0)],[])]
cl(holds(at_loc(Chair,diningRoom1),0),[]).
 %  cl(holds(at_loc(Chair,diningRoom1),0),[]).
 %  % =================================.


% HoldsAt(At(Cook1,Kitchen1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4604).
%~ From E:
%~ 
%~ holds(at_loc(cook1,kitchen1),0)
initially( at_loc(cook1,kitchen1)).
 %  initial_state([at_loc(cook1,kitchen1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4606).
% HoldsAt(At(Table1,DiningRoom1),0).
%~ From E:
%~ 
%~ holds(at_loc(table1,diningRoom1),0)
initially( at_loc(table1,diningRoom1)).
 %  initial_state([at_loc(table1,diningRoom1)]).
 %  % =================================.


% [agent,clothing]
 % !HoldsAt(Wearing(agent,clothing),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4606).
%~ From E:
%~ 
%~ holds(not(wearing(Agent,Clothing)),0)
%~ cpc :- holds(not(wearing(Agent,Clothing)),0)
%~ ooo :- [   cl([],[holds(wearing(Agent,Clothing),0)])]
cl([],holds(wearing(Agent,Clothing),0)).
 %  cl([],holds(wearing(Agent,Clothing),0)).
 %  % =================================.


%; narrative


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4610).
% HoldsAt(At(Cook1,Kitchen1),0).
%~ From E:
%~ 
%~ holds(at_loc(cook1,kitchen1),0)
initially( at_loc(cook1,kitchen1)).
 %  initial_state([at_loc(cook1,kitchen1)]).
 %  % =================================.


% HoldsAt(At(Eater1,Upstairs1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4610).
%~ From E:
%~ 
%~ holds(at_loc(eater1,upstairs1),0)
initially( at_loc(eater1,upstairs1)).
 %  initial_state([at_loc(eater1,upstairs1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4612).
% HoldsAt(At(Eater2,Upstairs1),0).
%~ From E:
%~ 
%~ holds(at_loc(eater2,upstairs1),0)
initially( at_loc(eater2,upstairs1)).
 %  initial_state([at_loc(eater2,upstairs1)]).
 %  % =================================.


% Happens(FoodPrepare(Cook1,Food1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4612).
%~ From E:
%~ 
%~ happens(foodPrepare(cook1,food1),0)
observe( foodPrepare(cook1,food1)at 0).
 %  observe([foodPrepare(cook1,food1)],0).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4614).
% Happens(PutOn(Eater1,Clothing1),1).
%~ From E:
%~ 
%~ happens(putOn(eater1,clothing1),1)
observe( putOn(eater1,clothing1)at 1).
 %  observe([putOn(eater1,clothing1)],1).
 %  % =================================.


% Happens(PutOn(Eater2,Clothing2),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4614).
%~ From E:
%~ 
%~ happens(putOn(eater2,clothing2),2)
observe( putOn(eater2,clothing2)at 2).
 %  observe([putOn(eater2,clothing2)],2).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4616).
% Happens(WalkDownStaircase(Eater1,Staircase1),3).
%~ From E:
%~ 
%~ happens(walkDownStaircase(eater1,staircase1),3)
observe( walkDownStaircase(eater1,staircase1)at 3).
 %  observe([walkDownStaircase(eater1,staircase1)],3).
 %  % =================================.


% Happens(WalkDownStaircase(Eater2,Staircase1),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4616).
%~ From E:
%~ 
%~ happens(walkDownStaircase(eater2,staircase1),4)
observe( walkDownStaircase(eater2,staircase1)at 4).
 %  observe([walkDownStaircase(eater2,staircase1)],4).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4618).
% Happens(WalkThroughDoor12(Eater1,DiningRoomDoor1),5).
%~ From E:
%~ 
%~ happens(walkThroughDoor12(eater1,diningRoomDoor1),5)
observe( walkThroughDoor12(eater1,diningRoomDoor1)at 5).
 %  observe([walkThroughDoor12(eater1,diningRoomDoor1)],5).
 %  % =================================.


% Happens(WalkThroughDoor12(Eater2,DiningRoomDoor1),6).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4618).
%~ From E:
%~ 
%~ happens(walkThroughDoor12(eater2,diningRoomDoor1),6)
observe( walkThroughDoor12(eater2,diningRoomDoor1)at 6).
 %  observe([walkThroughDoor12(eater2,diningRoomDoor1)],6).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4620).
% Happens(SitOn(Eater1,Chair1),7).
%~ From E:
%~ 
%~ happens(sitOn(eater1,chair1),7)
observe( sitOn(eater1,chair1)at 7).
 %  observe([sitOn(eater1,chair1)],7).
 %  % =================================.


% Happens(SitOn(Eater2,Chair2),8).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4620).
%~ From E:
%~ 
%~ happens(sitOn(eater2,chair2),8)
observe( sitOn(eater2,chair2)at 8).
 %  observe([sitOn(eater2,chair2)],8).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4622).
% Happens(PickUp(Cook1, Food1),9).
%~ From E:
%~ 
%~ happens(pickUp(cook1,food1),9)
observe( pickUp(cook1,food1)at 9).
 %  observe([pickUp(cook1,food1)],9).
 %  % =================================.


% Happens(WalkThroughDoor21(Cook1, KitchenDoor1),10).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4622).
%~ From E:
%~ 
%~ happens(walkThroughDoor21(cook1,kitchenDoor1),10)
observe( walkThroughDoor21(cook1,kitchenDoor1)at 10).
 %  observe([walkThroughDoor21(cook1,kitchenDoor1)],10).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4624).
% Happens(PlaceOn(Cook1, Food1, Table1),11).
%~ From E:
%~ 
%~ happens(placeOn(cook1,food1,table1),11)
observe( placeOn(cook1,food1,table1)at 11).
 %  observe([placeOn(cook1,food1,table1)],11).
 %  % =================================.


% Happens(WalkThroughDoor12(Cook1, KitchenDoor1),12).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4624).
%~ From E:
%~ 
%~ happens(walkThroughDoor12(cook1,kitchenDoor1),12)
observe( walkThroughDoor12(cook1,kitchenDoor1)at 12).
 %  observe([walkThroughDoor12(cook1,kitchenDoor1)],12).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4626).
% Happens(Eat(Eater1,Food1),13).
%~ From E:
%~ 
%~ happens(eat(eater1,food1),13)
observe( eat(eater1,food1)at 13).
 %  observe([eat(eater1,food1)],13).
 %  % =================================.


% Happens(Eat(Eater2,Food1),14).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4626).
%~ From E:
%~ 
%~ happens(eat(eater2,food1),14)
observe( eat(eater2,food1)at 14).
 %  observe([eat(eater2,food1)],14).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4628).
% Happens(Converse(Eater1,Eater2),15).
%~ From E:
%~ 
%~ happens(converse(eater1,eater2),15)
observe( converse(eater1,eater2)at 15).
 %  observe([converse(eater1,eater2)],15).
 %  % =================================.


% Happens(TalkAbout(Eater1,Content1),16).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4628).
%~ From E:
%~ 
%~ happens(talkAbout(eater1,content1),16)
observe( talkAbout(eater1,content1)at 16).
 %  observe([talkAbout(eater1,content1)],16).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4630).
% Happens(TalkAbout(Eater2,Content2),17).
%~ From E:
%~ 
%~ happens(talkAbout(eater2,content2),17)
observe( talkAbout(eater2,content2)at 17).
 %  observe([talkAbout(eater2,content2)],17).
 %  % =================================.


% Happens(RiseFrom(Eater1,Chair1),18).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4630).
%~ From E:
%~ 
%~ happens(riseFrom(eater1,chair1),18)
observe( riseFrom(eater1,chair1)at 18).
 %  observe([riseFrom(eater1,chair1)],18).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4632).
% Happens(RiseFrom(Eater2,Chair2),19).
%~ From E:
%~ 
%~ happens(riseFrom(eater2,chair2),19)
observe( riseFrom(eater2,chair2)at 19).
 %  observe([riseFrom(eater2,chair2)],19).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4634).
% range time 0 20
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,20)))
:-( call_pel_directive( range(time,0,20))).

% range offset 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4634).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,0,0)))
:-( call_pel_directive( range(offset,0,0))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4636).
% range diameter 0 0
%~ From E:
%~ 
%~ :-( call_pel_directive( range(diameter,0,0)))
:-( call_pel_directive( range(diameter,0,0))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4638).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).
%; End of file.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4640).
%~ From E:
%~ 
%~ :-( call_pel_directive( translate(ending,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e.lps')))
:-( call_pel_directive( translate(ending,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e.lps'))).
