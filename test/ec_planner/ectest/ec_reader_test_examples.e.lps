:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4640).
%~ From E:
%~ 
%~ :-( call_pel_directive( translate(unskipped,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e.lps')))
:-( call_pel_directive( translate(unskipped,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e.lps'))).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4640).
%~ From E:
%~ 
%~ :-( call_pel_directive( translate(begining,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e.lps')))
:-( call_pel_directive( translate(begining,'/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e.lps'))).
% Sat, 25 Sep 2021 13:19:18 GMT File: <stream>(0x55866ddf4500)%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Holding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',28).
% option encoding 3
%~ From E:
%~ 
%~ :-( call_pel_directive( option(encoding,3)))
:-( call_pel_directive( option(encoding,3))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',30).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',30).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',33).
% sort person
%~ From E:
%~ 
%~ sort(person)
sort(person).

% sort object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',33).
%~ From E:
%~ 
%~ sort(object)
sort(object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',36).
% event Hold(person,object)
%~ From E:
%~ 
%~ event( hold(person,object))
%~ cpc :- events([hold/2])
%~ ooo :- [   cl([events([hold/2])],[])]
%~ cpc :- mpred_prop(hold(person,object),event)
%~ ooo :- [   cl([mpred_prop(hold(person,object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',36).
cl(mpred_prop(hold(person,object),event),[]),cl(events(hold/2),[]).

% fluent Holding(person,object)
%~ From E:
%~ 
%~ fluent( holding(person,object))
%~ cpc :- fluents([holding/2])
%~ ooo :- [   cl([fluents([holding/2])],[])]
%~ cpc :- mpred_prop(holding(person,object),fluent)
%~ ooo :- [   cl([mpred_prop(holding(person,object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',36).
cl(mpred_prop(holding(person,object),fluent),[]),cl(fluents(holding/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',39).
% person P1
%~ From E:
%~ 
%~ t(person,p1)
isa(p1,person).

% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',39).
%~ From E:
%~ 
%~ t(object,o1)
isa(o1,object).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',42).
% Happens(Hold(P1,O1),0).
%~ From E:
%~ 
%~ happens(hold(p1,o1),0)
observe( hold(p1,o1)at 0).
 %  observe([hold(p1,o1)],0).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',44).
% [person,object,time]
% Initiates(Hold(person,object),Holding(person,object),time).
%~ From E:
%~ 
%~ initiates_at(hold(Person,Object),holding(Person,Object),Time)
%~ cpc :- initiates(hold(Person,Object),holding(Person,Object),Time)
%~ ooo :- [   cl(    [   initiates(hold(Person,Object),holding(Person,Object),Time)],       [])]
cl(initiates(hold(Person,Object),holding(Person,Object),Time),[]).
 %  cl(initiates(hold(Person,Object),holding(Person,Object),Time),[]).
 %  % =================================.


% !HoldsAt(Holding(P1,O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',46).
%~ From E:
%~ 
%~ holds(not(holding(p1,o1)),0)
initially( not holding(p1,o1)).
 %  initial_state([not(holding(p1,o1))]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',48).
%;;; AUTO !ReleasedAt(Holding(P1,O1),0).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',50).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',52).
% range time 0 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,1)))
:-( call_pel_directive( range(time,0,1))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',52).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',83).
% option trajectory on
%~ From E:
%~ 
%~ :-( call_pel_directive( option(trajectory,on)))
:-( call_pel_directive( option(trajectory,on))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',85).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',85).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',88).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

% sort height: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',88).
%~ From E:
%~ 
%~ subsort(height,integer)
subsort(height,integer).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',91).
% fluent Height(object,height)
%~ From E:
%~ 
%~ fluent( height(object,height))
%~ cpc :- fluents([height/2])
%~ ooo :- [   cl([fluents([height/2])],[])]
%~ cpc :- mpred_prop(height(object,height),fluent)
%~ ooo :- [   cl([mpred_prop(height(object,height),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',91).
cl(mpred_prop(height(object,height),fluent),[]),cl(fluents(height/2),[]).

% fluent Falling(object)
%~ From E:
%~ 
%~ fluent( falling(object))
%~ cpc :- fluents([falling/1])
%~ ooo :- [   cl([fluents([falling/1])],[])]
%~ cpc :- mpred_prop(falling(object),fluent)
%~ ooo :- [   cl([mpred_prop(falling(object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',91).
cl(mpred_prop(falling(object),fluent),[]),cl(fluents(falling/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',93).
% event StartFalling(object)
%~ From E:
%~ 
%~ event( startFalling(object))
%~ cpc :- events([startFalling/1])
%~ ooo :- [   cl([events([startFalling/1])],[])]
%~ cpc :- mpred_prop(startFalling(object),event)
%~ ooo :- [   cl([mpred_prop(startFalling(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',93).
cl(mpred_prop(startFalling(object),event),[]),cl(events(startFalling/1),[]).

% event HitsGround(object)
%~ From E:
%~ 
%~ event( hitsGround(object))
%~ cpc :- events([hitsGround/1])
%~ ooo :- [   cl([events([hitsGround/1])],[])]
%~ cpc :- mpred_prop(hitsGround(object),event)
%~ ooo :- [   cl([mpred_prop(hitsGround(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',93).
cl(mpred_prop(hitsGround(object),event),[]),cl(events(hitsGround/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',96).
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
%~ From E:
%~ 
%~ (     holds(height(Object,Height1),Time) ,     holds(height(Object,Height2),Time)) ->         Height1=Height2
%~ cpc :- (     holds(height(Object,Height1),Time) ,     holds(height(Object,Height2),Time)) ->         Height1=Height2
%~ ooo :- [   cl(    [   equals(Height1,Height2)],       [      holds(height(Object,Height1),Time),           holds(height(Object,Height2),Time)])]
cl( equals(Height1,Height2),   (     holds(height(Object,Height1),Time) ,     holds(height(Object,Height2),Time))).
 %  cl( equals(Height1,Height2),   (     holds(height(Object,Height1),Time) ,     holds(height(Object,Height2),Time))).
 %  % =================================.


% [object,time]
% Initiates(StartFalling(object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',102).
%~ From E:
%~ 
%~ initiates_at(startFalling(Object),falling(Object),Time)
%~ cpc :- initiates(startFalling(Object),falling(Object),Time)
%~ ooo :- [   cl([initiates(startFalling(Object),falling(Object),Time)],[])]
cl(initiates(startFalling(Object),falling(Object),Time),[]).
 %  cl(initiates(startFalling(Object),falling(Object),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',104).
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).
%~ From E:
%~ 
%~ releases_at(startFalling(Object),height(Object,Height),Time)
%~ cpc :- releases(startFalling(Object),height(Object,Height),Time)
%~ ooo :- [   cl([releases(startFalling(Object),height(Object,Height),Time)],[])]
cl(releases(startFalling(Object),height(Object,Height),Time),[]).
 %  cl(releases(startFalling(Object),height(Object,Height),Time),[]).
 %  % =================================.


% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset*offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',108).
%~ From E:
%~ 
%~ (     holds(height(Object,Height1),Time) ,       Height2 =             Height1-Offset*Offset) ->         trajectory(falling(Object),Time,height(Object,Height2),Offset)
%~ cpc :- (     holds(height(Object,Height1),Time) ,       Height2 =             Height1-Offset*Offset) ->         trajectory(falling(Object),Time,height(Object,Height2),Offset)
%~ ooo :- [   cl(    [   trajectory(falling(Object),Time,height(Object,Height2),Offset)],       [      holds(height(Object,Height1),Time),           equals(Height2,Height1-Offset*Offset)])]
cl(    trajectory(falling(Object),Time,height(Object,Height2),Offset),       (           holds(height(Object,Height1),Time) ,           equals(Height2,Height1-Offset*Offset))).
 %  cl(    trajectory(falling(Object),Time,height(Object,Height2),Offset),       (           holds(height(Object,Height1),Time) ,           equals(Height2,Height1-Offset*Offset))).
 %  % =================================.


% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',113).
%~ From E:
%~ 
%~ holds(falling(Object),Time),holds(height(Object,0),Time) ->         happens(hitsGround(Object),Time)
%~ cpc :- holds(falling(Object),Time),holds(height(Object,0),Time) ->         happens(hitsGround(Object),Time)
%~ ooo :- [   cl(    [   happens(hitsGround(Object),Time)],       [      holds(falling(Object),Time),           holds(height(Object,0),Time)])]
cl(    happens(hitsGround(Object),Time),       holds(falling(Object),Time),holds(height(Object,0),Time)).
 %  cl(    happens(hitsGround(Object),Time),       holds(falling(Object),Time),holds(height(Object,0),Time)).
 %  % =================================.


%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',122).
%~ From E:
%~ 
%~ holds(height(Object,Height),Time) ->         initiates_at(hitsGround(Object),height(Object,Height),Time)
%~ cpc :- holds(height(Object,Height),Time)
%~ ooo :- [   cl([holds(height(Object,Height),Time)],[])]
%~ cpc :- if(    initiates(hitsGround(Object),at(height(Object,Height),Time)),       cl([holds(height(Object,Height),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(hitsGround(Object),at(height(Object,Height),Time)),       cl([holds(height(Object,Height),Time)],[]))],       [])]
cl(    (     hitsGround(Object)initiates height(Object,Height)at Time if     cl(holds(height(Object,Height),Time),[])),       []).
 %  cl(    if(    initiates(hitsGround(Object),at(height(Object,Height),Time)),       cl(holds(height(Object,Height),Time),[])),       []).
 %  % =================================.


% [object,time]
% Terminates(HitsGround(object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',127).
%~ From E:
%~ 
%~ terminates_at(hitsGround(Object),falling(Object),Time)
%~ cpc :- terminates(hitsGround(Object),falling(Object),Time)
%~ ooo :- [   cl([terminates(hitsGround(Object),falling(Object),Time)],[])]
cl(terminates(hitsGround(Object),falling(Object),Time),[]).
 %  cl(terminates(hitsGround(Object),falling(Object),Time),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',129).
% object Leaf
%~ From E:
%~ 
%~ t(object,leaf)
isa(leaf,object).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',131).
% !HoldsAt(Falling(Leaf),0).
%~ From E:
%~ 
%~ holds(not(falling(leaf)),0)
initially( not falling(leaf)).
 %  initial_state([not(falling(leaf))]).
 %  % =================================.


% HoldsAt(Height(Leaf,9),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',131).
%~ From E:
%~ 
%~ holds(height(leaf,9),0)
initially( height(leaf,9)).
 %  initial_state([height(leaf,9)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',133).
% Happens(StartFalling(Leaf),0).
%~ From E:
%~ 
%~ happens(startFalling(leaf),0)
observe( startFalling(leaf)at 0).
 %  observe([startFalling(leaf)],0).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',135).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',137).
% range time 0 4
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,4)))
:-( call_pel_directive( range(time,0,4))).

% range offset 1 9
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',137).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,9)))
:-( call_pel_directive( range(offset,1,9))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',139).
% range height 0 9
%~ From E:
%~ 
%~ :-( call_pel_directive( range(height,0,9)))
:-( call_pel_directive( range(height,0,9))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/PolySpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% sort object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',167).
%~ From E:
%~ 
%~ sort(object)
sort(object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',169).
% sort xcoord: integer
%~ From E:
%~ 
%~ subsort(xcoord,integer)
subsort(xcoord,integer).

% sort ycoord: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',169).
%~ From E:
%~ 
%~ subsort(ycoord,integer)
subsort(ycoord,integer).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',171).
% sort grid
%~ From E:
%~ 
%~ sort(grid)
sort(grid).

% sort shape
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',171).
%~ From E:
%~ 
%~ sort(shape)
sort(shape).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',173).
% sort color
%~ From E:
%~ 
%~ sort(color)
sort(color).
%; constants

% shape Round,Square
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',175).
%~ From E:
%~ 
%~ t(shape,round)
isa(round,shape).
%~ From E:
%~ 
%~ t(shape,square)
isa(square,shape).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',177).
% color Red,Green
%~ From E:
%~ 
%~ t(color,red)
isa(red,color).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',177).
%~ From E:
%~ 
%~ t(color,green)
isa(green,color).
%; predicates, fluents, and events

% predicate Equal(object,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',179).
%~ From E:
%~ 
%~ predicate( equal(object,object))
%~ cpc :- predicates([equal/2])
%~ ooo :- [   cl([predicates([equal/2])],[])]
%~ cpc :- mpred_prop(equal(object,object),predicate)
%~ ooo :- [   cl([mpred_prop(equal(object,object),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',179).
cl(mpred_prop(equal(object,object),predicate),[]),cl(predicates(equal/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',181).
% predicate Shape(object,shape)
%~ From E:
%~ 
%~ predicate( shape(object,shape))
%~ cpc :- predicates([shape/2])
%~ ooo :- [   cl([predicates([shape/2])],[])]
%~ cpc :- mpred_prop(shape(object,shape),predicate)
%~ ooo :- [   cl([mpred_prop(shape(object,shape),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',181).
cl(mpred_prop(shape(object,shape),predicate),[]),cl(predicates(shape/2),[]).

% predicate Color(object,color)
%~ From E:
%~ 
%~ predicate( color(object,color))
%~ cpc :- predicates([color/2])
%~ ooo :- [   cl([predicates([color/2])],[])]
%~ cpc :- mpred_prop(color(object,color),predicate)
%~ ooo :- [   cl([mpred_prop(color(object,color),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',181).
cl(mpred_prop(color(object,color),predicate),[]),cl(predicates(color/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',183).
% fluent Location(grid,object,xcoord,ycoord)
%~ From E:
%~ 
%~ fluent( location(grid,object,xcoord,ycoord))
%~ cpc :- fluents([location/4])
%~ ooo :- [   cl([fluents([location/4])],[])]
%~ cpc :- mpred_prop(location(grid,object,xcoord,ycoord),fluent)
%~ ooo :- [   cl([mpred_prop(location(grid,object,xcoord,ycoord),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',183).
cl(mpred_prop(location(grid,object,xcoord,ycoord),fluent),[]),cl(fluents(location/4),[]).

% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
%~ From E:
%~ 
%~ event( move(grid,object,xcoord,ycoord,xcoord,ycoord))
%~ cpc :- events([move/6])
%~ ooo :- [   cl([events([move/6])],[])]
%~ cpc :- mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event)
%~ ooo :- [   cl([mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',183).
cl(mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event),[]),cl(events(move/6),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',186).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',188).
%~ From E:
%~ 
%~ equal(Object1,Object2) ->         equal(Object2,Object1)
%~ cpc :- equal(Object1,Object2) ->         equal(Object2,Object1)
%~ ooo :- [   cl([equal(Object2,Object1)],[equal(Object1,Object2)])]
cl(equal(Object2,Object1),equal(Object1,Object2)).
 %  cl(equal(Object2,Object1),equal(Object1,Object2)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',190).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',192).
%~ From E:
%~ 
%~ shape(Object,Shape1),shape(Object,Shape2) ->         Shape1=Shape2
%~ cpc :- shape(Object,Shape1),shape(Object,Shape2) ->         Shape1=Shape2
%~ ooo :- [   cl(    [   equals(Shape1,Shape2)],       [      shape(Object,Shape1),           shape(Object,Shape2)])]
cl( equals(Shape1,Shape2),   shape(Object,Shape1),shape(Object,Shape2)).
 %  cl( equals(Shape1,Shape2),   shape(Object,Shape1),shape(Object,Shape2)).
 %  % =================================.


%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',196).
%~ From E:
%~ 
%~ color(Object,Color1),color(Object,Color2) ->         Color1=Color2
%~ cpc :- color(Object,Color1),color(Object,Color2) ->         Color1=Color2
%~ ooo :- [   cl(    [   equals(Color1,Color2)],       [      color(Object,Color1),           color(Object,Color2)])]
cl( equals(Color1,Color2),   color(Object,Color1),color(Object,Color2)).
 %  cl( equals(Color1,Color2),   color(Object,Color1),color(Object,Color2)).
 %  % =================================.


%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',201).
%~ From E:
%~ 
%~ equal(Object1,Object2) ->         thereExists(Shape,(shape(Object1,Shape),shape(Object2,Shape)))
%~ cpc :- equal(Object1,Object2) ->         thereExists(Shape,(shape(Object1,Shape),shape(Object2,Shape)))
%~ ooo :- [   cl(    [   exists( Shape,   (     shape(Object1,Shape),shape(Object2,Shape) ;     not(equal(Object1,Object2))))],       [])]
cl(    exists( Shape,   (     shape(Object1,Shape),shape(Object2,Shape) ;     not equal(Object1,Object2))),       []).
 %  cl(    exists( Shape,   (     shape(Object1,Shape),shape(Object2,Shape) ;     not(equal(Object1,Object2)))),       []).
 %  % =================================.


%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',206).
%~ From E:
%~ 
%~ equal(Object1,Object2) ->         thereExists(Color,(color(Object1,Color),color(Object2,Color)))
%~ cpc :- equal(Object1,Object2) ->         thereExists(Color,(color(Object1,Color),color(Object2,Color)))
%~ ooo :- [   cl(    [   exists( Color,   (     color(Object1,Color),color(Object2,Color) ;     not(equal(Object1,Object2))))],       [])]
cl(    exists( Color,   (     color(Object1,Color),color(Object2,Color) ;     not equal(Object1,Object2))),       []).
 %  cl(    exists( Color,   (     color(Object1,Color),color(Object2,Color) ;     not(equal(Object1,Object2)))),       []).
 %  % =================================.


%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',211).
%~ From E:
%~ 
%~ ( equal(Object1,Object2)  ->    (         holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,         holds(location(Grid,Object2,Xcoord2,Ycoord2),Time)) ->     Xcoord1=Xcoord2,Ycoord1=Ycoord2)
%~ cpc :- ( equal(Object1,Object2)  ->    (         holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,         holds(location(Grid,Object2,Xcoord2,Ycoord2),Time)) ->     Xcoord1=Xcoord2,Ycoord1=Ycoord2)
%~ ooo :- [   cl(    [   equals(Xcoord1,Xcoord2)],       [      holds(location(Grid,Object1,Xcoord1,Ycoord1),Time),           holds(location(Grid,Object2,Xcoord2,Ycoord2),Time),           equal(Object1,Object2)]),     cl(      [   equals(Ycoord1,Ycoord2)],           [        holds(location(Grid,Object1,Xcoord1,Ycoord1),Time),               holds(location(Grid,Object2,Xcoord2,Ycoord2),Time),               equal(Object1,Object2)])]
(     cl( equals(Xcoord1,Xcoord2),     ( holds(location(Grid,Object1,Xcoord1,Ycoord1),Time)  ,    holds(location(Grid,Object2,Xcoord2,Ycoord2),Time) ,     equal(Object1,Object2))) ,     cl( equals(Ycoord1,Ycoord2),     ( holds(location(Grid,Object1,Xcoord1,Ycoord1),Time)  ,    holds(location(Grid,Object2,Xcoord2,Ycoord2),Time) ,     equal(Object1,Object2)))).
 %  (     cl( equals(Xcoord1,Xcoord2),     ( holds(location(Grid,Object1,Xcoord1,Ycoord1),Time)  ,    holds(location(Grid,Object2,Xcoord2,Ycoord2),Time) ,     equal(Object1,Object2))) ,     cl( equals(Ycoord1,Ycoord2),     ( holds(location(Grid,Object1,Xcoord1,Ycoord1),Time)  ,    holds(location(Grid,Object2,Xcoord2,Ycoord2),Time) ,     equal(Object1,Object2)))).
 %  % =================================.


%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',218).
%~ From E:
%~ 
%~ (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time)) ->         Xcoord1=Xcoord2,Ycoord1=Ycoord2
%~ cpc :- (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time)) ->         Xcoord1=Xcoord2,Ycoord1=Ycoord2
%~ ooo :- [   cl(    [   equals(Xcoord1,Xcoord2)],       [      holds(location(Grid,Object,Xcoord1,Ycoord1),Time),           holds(location(Grid,Object,Xcoord2,Ycoord2),Time)]),     cl(      [   equals(Ycoord1,Ycoord2)],           [        holds(location(Grid,Object,Xcoord1,Ycoord1),Time),               holds(location(Grid,Object,Xcoord2,Ycoord2),Time)])]
(     cl( equals(Xcoord1,Xcoord2),     (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time))) ,     cl( equals(Ycoord1,Ycoord2),     (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time)))).
 %  (     cl( equals(Xcoord1,Xcoord2),     (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time))) ,     cl( equals(Ycoord1,Ycoord2),     (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object,Xcoord2,Ycoord2),Time)))).
 %  % =================================.


%; objects have locations
% [grid,object,time]
% (% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',224).
%~ From E:
%~ 
%~ exists( [Xcoord,Ycoord],   holds(location(Grid,Object,Xcoord,Ycoord),Time))
%~ cpc :- exists( [Xcoord,Ycoord],   holds(location(Grid,Object,Xcoord,Ycoord),Time))
%~ ooo :- [   cl(    [   exists( Xcoord,   exists( Ycoord,   holds(location(Grid,Object,Xcoord,Ycoord),Time)))],       [])]
cl(    exists( Xcoord,   exists( Ycoord,   holds(location(Grid,Object,Xcoord,Ycoord),Time))),       []).
 %  cl(    exists( Xcoord,   exists( Ycoord,   holds(location(Grid,Object,Xcoord,Ycoord),Time))),       []).
 %  % =================================.


%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',228).
%~ From E:
%~ 
%~ (     holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object2,Xcoord1,Ycoord1),Time)) ->         equal(Object1,Object2)
%~ cpc :- (     holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object2,Xcoord1,Ycoord1),Time)) ->         equal(Object1,Object2)
%~ ooo :- [   cl(    [   equal(Object1,Object2)],       [      holds(location(Grid,Object1,Xcoord1,Ycoord1),Time),           holds(location(Grid,Object2,Xcoord1,Ycoord1),Time)])]
cl( equal(Object1,Object2),   (     holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object2,Xcoord1,Ycoord1),Time))).
 %  cl( equal(Object1,Object2),   (     holds(location(Grid,Object1,Xcoord1,Ycoord1),Time) ,     holds(location(Grid,Object2,Xcoord1,Ycoord1),Time))).
 %  % =================================.


%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',234).
%~ From E:
%~ 
%~ initiates_at(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time)
%~ cpc :- initiates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time)
%~ ooo :- [   cl(    [   initiates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time)],       [])]
cl(    initiates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time),       []).
 %  cl(    initiates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord2,Ycoord2),       Time),       []).
 %  % =================================.


%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',241).
%~ From E:
%~ 
%~ terminates_at(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time)
%~ cpc :- terminates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time)
%~ ooo :- [   cl(    [   terminates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time)],       [])]
cl(    terminates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time),       []).
 %  cl(    terminates(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       location(Grid,Object,Xcoord1,Ycoord1),       Time),       []).
 %  % =================================.


%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',259).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
%~ From E:
%~ 
%~ happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time) ->         (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     (         (             Xcoord1=Xcoord2 ,             Ycoord1=Ycoord2+1;Ycoord1=Ycoord2-1) ;         (             Ycoord1=Ycoord2 ,             Xcoord1=Xcoord2+1;Xcoord1=Xcoord2-1)))
%~ cpc :- happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time) ->         (     holds(location(Grid,Object,Xcoord1,Ycoord1),Time) ,     (         (             Xcoord1=Xcoord2 ,             Ycoord1=Ycoord2+1;Ycoord1=Ycoord2-1) ;         (             Ycoord1=Ycoord2 ,             Xcoord1=Xcoord2+1;Xcoord1=Xcoord2-1)))
%~ ooo :- [   cl(    [   holds(location(Grid,Object,Xcoord1,Ycoord1),Time)],       [      happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)]),     cl(      [   equals(Xcoord1,Xcoord2),     equals(Ycoord1,Ycoord2)],           [        happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)]),     cl(      [   equals(Xcoord1,Xcoord2),     equals(Xcoord1,Xcoord2+1),     equals(Xcoord1,Xcoord2-1)],           [        happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)]),     cl(      [   equals(Ycoord1,Ycoord2+1),     equals(Ycoord1,Ycoord2-1),     equals(Ycoord1,Ycoord2)],           [        happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)]),     cl(      [   equals(Ycoord1,Ycoord2+1),     equals(Ycoord1,Ycoord2-1),     equals(Xcoord1,Xcoord2+1),     equals(Xcoord1,Xcoord2-1)],           [        happens(    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),       Time)])]
( cl(    holds(location(Grid,Object,Xcoord1,Ycoord1),Time),       happens(       move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),             Time))  ,    cl(      equals(Xcoord1,Xcoord2),equals(Ycoord1,Ycoord2),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Xcoord1,Xcoord2)  ,    equals(Xcoord1,Xcoord2+1) ,     equals(Xcoord1,Xcoord2-1)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Ycoord1,Ycoord2+1)  ,    equals(Ycoord1,Ycoord2-1) ,     equals(Ycoord1,Ycoord2)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Ycoord1,Ycoord2+1)  ,    equals(Ycoord1,Ycoord2-1) ,     equals(Xcoord1,Xcoord2+1) ,     equals(Xcoord1,Xcoord2-1)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time))).
 %  ( cl(    holds(location(Grid,Object,Xcoord1,Ycoord1),Time),       happens(       move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),             Time))  ,    cl(      equals(Xcoord1,Xcoord2),equals(Ycoord1,Ycoord2),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Xcoord1,Xcoord2)  ,    equals(Xcoord1,Xcoord2+1) ,     equals(Xcoord1,Xcoord2-1)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Ycoord1,Ycoord2+1)  ,    equals(Ycoord1,Ycoord2-1) ,     equals(Ycoord1,Ycoord2)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time)) ,     cl(      ( equals(Ycoord1,Ycoord2+1)  ,    equals(Ycoord1,Ycoord2-1) ,     equals(Xcoord1,Xcoord2+1) ,     equals(Xcoord1,Xcoord2-1)),           happens(         move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2),                 Time))).
 %  % =================================.


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',290).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',290).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',292).
% load examples/Cassimatis2002/PolySpace.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('examples/Cassimatis2002/PolySpace.e')))
:-( call_pel_directive( load('examples/Cassimatis2002/PolySpace.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',294).
% grid G1
%~ From E:
%~ 
%~ t(grid,g1)
isa(g1,grid).

% object X,Y,Screen1,Screen2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',294).
%~ From E:
%~ 
%~ t(object,x)
isa(x,object).
%~ From E:
%~ 
%~ t(object,y)
isa(y,object).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',294).
%~ From E:
%~ 
%~ t(object,screen1)
isa(screen1,object).
%~ From E:
%~ 
%~ t(object,screen2)
isa(screen2,object).
%; perceptions:


% Shape(X,Round).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',297).
%~ From E:
%~ 
%~ shape(x,round)
shape(x,round).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',299).
% Color(X,Red).
%~ From E:
%~ 
%~ color(x,red)
color(x,red).


% Shape(Y,Round).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',299).
%~ From E:
%~ 
%~ shape(y,round)
shape(y,round).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',301).
% Color(Y,Red).
%~ From E:
%~ 
%~ color(y,red)
color(y,red).


% Shape(Screen1,Square).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',301).
%~ From E:
%~ 
%~ shape(screen1,square)
shape(screen1,square).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',303).
% Color(Screen1,Green).
%~ From E:
%~ 
%~ color(screen1,green)
color(screen1,green).


% Shape(Screen2,Square).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',303).
%~ From E:
%~ 
%~ shape(screen2,square)
shape(screen2,square).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',305).
% Color(Screen2,Green).
%~ From E:
%~ 
%~ color(screen2,green)
color(screen2,green).


% [time]
 % HoldsAt(Location(G1,Screen1,2,0),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',305).
%~ From E:
%~ 
%~ holds(location(g1,screen1,2,0),Time)
%~ cpc :- holds(location(g1,screen1,2,0),Time)
%~ ooo :- [   cl([holds(location(g1,screen1,2,0),Time)],[])]
cl(holds(location(g1,screen1,2,0),Time),[]).
 %  cl(holds(location(g1,screen1,2,0),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',307).
% [time]
 % HoldsAt(Location(G1,Screen2,4,0),time).
%~ From E:
%~ 
%~ holds(location(g1,screen2,4,0),Time)
%~ cpc :- holds(location(g1,screen2,4,0),Time)
%~ ooo :- [   cl([holds(location(g1,screen2,4,0),Time)],[])]
cl(holds(location(g1,screen2,4,0),Time),[]).
 %  cl(holds(location(g1,screen2,4,0),Time),[]).
 %  % =================================.


% HoldsAt(Location(G1,X,1,1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',307).
%~ From E:
%~ 
%~ holds(location(g1,x,1,1),0)
initially( location(g1,x,1,1)).
 %  initial_state([location(g1,x,1,1)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',309).
% HoldsAt(Location(G1,Y,5,1),4).
%~ From E:
%~ 
%~ holds(location(g1,y,5,1),4)
holds(location(g1,y,5,1),4).
 %  l_int(holds(location(g1,y,5,1),4),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',311).
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=5 & ycoord=1 & time=4 & Equal(X,Y).
%~ From E:
%~ 
%~ ( Xcoord\=2  ,    Xcoord\=4 ,     not( ( Xcoord=1  ,    Ycoord=1 ,     Time=0))) ->         (     holds(not(location(g1,x,Xcoord,Ycoord)),Time) ;     ( Xcoord=5  ,        Ycoord=1 ,         Time=4 ,         equal(x,y)))
%~ cpc :- ( Xcoord\=2  ,    Xcoord\=4 ,     not( ( Xcoord=1  ,    Ycoord=1 ,     Time=0))) ->         (     holds(not(location(g1,x,Xcoord,Ycoord)),Time) ;     ( Xcoord=5  ,        Ycoord=1 ,         Time=4 ,         equal(x,y)))
%~ ooo :- [   cl(    [   equals(Xcoord,5),     equals(Xcoord,1)],       [      holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Xcoord,5),     equals(Ycoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Xcoord,5),     equals(Time,0)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Ycoord,1),     equals(Xcoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Ycoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Ycoord,1),     equals(Time,0)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Time,4),     equals(Xcoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Time,4),     equals(Ycoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Time,4),     equals(Time,0)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equal(x,y),     equals(Xcoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equal(x,y),     equals(Ycoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equal(x,y),     equals(Time,0)],           [        holds(location(g1,x,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}])]
( cl(    equals(Xcoord,5),equals(Xcoord,1),       ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,          {        dif(Xcoord,2) } ,           {        dif(Xcoord,4) }))  ,    cl(      equals(Xcoord,5),equals(Ycoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Xcoord,5),equals(Time,0),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Ycoord,1),equals(Xcoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl( equals(Ycoord,1),     ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,    {     dif(Xcoord,2) } ,     {     dif(Xcoord,4) })) ,     cl(      equals(Ycoord,1),equals(Time,0),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,4),equals(Xcoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,4),equals(Ycoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,4),equals(Time,0),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Xcoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Ycoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Time,0),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) }))).
 %  ( cl(    equals(Xcoord,5),equals(Xcoord,1),       ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,          {        dif(Xcoord,2) } ,           {        dif(Xcoord,4) }))  ,    cl(      equals(Xcoord,5),equals(Ycoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Xcoord,5),equals(Time,0),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Ycoord,1),equals(Xcoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl( equals(Ycoord,1),     ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,    {     dif(Xcoord,2) } ,     {     dif(Xcoord,4) })) ,     cl(      equals(Ycoord,1),equals(Time,0),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,4),equals(Xcoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,4),equals(Ycoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,4),equals(Time,0),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Xcoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Ycoord,1),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Time,0),           ( holds(location(g1,x,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) }))).
 %  % =================================.


% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=5 & ycoord=1 & time=4) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',317).
%~ From E:
%~ 
%~ ( Xcoord\=2  ,    Xcoord\=4 ,     not( ( Xcoord=5  ,    Ycoord=1 ,     Time=4))) ->         (     holds(not(location(g1,y,Xcoord,Ycoord)),Time) ;     ( Xcoord=1  ,        Ycoord=1 ,         Time=0 ,         equal(x,y)))
%~ cpc :- ( Xcoord\=2  ,    Xcoord\=4 ,     not( ( Xcoord=5  ,    Ycoord=1 ,     Time=4))) ->         (     holds(not(location(g1,y,Xcoord,Ycoord)),Time) ;     ( Xcoord=1  ,        Ycoord=1 ,         Time=0 ,         equal(x,y)))
%~ ooo :- [   cl(    [   equals(Xcoord,1),     equals(Xcoord,5)],       [      holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Xcoord,1),     equals(Ycoord,1)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Xcoord,1),     equals(Time,4)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Ycoord,1),     equals(Xcoord,5)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Ycoord,1)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Ycoord,1),     equals(Time,4)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Time,0),     equals(Xcoord,5)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Time,0),     equals(Ycoord,1)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equals(Time,0),     equals(Time,4)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equal(x,y),     equals(Xcoord,5)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equal(x,y),     equals(Ycoord,1)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}]),     cl(      [   equal(x,y),     equals(Time,4)],           [        holds(location(g1,y,Xcoord,Ycoord),Time), {dif(Xcoord,2)},{dif(Xcoord,4)}])]
( cl(    equals(Xcoord,1),equals(Xcoord,5),       ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,          {        dif(Xcoord,2) } ,           {        dif(Xcoord,4) }))  ,    cl(      equals(Xcoord,1),equals(Ycoord,1),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Xcoord,1),equals(Time,4),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Ycoord,1),equals(Xcoord,5),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl( equals(Ycoord,1),     ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,    {     dif(Xcoord,2) } ,     {     dif(Xcoord,4) })) ,     cl(      equals(Ycoord,1),equals(Time,4),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,0),equals(Xcoord,5),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,0),equals(Ycoord,1),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,0),equals(Time,4),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Xcoord,5),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Ycoord,1),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Time,4),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) }))).
 %  ( cl(    equals(Xcoord,1),equals(Xcoord,5),       ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,          {        dif(Xcoord,2) } ,           {        dif(Xcoord,4) }))  ,    cl(      equals(Xcoord,1),equals(Ycoord,1),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Xcoord,1),equals(Time,4),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Ycoord,1),equals(Xcoord,5),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl( equals(Ycoord,1),     ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,    {     dif(Xcoord,2) } ,     {     dif(Xcoord,4) })) ,     cl(      equals(Ycoord,1),equals(Time,4),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,0),equals(Xcoord,5),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,0),equals(Ycoord,1),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equals(Time,0),equals(Time,4),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Xcoord,5),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Ycoord,1),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) })) ,     cl(      equal(x,y),equals(Time,4),           ( holds(location(g1,y,Xcoord,Ycoord),Time)  ,              {          dif(Xcoord,2) } ,               {          dif(Xcoord,4) }))).
 %  % =================================.

% range time 0 4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',320).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,4)))
:-( call_pel_directive( range(time,0,4))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',322).
% range xcoord 0 5
%~ From E:
%~ 
%~ :-( call_pel_directive( range(xcoord,0,5)))
:-( call_pel_directive( range(xcoord,0,5))).

% range ycoord 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',322).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(ycoord,0,1)))
:-( call_pel_directive( range(ycoord,0,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',324).
% range offset 0 0
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,0,0)))
:-( call_pel_directive( range(offset,0,0))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',352).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',352).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',354).
% load examples/Cassimatis2002/PolySpace.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('examples/Cassimatis2002/PolySpace.e')))
:-( call_pel_directive( load('examples/Cassimatis2002/PolySpace.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',356).
% grid G1
%~ From E:
%~ 
%~ t(grid,g1)
isa(g1,grid).

% object X,Y,Screen
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',356).
%~ From E:
%~ 
%~ t(object,x)
isa(x,object).
%~ From E:
%~ 
%~ t(object,y)
isa(y,object).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',356).
%~ From E:
%~ 
%~ t(object,screen)
isa(screen,object).
%; perceptions:


% Shape(X,Round).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',359).
%~ From E:
%~ 
%~ shape(x,round)
shape(x,round).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',361).
% Color(X,Red).
%~ From E:
%~ 
%~ color(x,red)
color(x,red).


% Shape(Y,Round).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',361).
%~ From E:
%~ 
%~ shape(y,round)
shape(y,round).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',363).
% Color(Y,Red).
%~ From E:
%~ 
%~ color(y,red)
color(y,red).


% Shape(Screen,Square).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',363).
%~ From E:
%~ 
%~ shape(screen,square)
shape(screen,square).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',365).
% Color(Screen,Green).
%~ From E:
%~ 
%~ color(screen,green)
color(screen,green).


% [time]
 % HoldsAt(Location(G1,Screen,2,0),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',365).
%~ From E:
%~ 
%~ holds(location(g1,screen,2,0),Time)
%~ cpc :- holds(location(g1,screen,2,0),Time)
%~ ooo :- [   cl([holds(location(g1,screen,2,0),Time)],[])]
cl(holds(location(g1,screen,2,0),Time),[]).
 %  cl(holds(location(g1,screen,2,0),Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',367).
% HoldsAt(Location(G1,X,1,1),0).
%~ From E:
%~ 
%~ holds(location(g1,x,1,1),0)
initially( location(g1,x,1,1)).
 %  initial_state([location(g1,x,1,1)]).
 %  % =================================.


% HoldsAt(Location(G1,Y,3,1),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',367).
%~ From E:
%~ 
%~ holds(location(g1,y,3,1),2)
holds(location(g1,y,3,1),2).
 %  l_int(holds(location(g1,y,3,1),2),[]).
 %  % =================================.


% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=3 & ycoord=1 & time=2 & Equal(X,Y).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',371).
%~ From E:
%~ 
%~ Xcoord\=2,not((Xcoord=1,Ycoord=1,Time=0)) ->         (     holds(not(location(g1,x,Xcoord,Ycoord)),Time) ;     ( Xcoord=3  ,        Ycoord=1 ,         Time=2 ,         equal(x,y)))
%~ cpc :- Xcoord\=2,not((Xcoord=1,Ycoord=1,Time=0)) ->         (     holds(not(location(g1,x,Xcoord,Ycoord)),Time) ;     ( Xcoord=3  ,        Ycoord=1 ,         Time=2 ,         equal(x,y)))
%~ ooo :- [   cl(    [   equals(Xcoord,3),     equals(Xcoord,1)],       [      holds(location(g1,x,Xcoord,Ycoord),Time),           {        dif(Xcoord,2) }]),     cl(      [   equals(Xcoord,3),     equals(Ycoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Xcoord,3),     equals(Time,0)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Ycoord,1),     equals(Xcoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Ycoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Ycoord,1),     equals(Time,0)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Time,2),     equals(Xcoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Time,2),     equals(Ycoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Time,2),     equals(Time,0)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equal(x,y),     equals(Xcoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equal(x,y),     equals(Ycoord,1)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equal(x,y),     equals(Time,0)],           [        holds(location(g1,x,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }])]
( cl(    equals(Xcoord,3),equals(Xcoord,1),       holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)})  ,    cl(      equals(Xcoord,3),equals(Ycoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Xcoord,3),equals(Time,0),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Ycoord,1),equals(Xcoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl( equals(Ycoord,1),     holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Ycoord,1),equals(Time,0),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,2),equals(Xcoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,2),equals(Ycoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,2),equals(Time,0),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Xcoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Ycoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Time,0),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)})).
 %  ( cl(    equals(Xcoord,3),equals(Xcoord,1),       holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)})  ,    cl(      equals(Xcoord,3),equals(Ycoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Xcoord,3),equals(Time,0),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Ycoord,1),equals(Xcoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl( equals(Ycoord,1),     holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Ycoord,1),equals(Time,0),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,2),equals(Xcoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,2),equals(Ycoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,2),equals(Time,0),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Xcoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Ycoord,1),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Time,0),           holds(location(g1,x,Xcoord,Ycoord),Time),{dif(Xcoord,2)})).
 %  % =================================.


% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=3 & ycoord=1 & time=2) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',376).
%~ From E:
%~ 
%~ Xcoord\=2,not((Xcoord=3,Ycoord=1,Time=2)) ->         (     holds(not(location(g1,y,Xcoord,Ycoord)),Time) ;     ( Xcoord=1  ,        Ycoord=1 ,         Time=0 ,         equal(x,y)))
%~ cpc :- Xcoord\=2,not((Xcoord=3,Ycoord=1,Time=2)) ->         (     holds(not(location(g1,y,Xcoord,Ycoord)),Time) ;     ( Xcoord=1  ,        Ycoord=1 ,         Time=0 ,         equal(x,y)))
%~ ooo :- [   cl(    [   equals(Xcoord,1),     equals(Xcoord,3)],       [      holds(location(g1,y,Xcoord,Ycoord),Time),           {        dif(Xcoord,2) }]),     cl(      [   equals(Xcoord,1),     equals(Ycoord,1)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Xcoord,1),     equals(Time,2)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Ycoord,1),     equals(Xcoord,3)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Ycoord,1)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Ycoord,1),     equals(Time,2)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Time,0),     equals(Xcoord,3)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Time,0),     equals(Ycoord,1)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equals(Time,0),     equals(Time,2)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equal(x,y),     equals(Xcoord,3)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equal(x,y),     equals(Ycoord,1)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }]),     cl(      [   equal(x,y),     equals(Time,2)],           [        holds(location(g1,y,Xcoord,Ycoord),Time),               {          dif(Xcoord,2) }])]
( cl(    equals(Xcoord,1),equals(Xcoord,3),       holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)})  ,    cl(      equals(Xcoord,1),equals(Ycoord,1),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Xcoord,1),equals(Time,2),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Ycoord,1),equals(Xcoord,3),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl( equals(Ycoord,1),     holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Ycoord,1),equals(Time,2),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,0),equals(Xcoord,3),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,0),equals(Ycoord,1),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,0),equals(Time,2),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Xcoord,3),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Ycoord,1),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Time,2),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)})).
 %  ( cl(    equals(Xcoord,1),equals(Xcoord,3),       holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)})  ,    cl(      equals(Xcoord,1),equals(Ycoord,1),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Xcoord,1),equals(Time,2),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Ycoord,1),equals(Xcoord,3),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl( equals(Ycoord,1),     holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Ycoord,1),equals(Time,2),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,0),equals(Xcoord,3),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,0),equals(Ycoord,1),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equals(Time,0),equals(Time,2),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Xcoord,3),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Ycoord,1),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)}) ,     cl(      equal(x,y),equals(Time,2),           holds(location(g1,y,Xcoord,Ycoord),Time),{dif(Xcoord,2)})).
 %  % =================================.

% range time 0 2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',379).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,2)))
:-( call_pel_directive( range(time,0,2))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',381).
% range xcoord 0 4
%~ From E:
%~ 
%~ :-( call_pel_directive( range(xcoord,0,4)))
:-( call_pel_directive( range(xcoord,0,4))).

% range ycoord 0 2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',381).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(ycoord,0,2)))
:-( call_pel_directive( range(ycoord,0,2))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',383).
% range offset 0 0
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,0,0)))
:-( call_pel_directive( range(offset,0,0))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/BrewkaDixKonolige1997/Wine.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; reasoning by cases
%; \fullciteA[p. 45]{BrewkaDixKonolige:1997}
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',414).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',414).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',417).
% sort x
%~ From E:
%~ 
%~ sort(x)
sort(x).

% x Person
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',417).
%~ From E:
%~ 
%~ t(x,person)
isa(person,x).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',420).
% predicate LikesWine(x)
%~ From E:
%~ 
%~ predicate( likesWine(x))
%~ cpc :- predicates([likesWine/1])
%~ ooo :- [   cl([predicates([likesWine/1])],[])]
%~ cpc :- mpred_prop(likesWine(x),predicate)
%~ ooo :- [   cl([mpred_prop(likesWine(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',420).
cl(mpred_prop(likesWine(x),predicate),[]),cl(predicates(likesWine/1),[]).

% predicate Italian(x)
%~ From E:
%~ 
%~ predicate( italian(x))
%~ cpc :- predicates([italian/1])
%~ ooo :- [   cl([predicates([italian/1])],[])]
%~ cpc :- mpred_prop(italian(x),predicate)
%~ ooo :- [   cl([mpred_prop(italian(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',420).
cl(mpred_prop(italian(x),predicate),[]),cl(predicates(italian/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',422).
% predicate French(x)
%~ From E:
%~ 
%~ predicate( french(x))
%~ cpc :- predicates([french/1])
%~ ooo :- [   cl([predicates([french/1])],[])]
%~ cpc :- mpred_prop(french(x),predicate)
%~ ooo :- [   cl([mpred_prop(french(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',422).
cl(mpred_prop(french(x),predicate),[]),cl(predicates(french/1),[]).

% predicate Ab1(x)
%~ From E:
%~ 
%~ predicate( ab1(x))
%~ cpc :- predicates([ab1/1])
%~ ooo :- [   cl([predicates([ab1/1])],[])]
%~ cpc :- mpred_prop(ab1(x),predicate)
%~ ooo :- [   cl([mpred_prop(ab1(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',422).
cl(mpred_prop(ab1(x),predicate),[]),cl(predicates(ab1/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',424).
% predicate Ab2(x)
%~ From E:
%~ 
%~ predicate( ab2(x))
%~ cpc :- predicates([ab2/1])
%~ ooo :- [   cl([predicates([ab2/1])],[])]
%~ cpc :- mpred_prop(ab2(x),predicate)
%~ ooo :- [   cl([mpred_prop(ab2(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',424).
cl(mpred_prop(ab2(x),predicate),[]),cl(predicates(ab2/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',426).
% [x]
 % Italian(x) & !Ab1(x) -> LikesWine(x).
%~ From E:
%~ 
%~ italian(X),not(ab1(X)) ->         likesWine(X)
%~ cpc :- italian(X),not(ab1(X)) ->         likesWine(X)
%~ ooo :- [   cl([likesWine(X),ab1(X)],[italian(X)])]
cl((likesWine(X),ab1(X)),italian(X)).
 %  cl((likesWine(X),ab1(X)),italian(X)).
 %  % =================================.


% [x]
 % French(x) & !Ab2(x) -> LikesWine(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',426).
%~ From E:
%~ 
%~ french(X),not(ab2(X)) ->         likesWine(X)
%~ cpc :- french(X),not(ab2(X)) ->         likesWine(X)
%~ ooo :- [   cl([likesWine(X),ab2(X)],[french(X)])]
cl((likesWine(X),ab2(X)),french(X)).
 %  cl((likesWine(X),ab2(X)),french(X)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',428).
% [x]
 % Italian(x) -> !French(x).
%~ From E:
%~ 
%~ italian(X) ->         not(french(X))
%~ cpc :- italian(X) ->         not(french(X))
%~ ooo :- [   cl([],[french(X),italian(X)])]
cl([],(french(X),italian(X))).
 %  cl([],(french(X),italian(X))).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',430).
% Italian(Person) | French(Person).
%~ From E:
%~ 
%~ italian(person);french(person)
%~ cpc :- french(person)
%~ ooo :- [   cl([french(person)],[])]
%~ cpc :- not(italian(person))
%~ ooo :- [   cl([],[italian(person)])]
%~ cpc :- italian(person);french(person)
%~ ooo :- [   cl([italian(person),french(person)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',430).
cl((italian(person),french(person)),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',432).
% range time 0 0
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,0)))
:-( call_pel_directive( range(time,0,0))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',432).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',435).
% completion Theta Ab1
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(theta)))
:-( call_pel_directive( completion(theta))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',435).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(ab1)))
:-( call_pel_directive( completion(ab1))).

% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',435).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(theta)))
:-( call_pel_directive( completion(theta))).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(ab2)))
:-( call_pel_directive( completion(ab2))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Yale.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{HanksMcDermott:1987,
%;   author = "Steve Hanks and Drew V. McDermott",
%;   year = "1987",
%;   title = "Nonmonotonic logic and temporal projection",
%;   journal = "Artificial Intelligence",
%;   volume = "33",
%;   number = "3",
%;   pages = "379--412",
%; }
%;
%; \fullciteA[pp. 322--323]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',483).
% option showpred off
%~ From E:
%~ 
%~ :-( call_pel_directive( option(showpred,off)))
:-( call_pel_directive( option(showpred,off))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',485).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',485).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',488).
% event Load()
%~ From E:
%~ 
%~ event(load())
%~ cpc :- events([load/0])
%~ ooo :- [   cl([events([load/0])],[])]
%~ cpc :- mpred_prop(load(),event)
%~ ooo :- [   cl([mpred_prop(load(),event)],[])]
cl(mpred_prop(load(),event),[]),cl((events load/0),[]).
 %  cl(mpred_prop(load,event),[]),cl(events(load/0),[]).
 %  % =================================.

% event Shoot()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',488).
%~ From E:
%~ 
%~ event(shoot())
%~ cpc :- events([shoot/0])
%~ ooo :- [   cl([events([shoot/0])],[])]
%~ cpc :- mpred_prop(shoot(),event)
%~ ooo :- [   cl([mpred_prop(shoot(),event)],[])]
cl(mpred_prop(shoot(),event),[]),cl((events shoot/0),[]).
 %  cl(mpred_prop(shoot,event),[]),cl(events(shoot/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',490).
% event Sneeze()
%~ From E:
%~ 
%~ event(sneeze())
%~ cpc :- events([sneeze/0])
%~ ooo :- [   cl([events([sneeze/0])],[])]
%~ cpc :- mpred_prop(sneeze(),event)
%~ ooo :- [   cl([mpred_prop(sneeze(),event)],[])]
cl(mpred_prop(sneeze(),event),[]),cl((events sneeze/0),[]).
 %  cl(mpred_prop(sneeze,event),[]),cl(events(sneeze/0),[]).
 %  % =================================.

% fluent Loaded()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',490).
%~ From E:
%~ 
%~ fluent(loaded())
%~ cpc :- fluents([loaded/0])
%~ ooo :- [   cl([fluents([loaded/0])],[])]
%~ cpc :- mpred_prop(loaded(),fluent)
%~ ooo :- [   cl([mpred_prop(loaded(),fluent)],[])]
cl(mpred_prop(loaded(),fluent),[]),cl((fluents loaded/0),[]).
 %  cl(mpred_prop(loaded,fluent),[]),cl(fluents(loaded/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',492).
% fluent Alive()
%~ From E:
%~ 
%~ fluent(alive())
%~ cpc :- fluents([alive/0])
%~ ooo :- [   cl([fluents([alive/0])],[])]
%~ cpc :- mpred_prop(alive(),fluent)
%~ ooo :- [   cl([mpred_prop(alive(),fluent)],[])]
cl(mpred_prop(alive(),fluent),[]),cl((fluents alive/0),[]).
 %  cl(mpred_prop(alive,fluent),[]),cl(fluents(alive/0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',494).
% [time]
 % Initiates(Load(),Loaded(),time).
%~ From E:
%~ 
%~ initiates_at(load(),loaded(),Time)
%~ cpc :- initiates(load(),loaded(),Time)
%~ ooo :- [   cl([initiates(load(),loaded(),Time)],[])]
cl(initiates(load(),loaded(),Time),[]).
 %  cl(initiates(load,loaded,Time),[]).
 %  % =================================.


% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',494).
%~ From E:
%~ 
%~ holds(loaded(),Time) ->         terminates_at(shoot(),alive(),Time)
%~ cpc :- holds(loaded(),Time)
%~ ooo :- [   cl([holds(loaded(),Time)],[])]
%~ cpc :- if(terminates(shoot(),at(alive(),Time)),cl([holds(loaded(),Time)],[]))
%~ ooo :- [   cl([if(terminates(shoot(),at(alive(),Time)),cl([holds(loaded(),Time)],[]))],[])]
cl((shoot()terminates alive()at Time if cl(holds(loaded(),Time),[])),[]).
 %  cl(if(terminates(shoot,at(alive,Time)),cl(holds(loaded,Time),[])),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',496).
% [time]
 % Terminates(Shoot(),Loaded(),time).
%~ From E:
%~ 
%~ terminates_at(shoot(),loaded(),Time)
%~ cpc :- terminates(shoot(),loaded(),Time)
%~ ooo :- [   cl([terminates(shoot(),loaded(),Time)],[])]
cl(terminates(shoot(),loaded(),Time),[]).
 %  cl(terminates(shoot,loaded,Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',498).
% HoldsAt(Alive(),0).
%~ From E:
%~ 
%~ holds(alive(),0)
initially alive().
 %  initial_state([alive]).
 %  % =================================.


% !HoldsAt(Loaded(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',498).
%~ From E:
%~ 
%~ holds(not(loaded()),0)
initially( not loaded()).
 %  initial_state([not(loaded)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',500).
% Happens(Load(),0).
%~ From E:
%~ 
%~ happens(load(),0)
observe( load()at 0).
 %  observe([load],0).
 %  % =================================.


% Happens(Sneeze(),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',500).
%~ From E:
%~ 
%~ happens(sneeze(),1)
observe( sneeze()at 1).
 %  observe([sneeze],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',502).
% Happens(Shoot(),2).
%~ From E:
%~ 
%~ happens(shoot(),2)
observe( shoot()at 2).
 %  observe([shoot],2).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',504).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',506).
% range time 0 3
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,3)))
:-( call_pel_directive( range(time,0,3))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',506).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StuffyRoom.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{GinsbergSmith:1988a,
%;   author = "Matthew L. Ginsberg and David E. Smith",
%;   year = "1988",
%;   title = "Reasoning about action \uppercase{I}: \uppercase{A} possible worlds approach",
%;   journal = "Artificial Intelligence",
%;   volume = "35",
%;   number = "2",
%;   pages = "165--195",
%; }
%;
%; \fullciteA[pp. 288--289]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added:
%; !HoldsAt(Blocked1(),0).
%; !HoldsAt(Blocked2(),0).
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',555).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',555).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',558).
% event Close1()
%~ From E:
%~ 
%~ event(close1())
%~ cpc :- events([close1/0])
%~ ooo :- [   cl([events([close1/0])],[])]
%~ cpc :- mpred_prop(close1(),event)
%~ ooo :- [   cl([mpred_prop(close1(),event)],[])]
cl(mpred_prop(close1(),event),[]),cl((events close1/0),[]).
 %  cl(mpred_prop(close1,event),[]),cl(events(close1/0),[]).
 %  % =================================.

% event Close2()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',558).
%~ From E:
%~ 
%~ event(close2())
%~ cpc :- events([close2/0])
%~ ooo :- [   cl([events([close2/0])],[])]
%~ cpc :- mpred_prop(close2(),event)
%~ ooo :- [   cl([mpred_prop(close2(),event)],[])]
cl(mpred_prop(close2(),event),[]),cl((events close2/0),[]).
 %  cl(mpred_prop(close2,event),[]),cl(events(close2/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',560).
% event Start()
%~ From E:
%~ 
%~ event(start())
%~ cpc :- events([start/0])
%~ ooo :- [   cl([events([start/0])],[])]
%~ cpc :- mpred_prop(start(),event)
%~ ooo :- [   cl([mpred_prop(start(),event)],[])]
cl(mpred_prop(start(),event),[]),cl((events start/0),[]).
 %  cl(mpred_prop(start,event),[]),cl(events(start/0),[]).
 %  % =================================.

% fluent Blocked1()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',560).
%~ From E:
%~ 
%~ fluent(blocked1())
%~ cpc :- fluents([blocked1/0])
%~ ooo :- [   cl([fluents([blocked1/0])],[])]
%~ cpc :- mpred_prop(blocked1(),fluent)
%~ ooo :- [   cl([mpred_prop(blocked1(),fluent)],[])]
cl(mpred_prop(blocked1(),fluent),[]),cl((fluents blocked1/0),[]).
 %  cl(mpred_prop(blocked1,fluent),[]),cl(fluents(blocked1/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',562).
% fluent Blocked2()
%~ From E:
%~ 
%~ fluent(blocked2())
%~ cpc :- fluents([blocked2/0])
%~ ooo :- [   cl([fluents([blocked2/0])],[])]
%~ cpc :- mpred_prop(blocked2(),fluent)
%~ ooo :- [   cl([mpred_prop(blocked2(),fluent)],[])]
cl(mpred_prop(blocked2(),fluent),[]),cl((fluents blocked2/0),[]).
 %  cl(mpred_prop(blocked2,fluent),[]),cl(fluents(blocked2/0),[]).
 %  % =================================.

% fluent Stuffy()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',562).
%~ From E:
%~ 
%~ fluent(stuffy())
%~ cpc :- fluents([stuffy/0])
%~ ooo :- [   cl([fluents([stuffy/0])],[])]
%~ cpc :- mpred_prop(stuffy(),fluent)
%~ ooo :- [   cl([mpred_prop(stuffy(),fluent)],[])]
cl(mpred_prop(stuffy(),fluent),[]),cl((fluents stuffy/0),[]).
 %  cl(mpred_prop(stuffy,fluent),[]),cl(fluents(stuffy/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',564).
% noninertial Stuffy
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(stuffy)))
:-( call_pel_directive( noninertial(stuffy))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',566).
% [time]
 % Initiates(Close1(),Blocked1(),time).
%~ From E:
%~ 
%~ initiates_at(close1(),blocked1(),Time)
%~ cpc :- initiates(close1(),blocked1(),Time)
%~ ooo :- [   cl([initiates(close1(),blocked1(),Time)],[])]
cl(initiates(close1(),blocked1(),Time),[]).
 %  cl(initiates(close1,blocked1,Time),[]).
 %  % =================================.


% [time]
 % Initiates(Close2(),Blocked2(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',566).
%~ From E:
%~ 
%~ initiates_at(close2(),blocked2(),Time)
%~ cpc :- initiates(close2(),blocked2(),Time)
%~ ooo :- [   cl([initiates(close2(),blocked2(),Time)],[])]
cl(initiates(close2(),blocked2(),Time),[]).
 %  cl(initiates(close2,blocked2,Time),[]).
 %  % =================================.


% [time]
% HoldsAt(Stuffy(),time) <->
% HoldsAt(Blocked1(),time)&HoldsAt(Blocked2(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',570).
%~ From E:
%~ 
%~ <->(holds(stuffy(),Time),(holds(blocked1(),Time),holds(blocked2(),Time)))
%~ cpc :- <->(holds(stuffy(),Time),(holds(blocked1(),Time),holds(blocked2(),Time)))
%~ ooo :- [   cl([holds(blocked1(),Time)],[holds(stuffy(),Time)]),     cl([holds(blocked2(),Time)],[holds(stuffy(),Time)]),     cl(      [   holds(stuffy(),Time)],           [        holds(blocked1(),Time),               holds(blocked2(),Time)])]
( cl(holds(blocked1(),Time),holds(stuffy(),Time))  ,    cl(holds(blocked2(),Time),holds(stuffy(),Time)) ,     cl(holds(stuffy(),Time),(holds(blocked1(),Time),holds(blocked2(),Time)))).
 %  ( cl(holds(blocked1,Time),holds(stuffy,Time))  ,    cl(holds(blocked2,Time),holds(stuffy,Time)) ,     cl(holds(stuffy,Time),(holds(blocked1,Time),holds(blocked2,Time)))).
 %  % =================================.


% [time]
 % Initiates(Start(),Blocked1(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',572).
%~ From E:
%~ 
%~ initiates_at(start(),blocked1(),Time)
%~ cpc :- initiates(start(),blocked1(),Time)
%~ ooo :- [   cl([initiates(start(),blocked1(),Time)],[])]
cl(initiates(start(),blocked1(),Time),[]).
 %  cl(initiates(start,blocked1,Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',574).
% [time]
 % Terminates(Start(),Blocked2(),time).
%~ From E:
%~ 
%~ terminates_at(start(),blocked2(),Time)
%~ cpc :- terminates(start(),blocked2(),Time)
%~ ooo :- [   cl([terminates(start(),blocked2(),Time)],[])]
cl(terminates(start(),blocked2(),Time),[]).
 %  cl(terminates(start,blocked2,Time),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',576).
% !HoldsAt(Blocked1(),0).
%~ From E:
%~ 
%~ holds(not(blocked1()),0)
initially( not blocked1()).
 %  initial_state([not(blocked1)]).
 %  % =================================.


% !HoldsAt(Blocked2(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',576).
%~ From E:
%~ 
%~ holds(not(blocked2()),0)
initially( not blocked2()).
 %  initial_state([not(blocked2)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',578).
% Happens(Start(),0).
%~ From E:
%~ 
%~ happens(start(),0)
observe( start()at 0).
 %  observe([start],0).
 %  % =================================.


% Happens(Close2(),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',578).
%~ From E:
%~ 
%~ happens(close2(),1)
observe( close2()at 1).
 %  observe([close2],1).
 %  % =================================.

% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',580).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',583).
% range time 0 2
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,2)))
:-( call_pel_directive( range(time,0,2))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',583).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/BusRide.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; \fullciteA[pp. 359--361]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; timestamps
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',628).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',628).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',631).
% fluent HasTicket()
%~ From E:
%~ 
%~ fluent(hasTicket())
%~ cpc :- fluents([hasTicket/0])
%~ ooo :- [   cl([fluents([hasTicket/0])],[])]
%~ cpc :- mpred_prop(hasTicket(),fluent)
%~ ooo :- [   cl([mpred_prop(hasTicket(),fluent)],[])]
cl(mpred_prop(hasTicket(),fluent),[]),cl((fluents hasTicket/0),[]).
 %  cl(mpred_prop(hasTicket,fluent),[]),cl(fluents(hasTicket/0),[]).
 %  % =================================.

% fluent OnRed()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',631).
%~ From E:
%~ 
%~ fluent(onRed())
%~ cpc :- fluents([onRed/0])
%~ ooo :- [   cl([fluents([onRed/0])],[])]
%~ cpc :- mpred_prop(onRed(),fluent)
%~ ooo :- [   cl([mpred_prop(onRed(),fluent)],[])]
cl(mpred_prop(onRed(),fluent),[]),cl((fluents onRed/0),[]).
 %  cl(mpred_prop(onRed,fluent),[]),cl(fluents(onRed/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',633).
% fluent OnYellow()
%~ From E:
%~ 
%~ fluent(onYellow())
%~ cpc :- fluents([onYellow/0])
%~ ooo :- [   cl([fluents([onYellow/0])],[])]
%~ cpc :- mpred_prop(onYellow(),fluent)
%~ ooo :- [   cl([mpred_prop(onYellow(),fluent)],[])]
cl(mpred_prop(onYellow(),fluent),[]),cl((fluents onYellow/0),[]).
 %  cl(mpred_prop(onYellow,fluent),[]),cl(fluents(onYellow/0),[]).
 %  % =================================.

% event Buy()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',633).
%~ From E:
%~ 
%~ event(buy())
%~ cpc :- events([buy/0])
%~ ooo :- [   cl([events([buy/0])],[])]
%~ cpc :- mpred_prop(buy(),event)
%~ ooo :- [   cl([mpred_prop(buy(),event)],[])]
cl(mpred_prop(buy(),event),[]),cl((events buy/0),[]).
 %  cl(mpred_prop(buy,event),[]),cl(events(buy/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',635).
% event Board()
%~ From E:
%~ 
%~ event(board())
%~ cpc :- events([board/0])
%~ ooo :- [   cl([events([board/0])],[])]
%~ cpc :- mpred_prop(board(),event)
%~ ooo :- [   cl([mpred_prop(board(),event)],[])]
cl(mpred_prop(board(),event),[]),cl((events board/0),[]).
 %  cl(mpred_prop(board,event),[]),cl(events(board/0),[]).
 %  % =================================.

% event BoardRed()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',635).
%~ From E:
%~ 
%~ event(boardRed())
%~ cpc :- events([boardRed/0])
%~ ooo :- [   cl([events([boardRed/0])],[])]
%~ cpc :- mpred_prop(boardRed(),event)
%~ ooo :- [   cl([mpred_prop(boardRed(),event)],[])]
cl(mpred_prop(boardRed(),event),[]),cl((events boardRed/0),[]).
 %  cl(mpred_prop(boardRed,event),[]),cl(events(boardRed/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',637).
% event BoardYellow()
%~ From E:
%~ 
%~ event(boardYellow())
%~ cpc :- events([boardYellow/0])
%~ ooo :- [   cl([events([boardYellow/0])],[])]
%~ cpc :- mpred_prop(boardYellow(),event)
%~ ooo :- [   cl([mpred_prop(boardYellow(),event)],[])]
cl(mpred_prop(boardYellow(),event),[]),cl((events boardYellow/0),[]).
 %  cl(mpred_prop(boardYellow,event),[]),cl(events(boardYellow/0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',639).
% [time]
 % Happens(Board(),time) -> Happens(BoardRed(),time) | Happens(BoardYellow(),time).
%~ From E:
%~ 
%~ happens(board(),Time) ->         happens(boardRed(),Time);happens(boardYellow(),Time)
%~ cpc :- happens(board(),Time) ->         happens(boardRed(),Time);happens(boardYellow(),Time)
%~ ooo :- [   cl(    [   happens(boardRed(),Time),     happens(boardYellow(),Time)],       [      happens(board(),Time)])]
cl((happens(boardRed(),Time),happens(boardYellow(),Time)),happens(board(),Time)).
 %  cl((happens(boardRed,Time),happens(boardYellow,Time)),happens(board,Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',641).
% [time]
 % Initiates(Buy(),HasTicket(),time).
%~ From E:
%~ 
%~ initiates_at(buy(),hasTicket(),Time)
%~ cpc :- initiates(buy(),hasTicket(),Time)
%~ ooo :- [   cl([initiates(buy(),hasTicket(),Time)],[])]
cl(initiates(buy(),hasTicket(),Time),[]).
 %  cl(initiates(buy,hasTicket,Time),[]).
 %  % =================================.


% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardRed(),OnRed(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',641).
%~ From E:
%~ 
%~ holds(hasTicket(),Time) ->         initiates_at(boardRed(),onRed(),Time)
%~ cpc :- holds(hasTicket(),Time)
%~ ooo :- [   cl([holds(hasTicket(),Time)],[])]
%~ cpc :- if(initiates(boardRed(),at(onRed(),Time)),cl([holds(hasTicket(),Time)],[]))
%~ ooo :- [   cl(    [   if(initiates(boardRed(),at(onRed(),Time)),cl([holds(hasTicket(),Time)],[]))],       [])]
cl((boardRed()initiates onRed()at Time if cl(holds(hasTicket(),Time),[])),[]).
 %  cl(if(initiates(boardRed,at(onRed,Time)),cl(holds(hasTicket,Time),[])),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',643).
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardYellow(),OnYellow(),time).
%~ From E:
%~ 
%~ holds(hasTicket(),Time) ->         initiates_at(boardYellow(),onYellow(),Time)
%~ cpc :- holds(hasTicket(),Time)
%~ ooo :- [   cl([holds(hasTicket(),Time)],[])]
%~ cpc :- if(initiates(boardYellow(),at(onYellow(),Time)),cl([holds(hasTicket(),Time)],[]))
%~ ooo :- [   cl(    [   if(initiates(boardYellow(),at(onYellow(),Time)),cl([holds(hasTicket(),Time)],[]))],       [])]
cl((boardYellow()initiates onYellow()at Time if cl(holds(hasTicket(),Time),[])),[]).
 %  cl(if(initiates(boardYellow,at(onYellow,Time)),cl(holds(hasTicket,Time),[])),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',645).
% [time]
 % !(HoldsAt(OnRed(),time) & HoldsAt(OnYellow(),time)).
%~ From E:
%~ 
%~ not( holds(onRed(),Time),holds(onYellow(),Time))
%~ cpc :- not( holds(onRed(),Time),holds(onYellow(),Time))
%~ ooo :- [   cl([],[holds(onRed(),Time),holds(onYellow(),Time)])]
cl([],(holds(onRed(),Time),holds(onYellow(),Time))).
 %  cl([],(holds(onRed,Time),holds(onYellow,Time))).
 %  % =================================.


% [time]
 % HoldsAt(OnRed(),time) -> HoldsAt(HasTicket(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',645).
%~ From E:
%~ 
%~ holds(onRed(),Time) ->         holds(hasTicket(),Time)
%~ cpc :- holds(onRed(),Time) ->         holds(hasTicket(),Time)
%~ ooo :- [   cl([holds(hasTicket(),Time)],[holds(onRed(),Time)])]
cl(holds(hasTicket(),Time),holds(onRed(),Time)).
 %  cl(holds(hasTicket,Time),holds(onRed,Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',647).
% [time]
 % HoldsAt(OnYellow(),time) -> HoldsAt(HasTicket(),time).
%~ From E:
%~ 
%~ holds(onYellow(),Time) ->         holds(hasTicket(),Time)
%~ cpc :- holds(onYellow(),Time) ->         holds(hasTicket(),Time)
%~ ooo :- [   cl([holds(hasTicket(),Time)],[holds(onYellow(),Time)])]
cl(holds(hasTicket(),Time),holds(onYellow(),Time)).
 %  cl(holds(hasTicket,Time),holds(onYellow,Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',649).
% HoldsAt(OnRed(),2).
%~ From E:
%~ 
%~ holds(onRed(),2)
holds(onRed(),2).
 %  l_int(holds(onRed,2),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',651).
% !HoldsAt(HasTicket(),0).
%~ From E:
%~ 
%~ holds(not(hasTicket()),0)
initially( not hasTicket()).
 %  initial_state([not(hasTicket)]).
 %  % =================================.


% Happens(Buy(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',651).
%~ From E:
%~ 
%~ happens(buy(),0)
observe( buy()at 0).
 %  observe([buy],0).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',653).
% Happens(Board(),1).
%~ From E:
%~ 
%~ happens(board(),1)
observe( board()at 1).
 %  observe([board],1).
 %  % =================================.


%; ABDUCED Happens(BoardRed(), 1).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',656).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',658).
% range time 0 2
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,2)))
:-( call_pel_directive( range(time,0,2))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',658).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/DeadOrAlive.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 324]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',696).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',696).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',699).
% event Load()
%~ From E:
%~ 
%~ event(load())
%~ cpc :- events([load/0])
%~ ooo :- [   cl([events([load/0])],[])]
%~ cpc :- mpred_prop(load(),event)
%~ ooo :- [   cl([mpred_prop(load(),event)],[])]
cl(mpred_prop(load(),event),[]),cl((events load/0),[]).
 %  cl(mpred_prop(load,event),[]),cl(events(load/0),[]).
 %  % =================================.

% event Shoot()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',699).
%~ From E:
%~ 
%~ event(shoot())
%~ cpc :- events([shoot/0])
%~ ooo :- [   cl([events([shoot/0])],[])]
%~ cpc :- mpred_prop(shoot(),event)
%~ ooo :- [   cl([mpred_prop(shoot(),event)],[])]
cl(mpred_prop(shoot(),event),[]),cl((events shoot/0),[]).
 %  cl(mpred_prop(shoot,event),[]),cl(events(shoot/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',701).
% event Sneeze()
%~ From E:
%~ 
%~ event(sneeze())
%~ cpc :- events([sneeze/0])
%~ ooo :- [   cl([events([sneeze/0])],[])]
%~ cpc :- mpred_prop(sneeze(),event)
%~ ooo :- [   cl([mpred_prop(sneeze(),event)],[])]
cl(mpred_prop(sneeze(),event),[]),cl((events sneeze/0),[]).
 %  cl(mpred_prop(sneeze,event),[]),cl(events(sneeze/0),[]).
 %  % =================================.

% fluent Loaded()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',701).
%~ From E:
%~ 
%~ fluent(loaded())
%~ cpc :- fluents([loaded/0])
%~ ooo :- [   cl([fluents([loaded/0])],[])]
%~ cpc :- mpred_prop(loaded(),fluent)
%~ ooo :- [   cl([mpred_prop(loaded(),fluent)],[])]
cl(mpred_prop(loaded(),fluent),[]),cl((fluents loaded/0),[]).
 %  cl(mpred_prop(loaded,fluent),[]),cl(fluents(loaded/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',703).
% fluent Alive()
%~ From E:
%~ 
%~ fluent(alive())
%~ cpc :- fluents([alive/0])
%~ ooo :- [   cl([fluents([alive/0])],[])]
%~ cpc :- mpred_prop(alive(),fluent)
%~ ooo :- [   cl([mpred_prop(alive(),fluent)],[])]
cl(mpred_prop(alive(),fluent),[]),cl((fluents alive/0),[]).
 %  cl(mpred_prop(alive,fluent),[]),cl(fluents(alive/0),[]).
 %  % =================================.

% fluent Dead()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',703).
%~ From E:
%~ 
%~ fluent(dead())
%~ cpc :- fluents([dead/0])
%~ ooo :- [   cl([fluents([dead/0])],[])]
%~ cpc :- mpred_prop(dead(),fluent)
%~ ooo :- [   cl([mpred_prop(dead(),fluent)],[])]
cl(mpred_prop(dead(),fluent),[]),cl((fluents dead/0),[]).
 %  cl(mpred_prop(dead,fluent),[]),cl(fluents(dead/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',705).
% noninertial Dead
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(dead)))
:-( call_pel_directive( noninertial(dead))).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',707).
% [time]
 % Initiates(Load(),Loaded(),time).
%~ From E:
%~ 
%~ initiates_at(load(),loaded(),Time)
%~ cpc :- initiates(load(),loaded(),Time)
%~ ooo :- [   cl([initiates(load(),loaded(),Time)],[])]
cl(initiates(load(),loaded(),Time),[]).
 %  cl(initiates(load,loaded,Time),[]).
 %  % =================================.


% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',707).
%~ From E:
%~ 
%~ holds(loaded(),Time) ->         terminates_at(shoot(),alive(),Time)
%~ cpc :- holds(loaded(),Time)
%~ ooo :- [   cl([holds(loaded(),Time)],[])]
%~ cpc :- if(terminates(shoot(),at(alive(),Time)),cl([holds(loaded(),Time)],[]))
%~ ooo :- [   cl([if(terminates(shoot(),at(alive(),Time)),cl([holds(loaded(),Time)],[]))],[])]
cl((shoot()terminates alive()at Time if cl(holds(loaded(),Time),[])),[]).
 %  cl(if(terminates(shoot,at(alive,Time)),cl(holds(loaded,Time),[])),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',709).
% [time]
 % Terminates(Shoot(),Loaded(),time).
%~ From E:
%~ 
%~ terminates_at(shoot(),loaded(),Time)
%~ cpc :- terminates(shoot(),loaded(),Time)
%~ ooo :- [   cl([terminates(shoot(),loaded(),Time)],[])]
cl(terminates(shoot(),loaded(),Time),[]).
 %  cl(terminates(shoot,loaded,Time),[]).
 %  % =================================.


% [time]
 % HoldsAt(Dead(),time) <-> !HoldsAt(Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',709).
%~ From E:
%~ 
%~ <->(holds(dead(),Time),holds(not(alive()),Time))
%~ cpc :- <->(holds(dead(),Time),holds(not(alive()),Time))
%~ ooo :- [   cl([],[holds(alive(),Time),holds(dead(),Time)]),     cl([holds(dead(),Time),holds(alive(),Time)],[])]
(     cl([],(holds(alive(),Time),holds(dead(),Time))) ,     cl((holds(dead(),Time),holds(alive(),Time)),[])).
 %  (     cl([],(holds(alive,Time),holds(dead,Time))) ,     cl((holds(dead,Time),holds(alive,Time)),[])).
 %  % =================================.


% HoldsAt(Alive(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',711).
%~ From E:
%~ 
%~ holds(alive(),0)
initially alive().
 %  initial_state([alive]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',713).
% !HoldsAt(Loaded(),0).
%~ From E:
%~ 
%~ holds(not(loaded()),0)
initially( not loaded()).
 %  initial_state([not(loaded)]).
 %  % =================================.


% Happens(Load(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',713).
%~ From E:
%~ 
%~ happens(load(),0)
observe( load()at 0).
 %  observe([load],0).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',715).
% Happens(Sneeze(),1).
%~ From E:
%~ 
%~ happens(sneeze(),1)
observe( sneeze()at 1).
 %  observe([sneeze],1).
 %  % =================================.


% Happens(Shoot(),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',715).
%~ From E:
%~ 
%~ happens(shoot(),2)
observe( shoot()at 2).
 %  observe([shoot],2).
 %  % =================================.

% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',717).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',720).
% range time 0 3
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,3)))
:-( call_pel_directive( range(time,0,3))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',720).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Supermarket.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[pp. 302--304]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; reformulated using the method of \fullciteA[pp. 460--461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; added:
%; !HoldsAt(Forwards(), 0).
%; !HoldsAt(Backwards(), 0).
%; !HoldsAt(Spinning(), 0).
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',774).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',774).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',777).
% event Push()
%~ From E:
%~ 
%~ event(push())
%~ cpc :- events([push/0])
%~ ooo :- [   cl([events([push/0])],[])]
%~ cpc :- mpred_prop(push(),event)
%~ ooo :- [   cl([mpred_prop(push(),event)],[])]
cl(mpred_prop(push(),event),[]),cl((events push/0),[]).
 %  cl(mpred_prop(push,event),[]),cl(events(push/0),[]).
 %  % =================================.

% event Pull()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',777).
%~ From E:
%~ 
%~ event(pull())
%~ cpc :- events([pull/0])
%~ ooo :- [   cl([events([pull/0])],[])]
%~ cpc :- mpred_prop(pull(),event)
%~ ooo :- [   cl([mpred_prop(pull(),event)],[])]
cl(mpred_prop(pull(),event),[]),cl((events pull/0),[]).
 %  cl(mpred_prop(pull,event),[]),cl(events(pull/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',779).
% fluent Forwards()
%~ From E:
%~ 
%~ fluent(forwards())
%~ cpc :- fluents([forwards/0])
%~ ooo :- [   cl([fluents([forwards/0])],[])]
%~ cpc :- mpred_prop(forwards(),fluent)
%~ ooo :- [   cl([mpred_prop(forwards(),fluent)],[])]
cl(mpred_prop(forwards(),fluent),[]),cl((fluents forwards/0),[]).
 %  cl(mpred_prop(forwards,fluent),[]),cl(fluents(forwards/0),[]).
 %  % =================================.

% fluent Backwards()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',779).
%~ From E:
%~ 
%~ fluent(backwards())
%~ cpc :- fluents([backwards/0])
%~ ooo :- [   cl([fluents([backwards/0])],[])]
%~ cpc :- mpred_prop(backwards(),fluent)
%~ ooo :- [   cl([mpred_prop(backwards(),fluent)],[])]
cl(mpred_prop(backwards(),fluent),[]),cl((fluents backwards/0),[]).
 %  cl(mpred_prop(backwards,fluent),[]),cl(fluents(backwards/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',781).
% fluent Spinning()
%~ From E:
%~ 
%~ fluent(spinning())
%~ cpc :- fluents([spinning/0])
%~ ooo :- [   cl([fluents([spinning/0])],[])]
%~ cpc :- mpred_prop(spinning(),fluent)
%~ ooo :- [   cl([mpred_prop(spinning(),fluent)],[])]
cl(mpred_prop(spinning(),fluent),[]),cl((fluents spinning/0),[]).
 %  cl(mpred_prop(spinning,fluent),[]),cl(fluents(spinning/0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',783).
% [time]
% !Happens(Pull(), time) ->
% Initiates(Push(), Forwards(), time).
%~ From E:
%~ 
%~ not(happens(pull(),Time)) ->         initiates_at(push(),forwards(),Time)
%~ cpc :- not(happens(pull(),Time))
%~ ooo :- [   cl([],[happens(pull(),Time)])]
%~ cpc :- if(initiates(push(),at(forwards(),Time)),cl([],[happens(pull(),Time)]))
%~ ooo :- [   cl([if(initiates(push(),at(forwards(),Time)),cl([],[happens(pull(),Time)]))],[])]
cl((push()initiates forwards()at Time if cl([],happens(pull(),Time))),[]).
 %  cl(if(initiates(push,at(forwards,Time)),cl([],happens(pull,Time))),[]).
 %  % =================================.


% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Backwards(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',788).
%~ From E:
%~ 
%~ not(happens(pull(),Time)) ->         terminates_at(push(),backwards(),Time)
%~ cpc :- not(happens(pull(),Time))
%~ ooo :- [   cl([],[happens(pull(),Time)])]
%~ cpc :- if(terminates(push(),at(backwards(),Time)),cl([],[happens(pull(),Time)]))
%~ ooo :- [   cl([if(terminates(push(),at(backwards(),Time)),cl([],[happens(pull(),Time)]))],[])]
cl((push()terminates backwards()at Time if cl([],happens(pull(),Time))),[]).
 %  cl(if(terminates(push,at(backwards,Time)),cl([],happens(pull,Time))),[]).
 %  % =================================.


% [time]
% !Happens(Push(), time) ->
% Initiates(Pull(), Backwards(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',792).
%~ From E:
%~ 
%~ not(happens(push(),Time)) ->         initiates_at(pull(),backwards(),Time)
%~ cpc :- not(happens(push(),Time))
%~ ooo :- [   cl([],[happens(push(),Time)])]
%~ cpc :- if(initiates(pull(),at(backwards(),Time)),cl([],[happens(push(),Time)]))
%~ ooo :- [   cl([if(initiates(pull(),at(backwards(),Time)),cl([],[happens(push(),Time)]))],[])]
cl((pull()initiates backwards()at Time if cl([],happens(push(),Time))),[]).
 %  cl(if(initiates(pull,at(backwards,Time)),cl([],happens(push,Time))),[]).
 %  % =================================.


% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',796).
%~ From E:
%~ 
%~ not(happens(push(),Time)) ->         terminates_at(pull(),forwards(),Time)
%~ cpc :- not(happens(push(),Time))
%~ ooo :- [   cl([],[happens(push(),Time)])]
%~ cpc :- if(terminates(pull(),at(forwards(),Time)),cl([],[happens(push(),Time)]))
%~ ooo :- [   cl([if(terminates(pull(),at(forwards(),Time)),cl([],[happens(push(),Time)]))],[])]
cl((pull()terminates forwards()at Time if cl([],happens(push(),Time))),[]).
 %  cl(if(terminates(pull,at(forwards,Time)),cl([],happens(push,Time))),[]).
 %  % =================================.


% [time]
% Happens(Push(), time) ->
% Initiates(Pull(), Spinning(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',800).
%~ From E:
%~ 
%~ happens(push(),Time) ->         initiates_at(pull(),spinning(),Time)
%~ cpc :- happens(push(),Time)
%~ ooo :- [   cl([happens(push(),Time)],[])]
%~ cpc :- if(initiates(pull(),at(spinning(),Time)),cl([happens(push(),Time)],[]))
%~ ooo :- [   cl([if(initiates(pull(),at(spinning(),Time)),cl([happens(push(),Time)],[]))],[])]
cl((pull()initiates spinning()at Time if cl(happens(push(),Time),[])),[]).
 %  cl(if(initiates(pull,at(spinning,Time)),cl(happens(push,Time),[])),[]).
 %  % =================================.


% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',804).
%~ From E:
%~ 
%~ happens(push(),Time) ->         terminates_at(pull(),forwards(),Time)
%~ cpc :- happens(push(),Time)
%~ ooo :- [   cl([happens(push(),Time)],[])]
%~ cpc :- if(terminates(pull(),at(forwards(),Time)),cl([happens(push(),Time)],[]))
%~ ooo :- [   cl([if(terminates(pull(),at(forwards(),Time)),cl([happens(push(),Time)],[]))],[])]
cl((pull()terminates forwards()at Time if cl(happens(push(),Time),[])),[]).
 %  cl(if(terminates(pull,at(forwards,Time)),cl(happens(push,Time),[])),[]).
 %  % =================================.


% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Backwards(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',808).
%~ From E:
%~ 
%~ happens(push(),Time) ->         terminates_at(pull(),backwards(),Time)
%~ cpc :- happens(push(),Time)
%~ ooo :- [   cl([happens(push(),Time)],[])]
%~ cpc :- if(terminates(pull(),at(backwards(),Time)),cl([happens(push(),Time)],[]))
%~ ooo :- [   cl([if(terminates(pull(),at(backwards(),Time)),cl([happens(push(),Time)],[]))],[])]
cl((pull()terminates backwards()at Time if cl(happens(push(),Time),[])),[]).
 %  cl(if(terminates(pull,at(backwards,Time)),cl(happens(push,Time),[])),[]).
 %  % =================================.


% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Spinning(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',812).
%~ From E:
%~ 
%~ not(happens(pull(),Time)) ->         terminates_at(push(),spinning(),Time)
%~ cpc :- not(happens(pull(),Time))
%~ ooo :- [   cl([],[happens(pull(),Time)])]
%~ cpc :- if(terminates(push(),at(spinning(),Time)),cl([],[happens(pull(),Time)]))
%~ ooo :- [   cl([if(terminates(push(),at(spinning(),Time)),cl([],[happens(pull(),Time)]))],[])]
cl((push()terminates spinning()at Time if cl([],happens(pull(),Time))),[]).
 %  cl(if(terminates(push,at(spinning,Time)),cl([],happens(pull,Time))),[]).
 %  % =================================.


% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Spinning(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',816).
%~ From E:
%~ 
%~ not(happens(push(),Time)) ->         terminates_at(pull(),spinning(),Time)
%~ cpc :- not(happens(push(),Time))
%~ ooo :- [   cl([],[happens(push(),Time)])]
%~ cpc :- if(terminates(pull(),at(spinning(),Time)),cl([],[happens(push(),Time)]))
%~ ooo :- [   cl([if(terminates(pull(),at(spinning(),Time)),cl([],[happens(push(),Time)]))],[])]
cl((pull()terminates spinning()at Time if cl([],happens(push(),Time))),[]).
 %  cl(if(terminates(pull,at(spinning,Time)),cl([],happens(push,Time))),[]).
 %  % =================================.


% !HoldsAt(Forwards(), 0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',818).
%~ From E:
%~ 
%~ holds(not(forwards()),0)
initially( not forwards()).
 %  initial_state([not(forwards)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',820).
% !HoldsAt(Backwards(), 0).
%~ From E:
%~ 
%~ holds(not(backwards()),0)
initially( not backwards()).
 %  initial_state([not(backwards)]).
 %  % =================================.


% !HoldsAt(Spinning(), 0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',820).
%~ From E:
%~ 
%~ holds(not(spinning()),0)
initially( not spinning()).
 %  initial_state([not(spinning)]).
 %  % =================================.


% Happens(Push(), 5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',822).
%~ From E:
%~ 
%~ happens(push(),5)
observe( push()at 5).
 %  observe([push],5).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',824).
% Happens(Pull(), 5).
%~ From E:
%~ 
%~ happens(pull(),5)
observe( pull()at 5).
 %  observe([pull],5).
 %  % =================================.


% Happens(Pull(), 10).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',824).
%~ From E:
%~ 
%~ happens(pull(),10)
observe( pull()at 10).
 %  observe([pull],10).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',826).
% Happens(Push(), 10).
%~ From E:
%~ 
%~ happens(push(),10)
observe( push()at 10).
 %  observe([push],10).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',828).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',830).
% range time 0 12
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,12)))
:-( call_pel_directive( range(time,0,12))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',830).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StolenCar.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Kautz:1986,
%;   author = "Henry A. Kautz",
%;   year = "1986",
%;   title = "The Logic of Persistence",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ifth \uppercase{N}ational \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "401--405",
%;   address = "Los Altos, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; \fullciteA[p. 359]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; abduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added !HoldsAt(CarParked(),0).
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',877).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',877).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',880).
% event Park()
%~ From E:
%~ 
%~ event(park())
%~ cpc :- events([park/0])
%~ ooo :- [   cl([events([park/0])],[])]
%~ cpc :- mpred_prop(park(),event)
%~ ooo :- [   cl([mpred_prop(park(),event)],[])]
cl(mpred_prop(park(),event),[]),cl((events park/0),[]).
 %  cl(mpred_prop(park,event),[]),cl(events(park/0),[]).
 %  % =================================.

% event Steal()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',880).
%~ From E:
%~ 
%~ event(steal())
%~ cpc :- events([steal/0])
%~ ooo :- [   cl([events([steal/0])],[])]
%~ cpc :- mpred_prop(steal(),event)
%~ ooo :- [   cl([mpred_prop(steal(),event)],[])]
cl(mpred_prop(steal(),event),[]),cl((events steal/0),[]).
 %  cl(mpred_prop(steal,event),[]),cl(events(steal/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',882).
% fluent CarParked()
%~ From E:
%~ 
%~ fluent(carParked())
%~ cpc :- fluents([carParked/0])
%~ ooo :- [   cl([fluents([carParked/0])],[])]
%~ cpc :- mpred_prop(carParked(),fluent)
%~ ooo :- [   cl([mpred_prop(carParked(),fluent)],[])]
cl(mpred_prop(carParked(),fluent),[]),cl((fluents carParked/0),[]).
 %  cl(mpred_prop(carParked,fluent),[]),cl(fluents(carParked/0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',884).
% [time]
 % Initiates(Park(),CarParked(),time).
%~ From E:
%~ 
%~ initiates_at(park(),carParked(),Time)
%~ cpc :- initiates(park(),carParked(),Time)
%~ ooo :- [   cl([initiates(park(),carParked(),Time)],[])]
cl(initiates(park(),carParked(),Time),[]).
 %  cl(initiates(park,carParked,Time),[]).
 %  % =================================.


% [time]
 % Terminates(Steal(),CarParked(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',884).
%~ From E:
%~ 
%~ terminates_at(steal(),carParked(),Time)
%~ cpc :- terminates(steal(),carParked(),Time)
%~ ooo :- [   cl([terminates(steal(),carParked(),Time)],[])]
cl(terminates(steal(),carParked(),Time),[]).
 %  cl(terminates(steal,carParked,Time),[]).
 %  % =================================.


% !HoldsAt(CarParked(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',886).
%~ From E:
%~ 
%~ holds(not(carParked()),0)
initially( not carParked()).
 %  initial_state([not(carParked)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',888).
% Happens(Park(),0).
%~ From E:
%~ 
%~ happens(park(),0)
observe( park()at 0).
 %  observe([park],0).
 %  % =================================.


%; ABDUCED Happens(Steal(), 1).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',890).
% !HoldsAt(CarParked(),2).
%~ From E:
%~ 
%~ holds(not(carParked()),2)
holds(not carParked(),2).
 %  l_int(holds(not(carParked),2),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',892).
% range time 0 2
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,2)))
:-( call_pel_directive( range(time,0,2))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',892).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/MillerShanahan2002/Bowl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',928).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',928).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',931).
% event LiftLeft()
%~ From E:
%~ 
%~ event(liftLeft())
%~ cpc :- events([liftLeft/0])
%~ ooo :- [   cl([events([liftLeft/0])],[])]
%~ cpc :- mpred_prop(liftLeft(),event)
%~ ooo :- [   cl([mpred_prop(liftLeft(),event)],[])]
cl(mpred_prop(liftLeft(),event),[]),cl((events liftLeft/0),[]).
 %  cl(mpred_prop(liftLeft,event),[]),cl(events(liftLeft/0),[]).
 %  % =================================.

% event LiftRight()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',931).
%~ From E:
%~ 
%~ event(liftRight())
%~ cpc :- events([liftRight/0])
%~ ooo :- [   cl([events([liftRight/0])],[])]
%~ cpc :- mpred_prop(liftRight(),event)
%~ ooo :- [   cl([mpred_prop(liftRight(),event)],[])]
cl(mpred_prop(liftRight(),event),[]),cl((events liftRight/0),[]).
 %  cl(mpred_prop(liftRight,event),[]),cl(events(liftRight/0),[]).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',933).
% fluent Spilt()
%~ From E:
%~ 
%~ fluent(spilt())
%~ cpc :- fluents([spilt/0])
%~ ooo :- [   cl([fluents([spilt/0])],[])]
%~ cpc :- mpred_prop(spilt(),fluent)
%~ ooo :- [   cl([mpred_prop(spilt(),fluent)],[])]
cl(mpred_prop(spilt(),fluent),[]),cl((fluents spilt/0),[]).
 %  cl(mpred_prop(spilt,fluent),[]),cl(fluents(spilt/0),[]).
 %  % =================================.

% fluent Raised()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',933).
%~ From E:
%~ 
%~ fluent(raised())
%~ cpc :- fluents([raised/0])
%~ ooo :- [   cl([fluents([raised/0])],[])]
%~ cpc :- mpred_prop(raised(),fluent)
%~ ooo :- [   cl([mpred_prop(raised(),fluent)],[])]
cl(mpred_prop(raised(),fluent),[]),cl((fluents raised/0),[]).
 %  cl(mpred_prop(raised,fluent),[]),cl(fluents(raised/0),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',936).
% [time]
% !Happens(LiftRight(), time) ->
% Initiates(LiftLeft(), Spilt(), time).
%~ From E:
%~ 
%~ not(happens(liftRight(),Time)) ->         initiates_at(liftLeft(),spilt(),Time)
%~ cpc :- not(happens(liftRight(),Time))
%~ ooo :- [   cl([],[happens(liftRight(),Time)])]
%~ cpc :- if(initiates(liftLeft(),at(spilt(),Time)),cl([],[happens(liftRight(),Time)]))
%~ ooo :- [   cl(    [   if(initiates(liftLeft(),at(spilt(),Time)),cl([],[happens(liftRight(),Time)]))],       [])]
cl((liftLeft()initiates spilt()at Time if cl([],happens(liftRight(),Time))),[]).
 %  cl(if(initiates(liftLeft,at(spilt,Time)),cl([],happens(liftRight,Time))),[]).
 %  % =================================.


% [time]
% !Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Spilt(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',941).
%~ From E:
%~ 
%~ not(happens(liftLeft(),Time)) ->         initiates_at(liftRight(),spilt(),Time)
%~ cpc :- not(happens(liftLeft(),Time))
%~ ooo :- [   cl([],[happens(liftLeft(),Time)])]
%~ cpc :- if(initiates(liftRight(),at(spilt(),Time)),cl([],[happens(liftLeft(),Time)]))
%~ ooo :- [   cl(    [   if(initiates(liftRight(),at(spilt(),Time)),cl([],[happens(liftLeft(),Time)]))],       [])]
cl((liftRight()initiates spilt()at Time if cl([],happens(liftLeft(),Time))),[]).
 %  cl(if(initiates(liftRight,at(spilt,Time)),cl([],happens(liftLeft,Time))),[]).
 %  % =================================.


% [time]
% Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Raised(), time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',945).
%~ From E:
%~ 
%~ happens(liftLeft(),Time) ->         initiates_at(liftRight(),raised(),Time)
%~ cpc :- happens(liftLeft(),Time)
%~ ooo :- [   cl([happens(liftLeft(),Time)],[])]
%~ cpc :- if(initiates(liftRight(),at(raised(),Time)),cl([happens(liftLeft(),Time)],[]))
%~ ooo :- [   cl(    [   if(initiates(liftRight(),at(raised(),Time)),cl([happens(liftLeft(),Time)],[]))],       [])]
cl((liftRight()initiates raised()at Time if cl(happens(liftLeft(),Time),[])),[]).
 %  cl(if(initiates(liftRight,at(raised,Time)),cl(happens(liftLeft,Time),[])),[]).
 %  % =================================.


% !HoldsAt(Spilt(), 0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',947).
%~ From E:
%~ 
%~ holds(not(spilt()),0)
initially( not spilt()).
 %  initial_state([not(spilt)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',949).
% !HoldsAt(Raised(), 0).
%~ From E:
%~ 
%~ holds(not(raised()),0)
initially( not raised()).
 %  initial_state([not(raised)]).
 %  % =================================.


% Happens(LiftLeft(), 2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',949).
%~ From E:
%~ 
%~ happens(liftLeft(),2)
observe( liftLeft()at 2).
 %  observe([liftLeft],2).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',951).
% Happens(LiftRight(), 2).
%~ From E:
%~ 
%~ happens(liftRight(),2)
observe( liftRight()at 2).
 %  observe([liftRight],2).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',953).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',955).
% range time 0 3
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,3)))
:-( call_pel_directive( range(time,0,3))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',955).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: showing that inconsistency results
%; without a cancellation rule
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1001).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1001).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1004).
% sort x
%~ From E:
%~ 
%~ sort(x)
sort(x).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1006).
% predicate Republican(x)
%~ From E:
%~ 
%~ predicate( republican(x))
%~ cpc :- predicates([republican/1])
%~ ooo :- [   cl([predicates([republican/1])],[])]
%~ cpc :- mpred_prop(republican(x),predicate)
%~ ooo :- [   cl([mpred_prop(republican(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1006).
cl(mpred_prop(republican(x),predicate),[]),cl(predicates(republican/1),[]).

% predicate Quaker(x)
%~ From E:
%~ 
%~ predicate( quaker(x))
%~ cpc :- predicates([quaker/1])
%~ ooo :- [   cl([predicates([quaker/1])],[])]
%~ cpc :- mpred_prop(quaker(x),predicate)
%~ ooo :- [   cl([mpred_prop(quaker(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1006).
cl(mpred_prop(quaker(x),predicate),[]),cl(predicates(quaker/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1008).
% predicate Pacifist(x)
%~ From E:
%~ 
%~ predicate( pacifist(x))
%~ cpc :- predicates([pacifist/1])
%~ ooo :- [   cl([predicates([pacifist/1])],[])]
%~ cpc :- mpred_prop(pacifist(x),predicate)
%~ ooo :- [   cl([mpred_prop(pacifist(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1008).
cl(mpred_prop(pacifist(x),predicate),[]),cl(predicates(pacifist/1),[]).

% predicate Ab1(x)
%~ From E:
%~ 
%~ predicate( ab1(x))
%~ cpc :- predicates([ab1/1])
%~ ooo :- [   cl([predicates([ab1/1])],[])]
%~ cpc :- mpred_prop(ab1(x),predicate)
%~ ooo :- [   cl([mpred_prop(ab1(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1008).
cl(mpred_prop(ab1(x),predicate),[]),cl(predicates(ab1/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1010).
% predicate Ab2(x)
%~ From E:
%~ 
%~ predicate( ab2(x))
%~ cpc :- predicates([ab2/1])
%~ ooo :- [   cl([predicates([ab2/1])],[])]
%~ cpc :- mpred_prop(ab2(x),predicate)
%~ ooo :- [   cl([mpred_prop(ab2(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1010).
cl(mpred_prop(ab2(x),predicate),[]),cl(predicates(ab2/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1012).
% x John
%~ From E:
%~ 
%~ t(x,john)
isa(john,x).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1014).
% Republican(John).
%~ From E:
%~ 
%~ republican(john)
republican(john).


% Quaker(John).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1014).
%~ From E:
%~ 
%~ quaker(john)
quaker(john).


% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1016).
%~ From E:
%~ 
%~ republican(X),not(ab1(X)) ->         not(pacifist(X))
%~ cpc :- republican(X),not(ab1(X)) ->         not(pacifist(X))
%~ ooo :- [   cl([ab1(X)],[pacifist(X),republican(X)])]
cl(ab1(X),(pacifist(X),republican(X))).
 %  cl(ab1(X),(pacifist(X),republican(X))).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1018).
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).
%~ From E:
%~ 
%~ quaker(X),not(ab2(X)) ->         pacifist(X)
%~ cpc :- quaker(X),not(ab2(X)) ->         pacifist(X)
%~ ooo :- [   cl([pacifist(X),ab2(X)],[quaker(X)])]
cl((pacifist(X),ab2(X)),quaker(X)).
 %  cl((pacifist(X),ab2(X)),quaker(X)).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1020).
% range time 0 0
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,0)))
:-( call_pel_directive( range(time,0,0))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1020).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1023).
% completion Theta Ab1
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(theta)))
:-( call_pel_directive( completion(theta))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1023).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(ab1)))
:-( call_pel_directive( completion(ab1))).

% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1023).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(theta)))
:-( call_pel_directive( completion(theta))).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(ab2)))
:-( call_pel_directive( completion(ab2))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%; \fullciteA[p. 18]{BrewkaDixKonolige:1997}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1077).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1077).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1080).
% sort x
%~ From E:
%~ 
%~ sort(x)
sort(x).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1082).
% predicate Republican(x)
%~ From E:
%~ 
%~ predicate( republican(x))
%~ cpc :- predicates([republican/1])
%~ ooo :- [   cl([predicates([republican/1])],[])]
%~ cpc :- mpred_prop(republican(x),predicate)
%~ ooo :- [   cl([mpred_prop(republican(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1082).
cl(mpred_prop(republican(x),predicate),[]),cl(predicates(republican/1),[]).

% predicate Quaker(x)
%~ From E:
%~ 
%~ predicate( quaker(x))
%~ cpc :- predicates([quaker/1])
%~ ooo :- [   cl([predicates([quaker/1])],[])]
%~ cpc :- mpred_prop(quaker(x),predicate)
%~ ooo :- [   cl([mpred_prop(quaker(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1082).
cl(mpred_prop(quaker(x),predicate),[]),cl(predicates(quaker/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1084).
% predicate Pacifist(x)
%~ From E:
%~ 
%~ predicate( pacifist(x))
%~ cpc :- predicates([pacifist/1])
%~ ooo :- [   cl([predicates([pacifist/1])],[])]
%~ cpc :- mpred_prop(pacifist(x),predicate)
%~ ooo :- [   cl([mpred_prop(pacifist(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1084).
cl(mpred_prop(pacifist(x),predicate),[]),cl(predicates(pacifist/1),[]).

% predicate Ab1(x)
%~ From E:
%~ 
%~ predicate( ab1(x))
%~ cpc :- predicates([ab1/1])
%~ ooo :- [   cl([predicates([ab1/1])],[])]
%~ cpc :- mpred_prop(ab1(x),predicate)
%~ ooo :- [   cl([mpred_prop(ab1(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1084).
cl(mpred_prop(ab1(x),predicate),[]),cl(predicates(ab1/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1086).
% predicate Ab2(x)
%~ From E:
%~ 
%~ predicate( ab2(x))
%~ cpc :- predicates([ab2/1])
%~ ooo :- [   cl([predicates([ab2/1])],[])]
%~ cpc :- mpred_prop(ab2(x),predicate)
%~ ooo :- [   cl([mpred_prop(ab2(x),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1086).
cl(mpred_prop(ab2(x),predicate),[]),cl(predicates(ab2/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1088).
% x John
%~ From E:
%~ 
%~ t(x,john)
isa(john,x).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1090).
% Republican(John).
%~ From E:
%~ 
%~ republican(john)
republican(john).


% Quaker(John).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1090).
%~ From E:
%~ 
%~ quaker(john)
quaker(john).


% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1092).
%~ From E:
%~ 
%~ republican(X),not(ab1(X)) ->         not(pacifist(X))
%~ cpc :- republican(X),not(ab1(X)) ->         not(pacifist(X))
%~ ooo :- [   cl([ab1(X)],[pacifist(X),republican(X)])]
cl(ab1(X),(pacifist(X),republican(X))).
 %  cl(ab1(X),(pacifist(X),republican(X))).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1094).
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).
%~ From E:
%~ 
%~ quaker(X),not(ab2(X)) ->         pacifist(X)
%~ cpc :- quaker(X),not(ab2(X)) ->         pacifist(X)
%~ ooo :- [   cl([pacifist(X),ab2(X)],[quaker(X)])]
cl((pacifist(X),ab2(X)),quaker(X)).
 %  cl((pacifist(X),ab2(X)),quaker(X)).
 %  % =================================.

% Theta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1094).
%~ From E:
%~ 
%~ directive(theta)
directive(theta).
 


% [x]
 % Republican(x) -> Ab2(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1094).
%~ From E:
%~ 
%~ republican(X) ->         ab2(X)
%~ cpc :- republican(X) ->         ab2(X)
%~ ooo :- [   cl([ab2(X)],[republican(X)])]
cl(ab2(X),republican(X)).
 %  cl(ab2(X),republican(X)).
 %  % =================================.

% range time 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1096).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,0)))
:-( call_pel_directive( range(time,0,0))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1098).
% range offset 1 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1100).
% completion Theta Ab1
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(theta)))
:-( call_pel_directive( completion(theta))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1100).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(ab1)))
:-( call_pel_directive( completion(ab1))).

% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1100).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(theta)))
:-( call_pel_directive( completion(theta))).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(ab2)))
:-( call_pel_directive( completion(ab2))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1129).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1129).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1132).
% sort agent
%~ From E:
%~ 
%~ sort(agent)
sort(agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1134).
% agent Nathan
%~ From E:
%~ 
%~ t(agent,nathan)
isa(nathan,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1136).
% fluent Awake(agent)
%~ From E:
%~ 
%~ fluent( awake(agent))
%~ cpc :- fluents([awake/1])
%~ ooo :- [   cl([fluents([awake/1])],[])]
%~ cpc :- mpred_prop(awake(agent),fluent)
%~ ooo :- [   cl([mpred_prop(awake(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1136).
cl(mpred_prop(awake(agent),fluent),[]),cl(fluents(awake/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1138).
% event WakeUp(agent)
%~ From E:
%~ 
%~ event( wakeUp(agent))
%~ cpc :- events([wakeUp/1])
%~ ooo :- [   cl([events([wakeUp/1])],[])]
%~ cpc :- actions([wakeUp/1])
%~ ooo :- [   cl([actions([wakeUp/1])],[])]
%~ cpc :- mpred_prop(wakeUp(agent),action)
%~ ooo :- [   cl([mpred_prop(wakeUp(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1138).
( cl(events(wakeUp/1),[])  ,    cl(mpred_prop(wakeUp(agent),action),[]) ,     cl(actions(wakeUp/1),[])).

% event FallAsleep(agent)
%~ From E:
%~ 
%~ event( fallAsleep(agent))
%~ cpc :- events([fallAsleep/1])
%~ ooo :- [   cl([events([fallAsleep/1])],[])]
%~ cpc :- actions([fallAsleep/1])
%~ ooo :- [   cl([actions([fallAsleep/1])],[])]
%~ cpc :- mpred_prop(fallAsleep(agent),action)
%~ ooo :- [   cl([mpred_prop(fallAsleep(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1138).
( cl(events(fallAsleep/1),[])  ,    cl(mpred_prop(fallAsleep(agent),action),[]) ,     cl(actions(fallAsleep/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1141).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1143).
%~ From E:
%~ 
%~ initiates_at(wakeUp(Agent),awake(Agent),Time)
%~ cpc :- initiates(wakeUp(Agent),awake(Agent),Time)
%~ ooo :- [   cl([initiates(wakeUp(Agent),awake(Agent),Time)],[])]
cl(initiates(wakeUp(Agent),awake(Agent),Time),[]).
 %  cl(initiates(wakeUp(Agent),awake(Agent),Time),[]).
 %  % =================================.


% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1143).
%~ From E:
%~ 
%~ terminates_at(fallAsleep(Agent),awake(Agent),Time)
%~ cpc :- terminates(fallAsleep(Agent),awake(Agent),Time)
%~ ooo :- [   cl([terminates(fallAsleep(Agent),awake(Agent),Time)],[])]
cl(terminates(fallAsleep(Agent),awake(Agent),Time),[]).
 %  cl(terminates(fallAsleep(Agent),awake(Agent),Time),[]).
 %  % =================================.


%; Gamma


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1148).
% !HoldsAt(Awake(Nathan),0).
%~ From E:
%~ 
%~ holds(not(awake(nathan)),0)
initially( not awake(nathan)).
 %  initial_state([not(awake(nathan))]).
 %  % =================================.


% HoldsAt(Awake(Nathan),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1148).
%~ From E:
%~ 
%~ holds(awake(nathan),1)
holds(awake(nathan),1).
 %  l_int(holds(awake(nathan),1),[]).
 %  % =================================.


%; abduced:
%; Happens(WakeUp(Nathan),0).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1154).
% range time 0 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,1)))
:-( call_pel_directive( range(time,0,1))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1154).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1183).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1183).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1186).
% sort agent
%~ From E:
%~ 
%~ sort(agent)
sort(agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1188).
% agent Nathan
%~ From E:
%~ 
%~ t(agent,nathan)
isa(nathan,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1190).
% fluent Awake(agent)
%~ From E:
%~ 
%~ fluent( awake(agent))
%~ cpc :- fluents([awake/1])
%~ ooo :- [   cl([fluents([awake/1])],[])]
%~ cpc :- mpred_prop(awake(agent),fluent)
%~ ooo :- [   cl([mpred_prop(awake(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1190).
cl(mpred_prop(awake(agent),fluent),[]),cl(fluents(awake/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1192).
% event WakeUp(agent)
%~ From E:
%~ 
%~ event( wakeUp(agent))
%~ cpc :- events([wakeUp/1])
%~ ooo :- [   cl([events([wakeUp/1])],[])]
%~ cpc :- actions([wakeUp/1])
%~ ooo :- [   cl([actions([wakeUp/1])],[])]
%~ cpc :- mpred_prop(wakeUp(agent),action)
%~ ooo :- [   cl([mpred_prop(wakeUp(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1192).
( cl(events(wakeUp/1),[])  ,    cl(mpred_prop(wakeUp(agent),action),[]) ,     cl(actions(wakeUp/1),[])).

% event FallAsleep(agent)
%~ From E:
%~ 
%~ event( fallAsleep(agent))
%~ cpc :- events([fallAsleep/1])
%~ ooo :- [   cl([events([fallAsleep/1])],[])]
%~ cpc :- actions([fallAsleep/1])
%~ ooo :- [   cl([actions([fallAsleep/1])],[])]
%~ cpc :- mpred_prop(fallAsleep(agent),action)
%~ ooo :- [   cl([mpred_prop(fallAsleep(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1192).
( cl(events(fallAsleep/1),[])  ,    cl(mpred_prop(fallAsleep(agent),action),[]) ,     cl(actions(fallAsleep/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1195).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1197).
%~ From E:
%~ 
%~ initiates_at(wakeUp(Agent),awake(Agent),Time)
%~ cpc :- initiates(wakeUp(Agent),awake(Agent),Time)
%~ ooo :- [   cl([initiates(wakeUp(Agent),awake(Agent),Time)],[])]
cl(initiates(wakeUp(Agent),awake(Agent),Time),[]).
 %  cl(initiates(wakeUp(Agent),awake(Agent),Time),[]).
 %  % =================================.


% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1197).
%~ From E:
%~ 
%~ terminates_at(fallAsleep(Agent),awake(Agent),Time)
%~ cpc :- terminates(fallAsleep(Agent),awake(Agent),Time)
%~ ooo :- [   cl([terminates(fallAsleep(Agent),awake(Agent),Time)],[])]
cl(terminates(fallAsleep(Agent),awake(Agent),Time),[]).
 %  cl(terminates(fallAsleep(Agent),awake(Agent),Time),[]).
 %  % =================================.


%; Delta


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1202).
% Happens(WakeUp(Nathan),1).
%~ From E:
%~ 
%~ happens(wakeUp(nathan),1)
observe( wakeUp(nathan)at 1).
 %  observe([wakeUp(nathan)],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1204).
%; Gamma


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1206).
% !HoldsAt(Awake(Nathan),0).
%~ From E:
%~ 
%~ holds(not(awake(nathan)),0)
initially( not awake(nathan)).
 %  initial_state([not(awake(nathan))]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1208).
%; entailed:
%; HoldsAt(Awake(Nathan),3).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1211).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1213).
% range time 0 3
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,3)))
:-( call_pel_directive( range(time,0,3))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1213).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1242).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1242).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1245).
% sort agent
%~ From E:
%~ 
%~ sort(agent)
sort(agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1247).
% agent Nathan
%~ From E:
%~ 
%~ t(agent,nathan)
isa(nathan,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1249).
% fluent Awake(agent)
%~ From E:
%~ 
%~ fluent( awake(agent))
%~ cpc :- fluents([awake/1])
%~ ooo :- [   cl([fluents([awake/1])],[])]
%~ cpc :- mpred_prop(awake(agent),fluent)
%~ ooo :- [   cl([mpred_prop(awake(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1249).
cl(mpred_prop(awake(agent),fluent),[]),cl(fluents(awake/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1251).
% event WakeUp(agent)
%~ From E:
%~ 
%~ event( wakeUp(agent))
%~ cpc :- events([wakeUp/1])
%~ ooo :- [   cl([events([wakeUp/1])],[])]
%~ cpc :- actions([wakeUp/1])
%~ ooo :- [   cl([actions([wakeUp/1])],[])]
%~ cpc :- mpred_prop(wakeUp(agent),action)
%~ ooo :- [   cl([mpred_prop(wakeUp(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1251).
( cl(events(wakeUp/1),[])  ,    cl(mpred_prop(wakeUp(agent),action),[]) ,     cl(actions(wakeUp/1),[])).

% event FallAsleep(agent)
%~ From E:
%~ 
%~ event( fallAsleep(agent))
%~ cpc :- events([fallAsleep/1])
%~ ooo :- [   cl([events([fallAsleep/1])],[])]
%~ cpc :- actions([fallAsleep/1])
%~ ooo :- [   cl([actions([fallAsleep/1])],[])]
%~ cpc :- mpred_prop(fallAsleep(agent),action)
%~ ooo :- [   cl([mpred_prop(fallAsleep(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1251).
( cl(events(fallAsleep/1),[])  ,    cl(mpred_prop(fallAsleep(agent),action),[]) ,     cl(actions(fallAsleep/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1254).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1256).
%~ From E:
%~ 
%~ initiates_at(wakeUp(Agent),awake(Agent),Time)
%~ cpc :- initiates(wakeUp(Agent),awake(Agent),Time)
%~ ooo :- [   cl([initiates(wakeUp(Agent),awake(Agent),Time)],[])]
cl(initiates(wakeUp(Agent),awake(Agent),Time),[]).
 %  cl(initiates(wakeUp(Agent),awake(Agent),Time),[]).
 %  % =================================.


% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1256).
%~ From E:
%~ 
%~ terminates_at(fallAsleep(Agent),awake(Agent),Time)
%~ cpc :- terminates(fallAsleep(Agent),awake(Agent),Time)
%~ ooo :- [   cl([terminates(fallAsleep(Agent),awake(Agent),Time)],[])]
cl(terminates(fallAsleep(Agent),awake(Agent),Time),[]).
 %  cl(terminates(fallAsleep(Agent),awake(Agent),Time),[]).
 %  % =================================.


%; Delta
% [agent,time]
% Happens(WakeUp(agent),time) ->
% !HoldsAt(Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1261).
%~ From E:
%~ 
%~ happens(wakeUp(Agent),Time) ->         holds(not(awake(Agent)),Time)
%~ cpc :- happens(wakeUp(Agent),Time) ->         holds(not(awake(Agent)),Time)
%~ ooo :- [   cl([],[holds(awake(Agent),Time),happens(wakeUp(Agent),Time)])]
cl([],(holds(awake(Agent),Time),happens(wakeUp(Agent),Time))).
 %  cl([],(holds(awake(Agent),Time),happens(wakeUp(Agent),Time))).
 %  % =================================.


% Happens(WakeUp(Nathan),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1264).
%~ From E:
%~ 
%~ happens(wakeUp(nathan),0)
observe( wakeUp(nathan)at 0).
 %  observe([wakeUp(nathan)],0).
 %  % =================================.


%; Gamma


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1269).
% HoldsAt(Awake(Nathan),1).
%~ From E:
%~ 
%~ holds(awake(nathan),1)
holds(awake(nathan),1).
 %  l_int(holds(awake(nathan),1),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1271).
%; inferred:
%; !HoldsAt(Awake(Nathan),0).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1274).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1276).
% range time 0 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,1)))
:-( call_pel_directive( range(time,0,1))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1276).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1305).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1305).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1308).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1308).
%~ From E:
%~ 
%~ t(object,o1)
isa(o1,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1311).
% fluent F(object)
%~ From E:
%~ 
%~ fluent( f(object))
%~ cpc :- fluents([f/1])
%~ ooo :- [   cl([fluents([f/1])],[])]
%~ cpc :- mpred_prop(f(object),fluent)
%~ ooo :- [   cl([mpred_prop(f(object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1311).
cl(mpred_prop(f(object),fluent),[]),cl(fluents(f/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1313).
% event E(object)
%~ From E:
%~ 
%~ event( e(object))
%~ cpc :- events([e/1])
%~ ooo :- [   cl([events([e/1])],[])]
%~ cpc :- mpred_prop(e(object),event)
%~ ooo :- [   cl([mpred_prop(e(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1313).
cl(mpred_prop(e(object),event),[]),cl(events(e/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1315).
% [object,time]
 % Releases(E(object),F(object),time).
%~ From E:
%~ 
%~ releases_at(e(Object),f(Object),Time)
%~ cpc :- releases(e(Object),f(Object),Time)
%~ ooo :- [   cl([releases(e(Object),f(Object),Time)],[])]
cl(releases(e(Object),f(Object),Time),[]).
 %  cl(releases(e(Object),f(Object),Time),[]).
 %  % =================================.


% [object,time]
 % Terminates(E(object),F(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1315).
%~ From E:
%~ 
%~ terminates_at(e(Object),f(Object),Time)
%~ cpc :- terminates(e(Object),f(Object),Time)
%~ ooo :- [   cl([terminates(e(Object),f(Object),Time)],[])]
cl(terminates(e(Object),f(Object),Time),[]).
 %  cl(terminates(e(Object),f(Object),Time),[]).
 %  % =================================.


% Happens(E(O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1317).
%~ From E:
%~ 
%~ happens(e(o1),0)
observe( e(o1)at 0).
 %  observe([e(o1)],0).
 %  % =================================.

% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1319).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,1)))
:-( call_pel_directive( range(time,0,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1321).
% range offset 1 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1349).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1349).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1352).
% sort agent
%~ From E:
%~ 
%~ sort(agent)
sort(agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1354).
% agent Nathan
%~ From E:
%~ 
%~ t(agent,nathan)
isa(nathan,agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1356).
% fluent Awake(agent)
%~ From E:
%~ 
%~ fluent( awake(agent))
%~ cpc :- fluents([awake/1])
%~ ooo :- [   cl([fluents([awake/1])],[])]
%~ cpc :- mpred_prop(awake(agent),fluent)
%~ ooo :- [   cl([mpred_prop(awake(agent),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1356).
cl(mpred_prop(awake(agent),fluent),[]),cl(fluents(awake/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1358).
% event WakeUp(agent)
%~ From E:
%~ 
%~ event( wakeUp(agent))
%~ cpc :- events([wakeUp/1])
%~ ooo :- [   cl([events([wakeUp/1])],[])]
%~ cpc :- actions([wakeUp/1])
%~ ooo :- [   cl([actions([wakeUp/1])],[])]
%~ cpc :- mpred_prop(wakeUp(agent),action)
%~ ooo :- [   cl([mpred_prop(wakeUp(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1358).
( cl(events(wakeUp/1),[])  ,    cl(mpred_prop(wakeUp(agent),action),[]) ,     cl(actions(wakeUp/1),[])).

% event FallAsleep(agent)
%~ From E:
%~ 
%~ event( fallAsleep(agent))
%~ cpc :- events([fallAsleep/1])
%~ ooo :- [   cl([events([fallAsleep/1])],[])]
%~ cpc :- actions([fallAsleep/1])
%~ ooo :- [   cl([actions([fallAsleep/1])],[])]
%~ cpc :- mpred_prop(fallAsleep(agent),action)
%~ ooo :- [   cl([mpred_prop(fallAsleep(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1358).
( cl(events(fallAsleep/1),[])  ,    cl(mpred_prop(fallAsleep(agent),action),[]) ,     cl(actions(fallAsleep/1),[])).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1361).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1363).
%~ From E:
%~ 
%~ initiates_at(wakeUp(Agent),awake(Agent),Time)
%~ cpc :- initiates(wakeUp(Agent),awake(Agent),Time)
%~ ooo :- [   cl([initiates(wakeUp(Agent),awake(Agent),Time)],[])]
cl(initiates(wakeUp(Agent),awake(Agent),Time),[]).
 %  cl(initiates(wakeUp(Agent),awake(Agent),Time),[]).
 %  % =================================.


% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1363).
%~ From E:
%~ 
%~ terminates_at(fallAsleep(Agent),awake(Agent),Time)
%~ cpc :- terminates(fallAsleep(Agent),awake(Agent),Time)
%~ ooo :- [   cl([terminates(fallAsleep(Agent),awake(Agent),Time)],[])]
cl(terminates(fallAsleep(Agent),awake(Agent),Time),[]).
 %  cl(terminates(fallAsleep(Agent),awake(Agent),Time),[]).
 %  % =================================.


%; Delta


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1368).
% Happens(WakeUp(Nathan),1).
%~ From E:
%~ 
%~ happens(wakeUp(nathan),1)
observe( wakeUp(nathan)at 1).
 %  observe([wakeUp(nathan)],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1370).
%; entailed:
%; HoldsAt(Awake(Nathan),3).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1373).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1375).
% range time 0 3
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,3)))
:-( call_pel_directive( range(time,0,3))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1375).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1404).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1404).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1407).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1407).
%~ From E:
%~ 
%~ t(object,o1)
isa(o1,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1410).
% event E(object)
%~ From E:
%~ 
%~ event( e(object))
%~ cpc :- events([e/1])
%~ ooo :- [   cl([events([e/1])],[])]
%~ cpc :- mpred_prop(e(object),event)
%~ ooo :- [   cl([mpred_prop(e(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1410).
cl(mpred_prop(e(object),event),[]),cl(events(e/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1412).
% fluent F1(object)
%~ From E:
%~ 
%~ fluent( f1(object))
%~ cpc :- fluents([f1/1])
%~ ooo :- [   cl([fluents([f1/1])],[])]
%~ cpc :- mpred_prop(f1(object),fluent)
%~ ooo :- [   cl([mpred_prop(f1(object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1412).
cl(mpred_prop(f1(object),fluent),[]),cl(fluents(f1/1),[]).

% fluent F2(object)
%~ From E:
%~ 
%~ fluent( f2(object))
%~ cpc :- fluents([f2/1])
%~ ooo :- [   cl([fluents([f2/1])],[])]
%~ cpc :- mpred_prop(f2(object),fluent)
%~ ooo :- [   cl([mpred_prop(f2(object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1412).
cl(mpred_prop(f2(object),fluent),[]),cl(fluents(f2/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1415).
% [object,time]
% Initiates(E(object),F1(object),time).
%~ From E:
%~ 
%~ initiates_at(e(Object),f1(Object),Time)
%~ cpc :- initiates(e(Object),f1(Object),Time)
%~ ooo :- [   cl([initiates(e(Object),f1(Object),Time)],[])]
cl(initiates(e(Object),f1(Object),Time),[]).
 %  cl(initiates(e(Object),f1(Object),Time),[]).
 %  % =================================.


% [object,time]
% HoldsAt(F1(object),time) <-> HoldsAt(F2(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1419).
%~ From E:
%~ 
%~ <->(holds(f1(Object),Time),holds(f2(Object),Time))
%~ cpc :- <->(holds(f1(Object),Time),holds(f2(Object),Time))
%~ ooo :- [   cl([holds(f2(Object),Time)],[holds(f1(Object),Time)]),     cl([holds(f1(Object),Time)],[holds(f2(Object),Time)])]
(     cl(holds(f2(Object),Time),holds(f1(Object),Time)) ,     cl(holds(f1(Object),Time),holds(f2(Object),Time))).
 %  (     cl(holds(f2(Object),Time),holds(f1(Object),Time)) ,     cl(holds(f1(Object),Time),holds(f2(Object),Time))).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1421).
% !HoldsAt(F2(O1),0).
%~ From E:
%~ 
%~ holds(not(f2(o1)),0)
initially( not f2(o1)).
 %  initial_state([not(f2(o1))]).
 %  % =================================.


% Happens(E(O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1421).
%~ From E:
%~ 
%~ happens(e(o1),0)
observe( e(o1)at 0).
 %  observe([e(o1)],0).
 %  % =================================.

% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1423).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,1)))
:-( call_pel_directive( range(time,0,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1425).
% range offset 1 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1453).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1453).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1456).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1456).
%~ From E:
%~ 
%~ t(object,o1)
isa(o1,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1459).
% fluent F(object)
%~ From E:
%~ 
%~ fluent( f(object))
%~ cpc :- fluents([f/1])
%~ ooo :- [   cl([fluents([f/1])],[])]
%~ cpc :- mpred_prop(f(object),fluent)
%~ ooo :- [   cl([mpred_prop(f(object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1459).
cl(mpred_prop(f(object),fluent),[]),cl(fluents(f/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1461).
% event E(object)
%~ From E:
%~ 
%~ event( e(object))
%~ cpc :- events([e/1])
%~ ooo :- [   cl([events([e/1])],[])]
%~ cpc :- mpred_prop(e(object),event)
%~ ooo :- [   cl([mpred_prop(e(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1461).
cl(mpred_prop(e(object),event),[]),cl(events(e/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1463).
% [object,time]
 % Initiates(E(object),F(object),time).
%~ From E:
%~ 
%~ initiates_at(e(Object),f(Object),Time)
%~ cpc :- initiates(e(Object),f(Object),Time)
%~ ooo :- [   cl([initiates(e(Object),f(Object),Time)],[])]
cl(initiates(e(Object),f(Object),Time),[]).
 %  cl(initiates(e(Object),f(Object),Time),[]).
 %  % =================================.


% [object,time]
 % Terminates(E(object),F(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1463).
%~ From E:
%~ 
%~ terminates_at(e(Object),f(Object),Time)
%~ cpc :- terminates(e(Object),f(Object),Time)
%~ ooo :- [   cl([terminates(e(Object),f(Object),Time)],[])]
cl(terminates(e(Object),f(Object),Time),[]).
 %  cl(terminates(e(Object),f(Object),Time),[]).
 %  % =================================.


% Happens(E(O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1465).
%~ From E:
%~ 
%~ happens(e(o1),0)
observe( e(o1)at 0).
 %  observe([e(o1)],0).
 %  % =================================.

% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1467).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,1)))
:-( call_pel_directive( range(time,0,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1469).
% range offset 1 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1497).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1497).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1500).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1500).
%~ From E:
%~ 
%~ t(object,o1)
isa(o1,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1503).
% fluent F(object)
%~ From E:
%~ 
%~ fluent( f(object))
%~ cpc :- fluents([f/1])
%~ ooo :- [   cl([fluents([f/1])],[])]
%~ cpc :- mpred_prop(f(object),fluent)
%~ ooo :- [   cl([mpred_prop(f(object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1503).
cl(mpred_prop(f(object),fluent),[]),cl(fluents(f/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1505).
% event E(object)
%~ From E:
%~ 
%~ event( e(object))
%~ cpc :- events([e/1])
%~ ooo :- [   cl([events([e/1])],[])]
%~ cpc :- mpred_prop(e(object),event)
%~ ooo :- [   cl([mpred_prop(e(object),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1505).
cl(mpred_prop(e(object),event),[]),cl(events(e/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1507).
% [object,time]
 % Releases(E(object),F(object),time).
%~ From E:
%~ 
%~ releases_at(e(Object),f(Object),Time)
%~ cpc :- releases(e(Object),f(Object),Time)
%~ ooo :- [   cl([releases(e(Object),f(Object),Time)],[])]
cl(releases(e(Object),f(Object),Time),[]).
 %  cl(releases(e(Object),f(Object),Time),[]).
 %  % =================================.


% [object,time]
 % Initiates(E(object),F(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1507).
%~ From E:
%~ 
%~ initiates_at(e(Object),f(Object),Time)
%~ cpc :- initiates(e(Object),f(Object),Time)
%~ ooo :- [   cl([initiates(e(Object),f(Object),Time)],[])]
cl(initiates(e(Object),f(Object),Time),[]).
 %  cl(initiates(e(Object),f(Object),Time),[]).
 %  % =================================.


% Happens(E(O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1509).
%~ From E:
%~ 
%~ happens(e(o1),0)
observe( e(o1)at 0).
 %  observe([e(o1)],0).
 %  % =================================.

% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1511).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,1)))
:-( call_pel_directive( range(time,0,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1513).
% range offset 1 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/CameraWithFlash.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1541).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1541).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1544).
% sort camera
%~ From E:
%~ 
%~ sort(camera)
sort(camera).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1546).
% camera Camera1
%~ From E:
%~ 
%~ t(camera,camera1)
isa(camera1,camera).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1548).
% fluent ProperlyExposedPicture(camera)
%~ From E:
%~ 
%~ fluent( properlyExposedPicture(camera))
%~ cpc :- fluents([properlyExposedPicture/1])
%~ ooo :- [   cl([fluents([properlyExposedPicture/1])],[])]
%~ cpc :- mpred_prop(properlyExposedPicture(camera),fluent)
%~ ooo :- [   cl([mpred_prop(properlyExposedPicture(camera),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1548).
cl(mpred_prop(properlyExposedPicture(camera),fluent),[]),cl(fluents(properlyExposedPicture/1),[]).

% fluent ImproperlyExposedPicture(camera)
%~ From E:
%~ 
%~ fluent( improperlyExposedPicture(camera))
%~ cpc :- fluents([improperlyExposedPicture/1])
%~ ooo :- [   cl([fluents([improperlyExposedPicture/1])],[])]
%~ cpc :- mpred_prop(improperlyExposedPicture(camera),fluent)
%~ ooo :- [   cl([mpred_prop(improperlyExposedPicture(camera),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1548).
cl(mpred_prop(improperlyExposedPicture(camera),fluent),[]),cl(fluents(improperlyExposedPicture/1),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1551).
% event ReleaseShutter(camera)
%~ From E:
%~ 
%~ event( releaseShutter(camera))
%~ cpc :- events([releaseShutter/1])
%~ ooo :- [   cl([events([releaseShutter/1])],[])]
%~ cpc :- mpred_prop(releaseShutter(camera),event)
%~ ooo :- [   cl([mpred_prop(releaseShutter(camera),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1551).
cl(mpred_prop(releaseShutter(camera),event),[]),cl(events(releaseShutter/1),[]).

% event TriggerFlash(camera)
%~ From E:
%~ 
%~ event( triggerFlash(camera))
%~ cpc :- events([triggerFlash/1])
%~ ooo :- [   cl([events([triggerFlash/1])],[])]
%~ cpc :- mpred_prop(triggerFlash(camera),event)
%~ ooo :- [   cl([mpred_prop(triggerFlash(camera),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1551).
cl(mpred_prop(triggerFlash(camera),event),[]),cl(events(triggerFlash/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1554).
%; Sigma
% [camera,time]
% Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ProperlyExposedPicture(camera),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1556).
%~ From E:
%~ 
%~ happens(triggerFlash(Camera),Time) ->         initiates_at(releaseShutter(Camera),properlyExposedPicture(Camera),Time)
%~ cpc :- happens(triggerFlash(Camera),Time)
%~ ooo :- [   cl([happens(triggerFlash(Camera),Time)],[])]
%~ cpc :- if(    initiates(releaseShutter(Camera),at(properlyExposedPicture(Camera),Time)),       cl([happens(triggerFlash(Camera),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates(releaseShutter(Camera),at(properlyExposedPicture(Camera),Time)),       cl([happens(triggerFlash(Camera),Time)],[]))],       [])]
cl(    (     releaseShutter(Camera)initiates properlyExposedPicture(Camera)at Time if     cl(happens(triggerFlash(Camera),Time),[])),       []).
 %  cl(    if(    initiates(releaseShutter(Camera),at(properlyExposedPicture(Camera),Time)),       cl(happens(triggerFlash(Camera),Time),[])),       []).
 %  % =================================.


% [camera,time]
% !Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ImproperlyExposedPicture(camera),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1561).
%~ From E:
%~ 
%~ not( happens(triggerFlash(Camera),Time)) ->         initiates_at(releaseShutter(Camera),improperlyExposedPicture(Camera),Time)
%~ cpc :- not( happens(triggerFlash(Camera),Time))
%~ ooo :- [   cl([],[happens(triggerFlash(Camera),Time)])]
%~ cpc :- if(    initiates(releaseShutter(Camera),at(improperlyExposedPicture(Camera),Time)),       cl([],[happens(triggerFlash(Camera),Time)]))
%~ ooo :- [   cl(    [   if(    initiates(releaseShutter(Camera),at(improperlyExposedPicture(Camera),Time)),       cl([],[happens(triggerFlash(Camera),Time)]))],       [])]
cl(    (     releaseShutter(Camera)initiates improperlyExposedPicture(Camera)at Time if     cl([],happens(triggerFlash(Camera),Time))),       []).
 %  cl(    if(    initiates(releaseShutter(Camera),at(improperlyExposedPicture(Camera),Time)),       cl([],happens(triggerFlash(Camera),Time))),       []).
 %  % =================================.


%; Delta

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1566).
% Delta: 
%~ From E:
%~ 
%~ directive(delta)
directive(delta).
 


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1566).
% Happens(ReleaseShutter(Camera1),0).
%~ From E:
%~ 
%~ happens(releaseShutter(camera1),0)
observe( releaseShutter(camera1)at 0).
 %  observe([releaseShutter(camera1)],0).
 %  % =================================.

% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1566).
%~ From E:
%~ 
%~ directive(delta)
directive(delta).
 


% Happens(TriggerFlash(Camera1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1566).
%~ From E:
%~ 
%~ happens(triggerFlash(camera1),1)
observe( triggerFlash(camera1)at 1).
 %  observe([triggerFlash(camera1)],1).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1568).
% Delta: 
%~ From E:
%~ 
%~ directive(delta)
directive(delta).
 


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1568).
% Happens(ReleaseShutter(Camera1),1).
%~ From E:
%~ 
%~ happens(releaseShutter(camera1),1)
observe( releaseShutter(camera1)at 1).
 %  observe([releaseShutter(camera1)],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1570).
%; added:
% [camera]
 % !HoldsAt(ImproperlyExposedPicture(camera),0).
%~ From E:
%~ 
%~ holds(not(improperlyExposedPicture(Camera)),0)
%~ cpc :- holds(not(improperlyExposedPicture(Camera)),0)
%~ ooo :- [   cl([],[holds(improperlyExposedPicture(Camera),0)])]
cl([],holds(improperlyExposedPicture(Camera),0)).
 %  cl([],holds(improperlyExposedPicture(Camera),0)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1572).
% [camera]
 % !HoldsAt(ProperlyExposedPicture(camera),0).
%~ From E:
%~ 
%~ holds(not(properlyExposedPicture(Camera)),0)
%~ cpc :- holds(not(properlyExposedPicture(Camera)),0)
%~ ooo :- [   cl([],[holds(properlyExposedPicture(Camera),0)])]
cl([],holds(properlyExposedPicture(Camera),0)).
 %  cl([],holds(properlyExposedPicture(Camera),0)).
 %  % =================================.

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1574).
% completion Delta Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(delta)))
:-( call_pel_directive( completion(delta))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1574).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1576).
% range time 0 2
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,2)))
:-( call_pel_directive( range(time,0,2))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1576).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/MovingRobot.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1996,
%;   author = "Murray Shanahan",
%;   year = "1996",
%;   title = "Robotics and the common sense informatic situation",
%;   editor = "Wolfgang Wahlster",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{T}welfth \uppercase{E}uropean \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "684--688",
%;   address = "Chichester, UK",
%;   publisher = "John Wiley",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1616).
% option renaming off
%~ From E:
%~ 
%~ :-( call_pel_directive( option(renaming,off)))
:-( call_pel_directive( option(renaming,off))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1618).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1618).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1621).
% sort coord: integer
%~ From E:
%~ 
%~ subsort(coord,integer)
subsort(coord,integer).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1623).
% sort direction: integer
%~ From E:
%~ 
%~ subsort(direction,integer)
subsort(direction,integer).
%; 0 -> 0, 1 -> 90, 2 -> 180, 3 -> 370

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1626).
% sort robot
%~ From E:
%~ 
%~ sort(robot)
sort(robot).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1628).
% robot Robot1
%~ From E:
%~ 
%~ t(robot,robot1)
isa(robot1,robot).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1630).
% function Sin(direction): coord
%~ From E:
%~ 
%~ function(sin(direction),coord)
function(sin(direction),coord).

% function Cos(direction): coord
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1630).
%~ From E:
%~ 
%~ function(cos(direction),coord)
function(cos(direction),coord).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1633).
% Sin(0)=0.
%~ From E:
%~ 
%~ sin(0) =         0
sin(0,0).


% Sin(1)=1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1633).
%~ From E:
%~ 
%~ sin(1) =         1
sin(1,1).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1635).
% Sin(2)=2.
%~ From E:
%~ 
%~ sin(2) =         2
sin(2,2).


% Sin(3)=3.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1635).
%~ From E:
%~ 
%~ sin(3) =         3
sin(3,3).


% Cos(0)=1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1637).
%~ From E:
%~ 
%~ cos(0) =         1
cos(0,1).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1639).
% Cos(1)=2.
%~ From E:
%~ 
%~ cos(1) =         2
cos(1,2).


% Cos(2)=3.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1639).
%~ From E:
%~ 
%~ cos(2) =         3
cos(2,3).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1641).
% Cos(3)=4.
%~ From E:
%~ 
%~ cos(3) =         4
cos(3,4).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1643).
% fluent Direction(robot,direction)
%~ From E:
%~ 
%~ fluent( direction(robot,direction))
%~ cpc :- fluents([direction/2])
%~ ooo :- [   cl([fluents([direction/2])],[])]
%~ cpc :- mpred_prop(direction(robot,direction),fluent)
%~ ooo :- [   cl([mpred_prop(direction(robot,direction),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1643).
cl(mpred_prop(direction(robot,direction),fluent),[]),cl(fluents(direction/2),[]).

% fluent Location(robot,coord,coord)
%~ From E:
%~ 
%~ fluent( location(robot,coord,coord))
%~ cpc :- fluents([location/3])
%~ ooo :- [   cl([fluents([location/3])],[])]
%~ cpc :- mpred_prop(location(robot,coord,coord),fluent)
%~ ooo :- [   cl([mpred_prop(location(robot,coord,coord),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1643).
cl(mpred_prop(location(robot,coord,coord),fluent),[]),cl(fluents(location/3),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1646).
% event MoveLeftWheel(robot)
%~ From E:
%~ 
%~ event( moveLeftWheel(robot))
%~ cpc :- events([moveLeftWheel/1])
%~ ooo :- [   cl([events([moveLeftWheel/1])],[])]
%~ cpc :- mpred_prop(moveLeftWheel(robot),event)
%~ ooo :- [   cl([mpred_prop(moveLeftWheel(robot),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1646).
cl(mpred_prop(moveLeftWheel(robot),event),[]),cl(events(moveLeftWheel/1),[]).

% event MoveRightWheel(robot)
%~ From E:
%~ 
%~ event( moveRightWheel(robot))
%~ cpc :- events([moveRightWheel/1])
%~ ooo :- [   cl([events([moveRightWheel/1])],[])]
%~ cpc :- mpred_prop(moveRightWheel(robot),event)
%~ ooo :- [   cl([mpred_prop(moveRightWheel(robot),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1646).
cl(mpred_prop(moveRightWheel(robot),event),[]),cl(events(moveRightWheel/1),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1649).
%; Sigma
% [robot,direction1,direction2,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1-1)->
% Initiates(MoveLeftWheel(robot),Direction(robot,direction2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1651).
%~ From E:
%~ 
%~ ( not( happens(moveRightWheel(Robot),Time))  ,    holds(direction(Robot,Direction1),Time) ,       Direction2 =             Direction1-1) ->         initiates_at(moveLeftWheel(Robot),direction(Robot,Direction2),Time)
%~ cpc :- not( happens(moveRightWheel(Robot),Time))
%~ ooo :- [   cl([],[happens(moveRightWheel(Robot),Time)])]
%~ cpc :- holds(direction(Robot,Direction1),Time)
%~ ooo :- [   cl([holds(direction(Robot,Direction1),Time)],[])]
%~ cpc :- Direction2 =         Direction1-1
%~ ooo :- [   cl([equals(Direction2,Direction1-1)],[])]
%~ cpc :- if(    initiates(moveLeftWheel(Robot),at(direction(Robot,Direction2),Time)),       ( cl([],[happens(moveRightWheel(Robot),Time)])  ,          cl([holds(direction(Robot,Direction1),Time)],[]) ,           cl([equals(Direction2,Direction1-1)],[])))
%~ ooo :- [   cl(    [   if(    initiates(moveLeftWheel(Robot),at(direction(Robot,Direction2),Time)),       ( cl([],[happens(moveRightWheel(Robot),Time)])  ,          cl([holds(direction(Robot,Direction1),Time)],[]) ,           cl([equals(Direction2,Direction1-1)],[])))],       [])]
cl(    (     moveLeftWheel(Robot)initiates direction(Robot,Direction2)at Time if     ( cl([],happens(moveRightWheel(Robot),Time))  ,        cl(holds(direction(Robot,Direction1),Time),[]) ,         cl(equals(Direction2,Direction1-1),[]))),       []).
 %  cl(    if(    initiates(moveLeftWheel(Robot),at(direction(Robot,Direction2),Time)),       ( cl([],happens(moveRightWheel(Robot),Time))  ,          cl(holds(direction(Robot,Direction1),Time),[]) ,           cl(equals(Direction2,Direction1-1),[]))),       []).
 %  % =================================.


% [robot,direction,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveLeftWheel(robot),Direction(robot,direction),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1658).
%~ From E:
%~ 
%~ (     not( happens(moveRightWheel(Robot),Time)) ,     holds(direction(Robot,Direction),Time)) ->         terminates_at(moveLeftWheel(Robot),direction(Robot,Direction),Time)
%~ cpc :- not( happens(moveRightWheel(Robot),Time))
%~ ooo :- [   cl([],[happens(moveRightWheel(Robot),Time)])]
%~ cpc :- holds(direction(Robot,Direction),Time)
%~ ooo :- [   cl([holds(direction(Robot,Direction),Time)],[])]
%~ cpc :- if(    terminates(moveLeftWheel(Robot),at(direction(Robot,Direction),Time)),       (           cl([],[happens(moveRightWheel(Robot),Time)]) ,           cl([holds(direction(Robot,Direction),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates(moveLeftWheel(Robot),at(direction(Robot,Direction),Time)),       (           cl([],[happens(moveRightWheel(Robot),Time)]) ,           cl([holds(direction(Robot,Direction),Time)],[])))],       [])]
cl(    (     moveLeftWheel(Robot)terminates direction(Robot,Direction)at Time if     (         cl([],happens(moveRightWheel(Robot),Time)) ,         cl(holds(direction(Robot,Direction),Time),[]))),       []).
 %  cl(    if(    terminates(moveLeftWheel(Robot),at(direction(Robot,Direction),Time)),       (           cl([],happens(moveRightWheel(Robot),Time)) ,           cl(holds(direction(Robot,Direction),Time),[]))),       []).
 %  % =================================.


% [robot,direction1,direction2,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1+1)->
% Initiates(MoveRightWheel(robot),Direction(robot,direction2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1663).
%~ From E:
%~ 
%~ ( not( happens(moveLeftWheel(Robot),Time))  ,    holds(direction(Robot,Direction1),Time) ,       Direction2 =             Direction1+1) ->         initiates_at(moveRightWheel(Robot),direction(Robot,Direction2),Time)
%~ cpc :- not( happens(moveLeftWheel(Robot),Time))
%~ ooo :- [   cl([],[happens(moveLeftWheel(Robot),Time)])]
%~ cpc :- holds(direction(Robot,Direction1),Time)
%~ ooo :- [   cl([holds(direction(Robot,Direction1),Time)],[])]
%~ cpc :- Direction2 =         Direction1+1
%~ ooo :- [   cl([equals(Direction2,Direction1+1)],[])]
%~ cpc :- if(    initiates(moveRightWheel(Robot),at(direction(Robot,Direction2),Time)),       ( cl([],[happens(moveLeftWheel(Robot),Time)])  ,          cl([holds(direction(Robot,Direction1),Time)],[]) ,           cl([equals(Direction2,Direction1+1)],[])))
%~ ooo :- [   cl(    [   if(    initiates(moveRightWheel(Robot),at(direction(Robot,Direction2),Time)),       ( cl([],[happens(moveLeftWheel(Robot),Time)])  ,          cl([holds(direction(Robot,Direction1),Time)],[]) ,           cl([equals(Direction2,Direction1+1)],[])))],       [])]
cl(    (     moveRightWheel(Robot)initiates direction(Robot,Direction2)at Time if     ( cl([],happens(moveLeftWheel(Robot),Time))  ,        cl(holds(direction(Robot,Direction1),Time),[]) ,         cl(equals(Direction2,Direction1+1),[]))),       []).
 %  cl(    if(    initiates(moveRightWheel(Robot),at(direction(Robot,Direction2),Time)),       ( cl([],happens(moveLeftWheel(Robot),Time))  ,          cl(holds(direction(Robot,Direction1),Time),[]) ,           cl(equals(Direction2,Direction1+1),[]))),       []).
 %  % =================================.


% [robot,direction,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Direction(robot,direction),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1669).
%~ From E:
%~ 
%~ (     not( happens(moveLeftWheel(Robot),Time)) ,     holds(direction(Robot,Direction),Time)) ->         terminates_at(moveRightWheel(Robot),direction(Robot,Direction),Time)
%~ cpc :- not( happens(moveLeftWheel(Robot),Time))
%~ ooo :- [   cl([],[happens(moveLeftWheel(Robot),Time)])]
%~ cpc :- holds(direction(Robot,Direction),Time)
%~ ooo :- [   cl([holds(direction(Robot,Direction),Time)],[])]
%~ cpc :- if(    terminates(moveRightWheel(Robot),at(direction(Robot,Direction),Time)),       (           cl([],[happens(moveLeftWheel(Robot),Time)]) ,           cl([holds(direction(Robot,Direction),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates(moveRightWheel(Robot),at(direction(Robot,Direction),Time)),       (           cl([],[happens(moveLeftWheel(Robot),Time)]) ,           cl([holds(direction(Robot,Direction),Time)],[])))],       [])]
cl(    (     moveRightWheel(Robot)terminates direction(Robot,Direction)at Time if     (         cl([],happens(moveLeftWheel(Robot),Time)) ,         cl(holds(direction(Robot,Direction),Time),[]))),       []).
 %  cl(    if(    terminates(moveRightWheel(Robot),at(direction(Robot,Direction),Time)),       (           cl([],happens(moveLeftWheel(Robot),Time)) ,           cl(holds(direction(Robot,Direction),Time),[]))),       []).
 %  % =================================.


% [robot,direction,coord1,coord2,coord3,coord4,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Direction(robot,direction),time) &
% coord3 = coord1+Cos(direction) &
% coord4 = coord2+Sin(direction) ->
% Initiates(MoveRightWheel(robot),
%           Location(robot,coord3,coord4),
%           time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1674).
%~ From E:
%~ 
%~ ( happens(moveLeftWheel(Robot),Time)  ,    holds(location(Robot,Coord1,Coord2),Time) ,     holds(direction(Robot,Direction),Time) ,       Coord3 =             Coord1+cos(Direction) ,       Coord4 =             Coord2+sin(Direction)) ->         initiates_at( moveRightWheel(Robot),   location(Robot,Coord3,Coord4),     Time)
%~ cpc :- happens(moveLeftWheel(Robot),Time)
%~ ooo :- [   cl([happens(moveLeftWheel(Robot),Time)],[])]
%~ cpc :- holds(location(Robot,Coord1,Coord2),Time)
%~ ooo :- [   cl([holds(location(Robot,Coord1,Coord2),Time)],[])]
%~ cpc :- holds(direction(Robot,Direction),Time)
%~ ooo :- [   cl([holds(direction(Robot,Direction),Time)],[])]
%~ cpc :- Coord3 =         Coord1+cos(Direction)
%~ ooo :- [   cl([equals(Coord3,Coord1+cos(Direction))],[])]
%~ cpc :- Coord4 =         Coord2+sin(Direction)
%~ ooo :- [   cl([equals(Coord4,Coord2+sin(Direction))],[])]
%~ cpc :- if(    initiates( moveRightWheel(Robot),   at(location(Robot,Coord3,Coord4),Time)),       ( cl([happens(moveLeftWheel(Robot),Time)],[])  ,          cl([holds(location(Robot,Coord1,Coord2),Time)],[]) ,           cl([holds(direction(Robot,Direction),Time)],[]) ,           cl([equals(Coord3,Coord1+cos(Direction))],[]) ,           cl([equals(Coord4,Coord2+sin(Direction))],[])))
%~ ooo :- [   cl(    [   if(    initiates( moveRightWheel(Robot),   at(location(Robot,Coord3,Coord4),Time)),       ( cl([happens(moveLeftWheel(Robot),Time)],[])  ,          cl([holds(location(Robot,Coord1,Coord2),Time)],[]) ,           cl([holds(direction(Robot,Direction),Time)],[]) ,           cl([equals(Coord3,Coord1+cos(Direction))],[]) ,           cl([equals(Coord4,Coord2+sin(Direction))],[])))],       [])]
cl(    (     (         moveRightWheel(Robot) initiates         location(Robot,Coord3,Coord4)at Time) if     ( cl(happens(moveLeftWheel(Robot),Time),[])  ,        cl(holds(location(Robot,Coord1,Coord2),Time),[]) ,         cl(holds(direction(Robot,Direction),Time),[]) ,         cl(equals(Coord3,Coord1+cos(Direction)),[]) ,         cl(equals(Coord4,Coord2+sin(Direction)),[]))),       []).
 %  cl(    if(    initiates( moveRightWheel(Robot),   at(location(Robot,Coord3,Coord4),Time)),       ( cl(happens(moveLeftWheel(Robot),Time),[])  ,          cl(holds(location(Robot,Coord1,Coord2),Time),[]) ,           cl(holds(direction(Robot,Direction),Time),[]) ,           cl(equals(Coord3,Coord1+cos(Direction)),[]) ,           cl(equals(Coord4,Coord2+sin(Direction)),[]))),       []).
 %  % =================================.


% [robot,coord1,coord2,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) ->
%; FIX: Direction not needed!!
%; HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Location(robot,coord1,coord2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1684).
%~ From E:
%~ 
%~ (     happens(moveLeftWheel(Robot),Time) ,     holds(location(Robot,Coord1,Coord2),Time)) ->         terminates_at( moveRightWheel(Robot),   location(Robot,Coord1,Coord2),     Time)
%~ cpc :- happens(moveLeftWheel(Robot),Time)
%~ ooo :- [   cl([happens(moveLeftWheel(Robot),Time)],[])]
%~ cpc :- holds(location(Robot,Coord1,Coord2),Time)
%~ ooo :- [   cl([holds(location(Robot,Coord1,Coord2),Time)],[])]
%~ cpc :- if(    terminates( moveRightWheel(Robot),   at(location(Robot,Coord1,Coord2),Time)),       (           cl([happens(moveLeftWheel(Robot),Time)],[]) ,           cl([holds(location(Robot,Coord1,Coord2),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates( moveRightWheel(Robot),   at(location(Robot,Coord1,Coord2),Time)),       (           cl([happens(moveLeftWheel(Robot),Time)],[]) ,           cl([holds(location(Robot,Coord1,Coord2),Time)],[])))],       [])]
cl(    (     (         moveRightWheel(Robot) terminates         location(Robot,Coord1,Coord2)at Time) if     (         cl(happens(moveLeftWheel(Robot),Time),[]) ,         cl(holds(location(Robot,Coord1,Coord2),Time),[]))),       []).
 %  cl(    if(    terminates( moveRightWheel(Robot),   at(location(Robot,Coord1,Coord2),Time)),       (           cl(happens(moveLeftWheel(Robot),Time),[]) ,           cl(holds(location(Robot,Coord1,Coord2),Time),[]))),       []).
 %  % =================================.


%; Delta


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1692).
% Happens(MoveRightWheel(Robot1),0).
%~ From E:
%~ 
%~ happens(moveRightWheel(robot1),0)
observe( moveRightWheel(robot1)at 0).
 %  observe([moveRightWheel(robot1)],0).
 %  % =================================.


% Happens(MoveLeftWheel(Robot1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1692).
%~ From E:
%~ 
%~ happens(moveLeftWheel(robot1),1)
observe( moveLeftWheel(robot1)at 1).
 %  observe([moveLeftWheel(robot1)],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1694).
% Happens(MoveRightWheel(Robot1),1).
%~ From E:
%~ 
%~ happens(moveRightWheel(robot1),1)
observe( moveRightWheel(robot1)at 1).
 %  observe([moveRightWheel(robot1)],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1696).
%; Psi
% [robot,coord1,coord2,coord3,coord4,time]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1700).
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Location(robot,coord3,coord4),time) ->
% coord1=coord3 &
% coord2=coord4.
%~ From E:
%~ 
%~ (     holds(location(Robot,Coord1,Coord2),Time) ,     holds(location(Robot,Coord3,Coord4),Time)) ->         Coord1=Coord3,Coord2=Coord4
%~ cpc :- (     holds(location(Robot,Coord1,Coord2),Time) ,     holds(location(Robot,Coord3,Coord4),Time)) ->         Coord1=Coord3,Coord2=Coord4
%~ ooo :- [   cl(    [   equals(Coord1,Coord3)],       [      holds(location(Robot,Coord1,Coord2),Time),           holds(location(Robot,Coord3,Coord4),Time)]),     cl(      [   equals(Coord2,Coord4)],           [        holds(location(Robot,Coord1,Coord2),Time),               holds(location(Robot,Coord3,Coord4),Time)])]
(     cl( equals(Coord1,Coord3),     (     holds(location(Robot,Coord1,Coord2),Time) ,     holds(location(Robot,Coord3,Coord4),Time))) ,     cl( equals(Coord2,Coord4),     (     holds(location(Robot,Coord1,Coord2),Time) ,     holds(location(Robot,Coord3,Coord4),Time)))).
 %  (     cl( equals(Coord1,Coord3),     (     holds(location(Robot,Coord1,Coord2),Time) ,     holds(location(Robot,Coord3,Coord4),Time))) ,     cl( equals(Coord2,Coord4),     (     holds(location(Robot,Coord1,Coord2),Time) ,     holds(location(Robot,Coord3,Coord4),Time)))).
 %  % =================================.


% [robot,direction1,direction2,time]
% HoldsAt(Direction(robot,direction1),time) &
% HoldsAt(Direction(robot,direction2),time) ->
% direction1=direction2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1706).
%~ From E:
%~ 
%~ (     holds(direction(Robot,Direction1),Time) ,     holds(direction(Robot,Direction2),Time)) ->         Direction1=Direction2
%~ cpc :- (     holds(direction(Robot,Direction1),Time) ,     holds(direction(Robot,Direction2),Time)) ->         Direction1=Direction2
%~ ooo :- [   cl(    [   equals(Direction1,Direction2)],       [      holds(direction(Robot,Direction1),Time),           holds(direction(Robot,Direction2),Time)])]
cl( equals(Direction1,Direction2),   (     holds(direction(Robot,Direction1),Time) ,     holds(direction(Robot,Direction2),Time))).
 %  cl( equals(Direction1,Direction2),   (     holds(direction(Robot,Direction1),Time) ,     holds(direction(Robot,Direction2),Time))).
 %  % =================================.


%; Gamma


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1712).
% HoldsAt(Location(Robot1,0,0),0).
%~ From E:
%~ 
%~ holds(location(robot1,0,0),0)
initially( location(robot1,0,0)).
 %  initial_state([location(robot1,0,0)]).
 %  % =================================.


% HoldsAt(Direction(Robot1,0),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1712).
%~ From E:
%~ 
%~ holds(direction(robot1,0),0)
initially( direction(robot1,0)).
 %  initial_state([direction(robot1,0)]).
 %  % =================================.

% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1714).
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1717).
% range time 0 3
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,3)))
:-( call_pel_directive( range(time,0,3))).

% range coord 0 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1717).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(coord,0,3)))
:-( call_pel_directive( range(coord,0,3))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1719).
% range direction 0 3
%~ From E:
%~ 
%~ :-( call_pel_directive( range(direction,0,3)))
:-( call_pel_directive( range(direction,0,3))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1719).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/PatHeadRubStomach.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1748).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1748).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1751).
% sort agent
%~ From E:
%~ 
%~ sort(agent)
sort(agent).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1753).
% event PatHead(agent)
%~ From E:
%~ 
%~ event( patHead(agent))
%~ cpc :- events([patHead/1])
%~ ooo :- [   cl([events([patHead/1])],[])]
%~ cpc :- actions([patHead/1])
%~ ooo :- [   cl([actions([patHead/1])],[])]
%~ cpc :- mpred_prop(patHead(agent),action)
%~ ooo :- [   cl([mpred_prop(patHead(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1753).
( cl(events(patHead/1),[])  ,    cl(mpred_prop(patHead(agent),action),[]) ,     cl(actions(patHead/1),[])).

% event RubStomach(agent)
%~ From E:
%~ 
%~ event( rubStomach(agent))
%~ cpc :- events([rubStomach/1])
%~ ooo :- [   cl([events([rubStomach/1])],[])]
%~ cpc :- actions([rubStomach/1])
%~ ooo :- [   cl([actions([rubStomach/1])],[])]
%~ cpc :- mpred_prop(rubStomach(agent),action)
%~ ooo :- [   cl([mpred_prop(rubStomach(agent),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1753).
( cl(events(rubStomach/1),[])  ,    cl(mpred_prop(rubStomach(agent),action),[]) ,     cl(actions(rubStomach/1),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1756).
% agent Nathan
%~ From E:
%~ 
%~ t(agent,nathan)
isa(nathan,agent).
%; Delta
% [agent,time]
% Happens(PatHead(agent),time) ->
% !Happens(RubStomach(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1760).
%~ From E:
%~ 
%~ happens(patHead(Agent),Time) ->         not( happens(rubStomach(Agent),Time))
%~ cpc :- happens(patHead(Agent),Time) ->         not( happens(rubStomach(Agent),Time))
%~ ooo :- [   cl( [], [  [   happens(rubStomach(Agent),Time),     happens(patHead(Agent),Time)])]]
cl([],(happens(rubStomach(Agent),Time),happens(patHead(Agent),Time))).
 %  cl([],(happens(rubStomach(Agent),Time),happens(patHead(Agent),Time))).
 %  % =================================.


% Happens(PatHead(Nathan),0) & Happens(RubStomach(Nathan),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1763).
%~ From E:
%~ 
%~ happens(patHead(nathan),0),happens(rubStomach(nathan),0)
%~ cpc :- happens(patHead(nathan),0)
%~ ooo :- [   cl([happens(patHead(nathan),0)],[])]
%~ cpc :- happens(rubStomach(nathan),0)
%~ ooo :- [   cl([happens(rubStomach(nathan),0)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1763).
cl(happens(patHead(nathan),0),[]),cl(happens(rubStomach(nathan),0),[]).

% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1765).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,1)))
:-( call_pel_directive( range(time,0,1))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1767).
% range offset 1 1
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/MovingNewspaperAndBox.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1795).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1795).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1798).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1798).
%~ From E:
%~ 
%~ subsort(agent,object)
subsort(agent,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1800).
% sort physobj: object
%~ From E:
%~ 
%~ subsort(physobj,object)
subsort(physobj,object).

% sort room: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1800).
%~ From E:
%~ 
%~ subsort(room,object)
subsort(room,object).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1803).
% fluent IN(object,object)
%~ From E:
%~ 
%~ fluent( in(object,object))
%~ cpc :- fluents([in/2])
%~ ooo :- [   cl([fluents([in/2])],[])]
%~ cpc :- mpred_prop(in(object,object),fluent)
%~ ooo :- [   cl([mpred_prop(in(object,object),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1803).
cl(mpred_prop(in(object,object),fluent),[]),cl(fluents(in/2),[]).

% fluent INROOM(object,room)
%~ From E:
%~ 
%~ fluent( inroom(object,room))
%~ cpc :- fluents([inroom/2])
%~ ooo :- [   cl([fluents([inroom/2])],[])]
%~ cpc :- mpred_prop(inroom(object,room),fluent)
%~ ooo :- [   cl([mpred_prop(inroom(object,room),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1803).
cl(mpred_prop(inroom(object,room),fluent),[]),cl(fluents(inroom/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1805).
% noninertial INROOM
%~ From E:
%~ 
%~ :-( call_pel_directive( noninertial(inroom)))
:-( call_pel_directive( noninertial(inroom))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1807).
% event MOVE(agent,object,object,object)
%~ From E:
%~ 
%~ event( move(agent,object,object,object))
%~ cpc :- events([move/4])
%~ ooo :- [   cl([events([move/4])],[])]
%~ cpc :- actions([move/4])
%~ ooo :- [   cl([actions([move/4])],[])]
%~ cpc :- mpred_prop(move(agent,object,object,object),action)
%~ ooo :- [   cl([mpred_prop(move(agent,object,object,object),action)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1807).
( cl(events(move/4),[])  ,    cl(mpred_prop(move(agent,object,object,object),action),[]) ,     cl(actions(move/4),[])).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1809).
% agent Lisa
%~ From E:
%~ 
%~ t(agent,lisa)
isa(lisa,agent).

% physobj Box, Newspaper
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1809).
%~ From E:
%~ 
%~ t(physobj,box)
isa(box,physobj).
%~ From E:
%~ 
%~ t(physobj,newspaper)
isa(newspaper,physobj).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1811).
% room Kitchen, LivingRoom
%~ From E:
%~ 
%~ t(room,kitchen)
isa(kitchen,room).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1811).
%~ From E:
%~ 
%~ t(room,livingRoom)
isa(livingRoom,room).
%; Sigma
%; RS10
% [agent,physobj1,physobj2,room,time]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1817).
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Initiates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,physobj2),time).
%~ From E:
%~ 
%~ ( holds(in(Agent,Room),Time)  ,    holds(in(Physobj1,Room),Time) ,     holds(inroom(Physobj2,Room),Time)) ->         initiates_at( move(Agent,Physobj1,Room,Physobj2),   in(Physobj1,Physobj2),     Time)
%~ cpc :- holds(in(Agent,Room),Time)
%~ ooo :- [   cl([holds(in(Agent,Room),Time)],[])]
%~ cpc :- holds(in(Physobj1,Room),Time)
%~ ooo :- [   cl([holds(in(Physobj1,Room),Time)],[])]
%~ cpc :- holds(inroom(Physobj2,Room),Time)
%~ ooo :- [   cl([holds(inroom(Physobj2,Room),Time)],[])]
%~ cpc :- if(    initiates( move(Agent,Physobj1,Room,Physobj2),   at(in(Physobj1,Physobj2),Time)),       ( cl([holds(in(Agent,Room),Time)],[])  ,          cl([holds(in(Physobj1,Room),Time)],[]) ,           cl([holds(inroom(Physobj2,Room),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates( move(Agent,Physobj1,Room,Physobj2),   at(in(Physobj1,Physobj2),Time)),       ( cl([holds(in(Agent,Room),Time)],[])  ,          cl([holds(in(Physobj1,Room),Time)],[]) ,           cl([holds(inroom(Physobj2,Room),Time)],[])))],       [])]
cl(    (     (         move(Agent,Physobj1,Room,Physobj2) initiates         (Physobj1 in Physobj2)at Time) if     ( cl(holds(Agent in Room,Time),[])  ,        cl(holds(Physobj1 in Room,Time),[]) ,         cl(holds(inroom(Physobj2,Room),Time),[]))),       []).
 %  cl(    if(    initiates( move(Agent,Physobj1,Room,Physobj2),   at(in(Physobj1,Physobj2),Time)),       ( cl(holds(in(Agent,Room),Time),[])  ,          cl(holds(in(Physobj1,Room),Time),[]) ,           cl(holds(inroom(Physobj2,Room),Time),[]))),       []).
 %  % =================================.


%; RS11
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Terminates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1823).
%~ From E:
%~ 
%~ ( holds(in(Agent,Room),Time)  ,    holds(in(Physobj1,Room),Time) ,     holds(inroom(Physobj2,Room),Time)) ->         terminates_at( move(Agent,Physobj1,Room,Physobj2),   in(Physobj1,Room),     Time)
%~ cpc :- holds(in(Agent,Room),Time)
%~ ooo :- [   cl([holds(in(Agent,Room),Time)],[])]
%~ cpc :- holds(in(Physobj1,Room),Time)
%~ ooo :- [   cl([holds(in(Physobj1,Room),Time)],[])]
%~ cpc :- holds(inroom(Physobj2,Room),Time)
%~ ooo :- [   cl([holds(inroom(Physobj2,Room),Time)],[])]
%~ cpc :- if(    terminates( move(Agent,Physobj1,Room,Physobj2),   at(in(Physobj1,Room),Time)),       ( cl([holds(in(Agent,Room),Time)],[])  ,          cl([holds(in(Physobj1,Room),Time)],[]) ,           cl([holds(inroom(Physobj2,Room),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates( move(Agent,Physobj1,Room,Physobj2),   at(in(Physobj1,Room),Time)),       ( cl([holds(in(Agent,Room),Time)],[])  ,          cl([holds(in(Physobj1,Room),Time)],[]) ,           cl([holds(inroom(Physobj2,Room),Time)],[])))],       [])]
cl(    (     (         move(Agent,Physobj1,Room,Physobj2) terminates         (Physobj1 in Room)at Time) if     ( cl(holds(Agent in Room,Time),[])  ,        cl(holds(Physobj1 in Room,Time),[]) ,         cl(holds(inroom(Physobj2,Room),Time),[]))),       []).
 %  cl(    if(    terminates( move(Agent,Physobj1,Room,Physobj2),   at(in(Physobj1,Room),Time)),       ( cl(holds(in(Agent,Room),Time),[])  ,          cl(holds(in(Physobj1,Room),Time),[]) ,           cl(holds(inroom(Physobj2,Room),Time),[]))),       []).
 %  % =================================.


%; RS12
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1830).
%~ From E:
%~ 
%~ holds(in(Agent,Room),Time) ->         initiates_at( move(Agent,Physobj1,Physobj2,Room),   in(Physobj1,Room),     Time)
%~ cpc :- holds(in(Agent,Room),Time)
%~ ooo :- [   cl([holds(in(Agent,Room),Time)],[])]
%~ cpc :- if(    initiates( move(Agent,Physobj1,Physobj2,Room),   at(in(Physobj1,Room),Time)),       cl([holds(in(Agent,Room),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates( move(Agent,Physobj1,Physobj2,Room),   at(in(Physobj1,Room),Time)),       cl([holds(in(Agent,Room),Time)],[]))],       [])]
cl(    (     (         move(Agent,Physobj1,Physobj2,Room) initiates         (Physobj1 in Room)at Time) if     cl(holds(Agent in Room,Time),[])),       []).
 %  cl(    if(    initiates( move(Agent,Physobj1,Physobj2,Room),   at(in(Physobj1,Room),Time)),       cl(holds(in(Agent,Room),Time),[])),       []).
 %  % =================================.


%; RS13
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1835).
%~ From E:
%~ 
%~ holds(in(Agent,Room),Time) ->         terminates_at( move(Agent,Physobj1,Physobj2,Room),   in(Physobj1,Physobj2),     Time)
%~ cpc :- holds(in(Agent,Room),Time)
%~ ooo :- [   cl([holds(in(Agent,Room),Time)],[])]
%~ cpc :- if(    terminates( move(Agent,Physobj1,Physobj2,Room),   at(in(Physobj1,Physobj2),Time)),       cl([holds(in(Agent,Room),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates( move(Agent,Physobj1,Physobj2,Room),   at(in(Physobj1,Physobj2),Time)),       cl([holds(in(Agent,Room),Time)],[]))],       [])]
cl(    (     (         move(Agent,Physobj1,Physobj2,Room) terminates         (Physobj1 in Physobj2)at Time) if     cl(holds(Agent in Room,Time),[])),       []).
 %  cl(    if(    terminates( move(Agent,Physobj1,Physobj2,Room),   at(in(Physobj1,Physobj2),Time)),       cl(holds(in(Agent,Room),Time),[])),       []).
 %  % =================================.


%; RS14
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Initiates(MOVE(agent,agent,room1,room2),IN(agent,room2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1840).
%~ From E:
%~ 
%~ holds(in(Agent,Room1),Time) ->         initiates_at( move(Agent,Agent,Room1,Room2),   in(Agent,Room2),     Time)
%~ cpc :- holds(in(Agent,Room1),Time)
%~ ooo :- [   cl([holds(in(Agent,Room1),Time)],[])]
%~ cpc :- if(    initiates( move(Agent,Agent,Room1,Room2),   at(in(Agent,Room2),Time)),       cl([holds(in(Agent,Room1),Time)],[]))
%~ ooo :- [   cl(    [   if(    initiates( move(Agent,Agent,Room1,Room2),   at(in(Agent,Room2),Time)),       cl([holds(in(Agent,Room1),Time)],[]))],       [])]
cl(    (     (         move(Agent,Agent,Room1,Room2) initiates         (Agent in Room2)at Time) if     cl(holds(Agent in Room1,Time),[])),       []).
 %  cl(    if(    initiates( move(Agent,Agent,Room1,Room2),   at(in(Agent,Room2),Time)),       cl(holds(in(Agent,Room1),Time),[])),       []).
 %  % =================================.


%; RS15
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Terminates(MOVE(agent,agent,room1,room2),IN(agent,room1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1845).
%~ From E:
%~ 
%~ holds(in(Agent,Room1),Time) ->         terminates_at( move(Agent,Agent,Room1,Room2),   in(Agent,Room1),     Time)
%~ cpc :- holds(in(Agent,Room1),Time)
%~ ooo :- [   cl([holds(in(Agent,Room1),Time)],[])]
%~ cpc :- if(    terminates( move(Agent,Agent,Room1,Room2),   at(in(Agent,Room1),Time)),       cl([holds(in(Agent,Room1),Time)],[]))
%~ ooo :- [   cl(    [   if(    terminates( move(Agent,Agent,Room1,Room2),   at(in(Agent,Room1),Time)),       cl([holds(in(Agent,Room1),Time)],[]))],       [])]
cl(    (     (         move(Agent,Agent,Room1,Room2) terminates         (Agent in Room1)at Time) if     cl(holds(Agent in Room1,Time),[])),       []).
 %  cl(    if(    terminates( move(Agent,Agent,Room1,Room2),   at(in(Agent,Room1),Time)),       cl(holds(in(Agent,Room1),Time),[])),       []).
 %  % =================================.


%; RS16
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Initiates(MOVE(agent,physobj,room,agent),IN(physobj,agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1850).
%~ From E:
%~ 
%~ (     holds(in(Agent,Room),Time) ,     holds(in(Physobj,Room),Time)) ->         initiates_at( move(Agent,Physobj,Room,Agent),   in(Physobj,Agent),     Time)
%~ cpc :- holds(in(Agent,Room),Time)
%~ ooo :- [   cl([holds(in(Agent,Room),Time)],[])]
%~ cpc :- holds(in(Physobj,Room),Time)
%~ ooo :- [   cl([holds(in(Physobj,Room),Time)],[])]
%~ cpc :- if(    initiates( move(Agent,Physobj,Room,Agent),   at(in(Physobj,Agent),Time)),       (           cl([holds(in(Agent,Room),Time)],[]) ,           cl([holds(in(Physobj,Room),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates( move(Agent,Physobj,Room,Agent),   at(in(Physobj,Agent),Time)),       (           cl([holds(in(Agent,Room),Time)],[]) ,           cl([holds(in(Physobj,Room),Time)],[])))],       [])]
cl(    (     (         move(Agent,Physobj,Room,Agent) initiates         (Physobj in Agent)at Time) if     (         cl(holds(Agent in Room,Time),[]) ,         cl(holds(Physobj in Room,Time),[]))),       []).
 %  cl(    if(    initiates( move(Agent,Physobj,Room,Agent),   at(in(Physobj,Agent),Time)),       (           cl(holds(in(Agent,Room),Time),[]) ,           cl(holds(in(Physobj,Room),Time),[]))),       []).
 %  % =================================.


%; RS17
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Terminates(MOVE(agent,physobj,room,agent),IN(physobj,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1856).
%~ From E:
%~ 
%~ (     holds(in(Agent,Room),Time) ,     holds(in(Physobj,Room),Time)) ->         terminates_at( move(Agent,Physobj,Room,Agent),   in(Physobj,Room),     Time)
%~ cpc :- holds(in(Agent,Room),Time)
%~ ooo :- [   cl([holds(in(Agent,Room),Time)],[])]
%~ cpc :- holds(in(Physobj,Room),Time)
%~ ooo :- [   cl([holds(in(Physobj,Room),Time)],[])]
%~ cpc :- if(    terminates( move(Agent,Physobj,Room,Agent),   at(in(Physobj,Room),Time)),       (           cl([holds(in(Agent,Room),Time)],[]) ,           cl([holds(in(Physobj,Room),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates( move(Agent,Physobj,Room,Agent),   at(in(Physobj,Room),Time)),       (           cl([holds(in(Agent,Room),Time)],[]) ,           cl([holds(in(Physobj,Room),Time)],[])))],       [])]
cl(    (     (         move(Agent,Physobj,Room,Agent) terminates         (Physobj in Room)at Time) if     (         cl(holds(Agent in Room,Time),[]) ,         cl(holds(Physobj in Room,Time),[]))),       []).
 %  cl(    if(    terminates( move(Agent,Physobj,Room,Agent),   at(in(Physobj,Room),Time)),       (           cl(holds(in(Agent,Room),Time),[]) ,           cl(holds(in(Physobj,Room),Time),[]))),       []).
 %  % =================================.


%; RS18
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj,agent,room),IN(physobj,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1862).
%~ From E:
%~ 
%~ (     holds(in(Physobj,Agent),Time) ,     holds(in(Agent,Room),Time)) ->         initiates_at( move(Agent,Physobj,Agent,Room),   in(Physobj,Room),     Time)
%~ cpc :- holds(in(Physobj,Agent),Time)
%~ ooo :- [   cl([holds(in(Physobj,Agent),Time)],[])]
%~ cpc :- holds(in(Agent,Room),Time)
%~ ooo :- [   cl([holds(in(Agent,Room),Time)],[])]
%~ cpc :- if(    initiates( move(Agent,Physobj,Agent,Room),   at(in(Physobj,Room),Time)),       (           cl([holds(in(Physobj,Agent),Time)],[]) ,           cl([holds(in(Agent,Room),Time)],[])))
%~ ooo :- [   cl(    [   if(    initiates( move(Agent,Physobj,Agent,Room),   at(in(Physobj,Room),Time)),       (           cl([holds(in(Physobj,Agent),Time)],[]) ,           cl([holds(in(Agent,Room),Time)],[])))],       [])]
cl(    (     (         move(Agent,Physobj,Agent,Room) initiates         (Physobj in Room)at Time) if     (         cl(holds(Physobj in Agent,Time),[]) ,         cl(holds(Agent in Room,Time),[]))),       []).
 %  cl(    if(    initiates( move(Agent,Physobj,Agent,Room),   at(in(Physobj,Room),Time)),       (           cl(holds(in(Physobj,Agent),Time),[]) ,           cl(holds(in(Agent,Room),Time),[]))),       []).
 %  % =================================.


%; RS19
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj,agent,room),IN(physobj,agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1868).
%~ From E:
%~ 
%~ (     holds(in(Physobj,Agent),Time) ,     holds(in(Agent,Room),Time)) ->         terminates_at( move(Agent,Physobj,Agent,Room),   in(Physobj,Agent),     Time)
%~ cpc :- holds(in(Physobj,Agent),Time)
%~ ooo :- [   cl([holds(in(Physobj,Agent),Time)],[])]
%~ cpc :- holds(in(Agent,Room),Time)
%~ ooo :- [   cl([holds(in(Agent,Room),Time)],[])]
%~ cpc :- if(    terminates( move(Agent,Physobj,Agent,Room),   at(in(Physobj,Agent),Time)),       (           cl([holds(in(Physobj,Agent),Time)],[]) ,           cl([holds(in(Agent,Room),Time)],[])))
%~ ooo :- [   cl(    [   if(    terminates( move(Agent,Physobj,Agent,Room),   at(in(Physobj,Agent),Time)),       (           cl([holds(in(Physobj,Agent),Time)],[]) ,           cl([holds(in(Agent,Room),Time)],[])))],       [])]
cl(    (     (         move(Agent,Physobj,Agent,Room) terminates         (Physobj in Agent)at Time) if     (         cl(holds(Physobj in Agent,Time),[]) ,         cl(holds(Agent in Room,Time),[]))),       []).
 %  cl(    if(    terminates( move(Agent,Physobj,Agent,Room),   at(in(Physobj,Agent),Time)),       (           cl(holds(in(Physobj,Agent),Time),[]) ,           cl(holds(in(Agent,Room),Time),[]))),       []).
 %  % =================================.


%; Delta


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1875).
% Happens(MOVE(Lisa,Newspaper,LivingRoom,Box),0).
%~ From E:
%~ 
%~ happens(move(lisa,newspaper,livingRoom,box),0)
observe( move(lisa,newspaper,livingRoom,box)at 0).
 %  observe([move(lisa,newspaper,livingRoom,box)],0).
 %  % =================================.


% Happens(MOVE(Lisa,Box,LivingRoom,Lisa),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1875).
%~ From E:
%~ 
%~ happens(move(lisa,box,livingRoom,lisa),1)
observe( move(lisa,box,livingRoom,lisa)at 1).
 %  observe([move(lisa,box,livingRoom,lisa)],1).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1877).
% Happens(MOVE(Lisa,Lisa,LivingRoom,Kitchen),2).
%~ From E:
%~ 
%~ happens(move(lisa,lisa,livingRoom,kitchen),2)
observe( move(lisa,lisa,livingRoom,kitchen)at 2).
 %  observe([move(lisa,lisa,livingRoom,kitchen)],2).
 %  % =================================.


% Happens(MOVE(Lisa,Box,Lisa,Kitchen),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1877).
%~ From E:
%~ 
%~ happens(move(lisa,box,lisa,kitchen),3)
observe( move(lisa,box,lisa,kitchen)at 3).
 %  observe([move(lisa,box,lisa,kitchen)],3).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1879).
% Happens(MOVE(Lisa,Lisa,Kitchen,LivingRoom),4).
%~ From E:
%~ 
%~ happens(move(lisa,lisa,kitchen,livingRoom),4)
observe( move(lisa,lisa,kitchen,livingRoom)at 4).
 %  observe([move(lisa,lisa,kitchen,livingRoom)],4).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1881).
%; Psi
%; RS1
% [object,time]
 % !HoldsAt(IN(object,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1883).
%~ From E:
%~ 
%~ holds(not(in(Object,Object)),Time)
%~ cpc :- holds(not(in(Object,Object)),Time)
%~ ooo :- [   cl([],[holds(in(Object,Object),Time)])]
cl([],holds(Object in Object,Time)).
 %  cl([],holds(in(Object,Object),Time)).
 %  % =================================.


%; RS2
% [object1,object2,time]
% HoldsAt(IN(object1,object2),time) ->
% !HoldsAt(IN(object2,object1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1887).
%~ From E:
%~ 
%~ holds(in(Object1,Object2),Time) ->         holds(not(in(Object2,Object1)),Time)
%~ cpc :- holds(in(Object1,Object2),Time) ->         holds(not(in(Object2,Object1)),Time)
%~ ooo :- [   cl( [], [  [   holds(in(Object2,Object1),Time),     holds(in(Object1,Object2),Time)])]]
cl( [],   (     holds(Object2 in Object1,Time) ,     holds(Object1 in Object2,Time))).
 %  cl( [],   (     holds(in(Object2,Object1),Time) ,     holds(in(Object1,Object2),Time))).
 %  % =================================.


%; RS3
% [object1,object2,object3,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(IN(object2,object3),time) ->
% !HoldsAt(IN(object1,object3),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1892).
%~ From E:
%~ 
%~ (     holds(in(Object1,Object2),Time) ,     holds(in(Object2,Object3),Time)) ->         holds(not(in(Object1,Object3)),Time)
%~ cpc :- (     holds(in(Object1,Object2),Time) ,     holds(in(Object2,Object3),Time)) ->         holds(not(in(Object1,Object3)),Time)
%~ ooo :- [   cl( [], [  [   holds(in(Object1,Object3),Time),     holds(in(Object1,Object2),Time),     holds(in(Object2,Object3),Time)])]]
cl( [],   ( holds(Object1 in Object3,Time)  ,    holds(Object1 in Object2,Time) ,     holds(Object2 in Object3,Time))).
 %  cl( [],   ( holds(in(Object1,Object3),Time)  ,    holds(in(Object1,Object2),Time) ,     holds(in(Object2,Object3),Time))).
 %  % =================================.


%; RS4
% [object,object1,object2,time]
% HoldsAt(IN(object,object1),time) &
% HoldsAt(IN(object,object2),time) ->
% object1=object2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1898).
%~ From E:
%~ 
%~ (     holds(in(Object,Object1),Time) ,     holds(in(Object,Object2),Time)) ->         Object1=Object2
%~ cpc :- (     holds(in(Object,Object1),Time) ,     holds(in(Object,Object2),Time)) ->         Object1=Object2
%~ ooo :- [   cl(    [   equals(Object1,Object2)],       [      holds(in(Object,Object1),Time),           holds(in(Object,Object2),Time)])]
cl( equals(Object1,Object2),   (     holds(Object in Object1,Time) ,     holds(Object in Object2,Time))).
 %  cl( equals(Object1,Object2),   (     holds(in(Object,Object1),Time) ,     holds(in(Object,Object2),Time))).
 %  % =================================.


%; RS7
% [object,room,time]
% HoldsAt(IN(object,room),time) ->
% HoldsAt(INROOM(object,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1904).
%~ From E:
%~ 
%~ holds(in(Object,Room),Time) ->         holds(inroom(Object,Room),Time)
%~ cpc :- holds(in(Object,Room),Time) ->         holds(inroom(Object,Room),Time)
%~ ooo :- [   cl(    [   holds(inroom(Object,Room),Time)],       [      holds(in(Object,Room),Time)])]
cl(    holds(inroom(Object,Room),Time),       holds(Object in Room,Time)).
 %  cl(    holds(inroom(Object,Room),Time),       holds(in(Object,Room),Time)).
 %  % =================================.


%; RS8
% [object1,object2,room,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(INROOM(object2,room),time) ->
% HoldsAt(INROOM(object1,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1909).
%~ From E:
%~ 
%~ (     holds(in(Object1,Object2),Time) ,     holds(inroom(Object2,Room),Time)) ->         holds(inroom(Object1,Room),Time)
%~ cpc :- (     holds(in(Object1,Object2),Time) ,     holds(inroom(Object2,Room),Time)) ->         holds(inroom(Object1,Room),Time)
%~ ooo :- [   cl(    [   holds(inroom(Object1,Room),Time)],       [      holds(in(Object1,Object2),Time),           holds(inroom(Object2,Room),Time)])]
cl(    holds(inroom(Object1,Room),Time),       (           holds(Object1 in Object2,Time) ,           holds(inroom(Object2,Room),Time))).
 %  cl(    holds(inroom(Object1,Room),Time),       (           holds(in(Object1,Object2),Time) ,           holds(inroom(Object2,Room),Time))).
 %  % =================================.


%; RS9
% [object,room1,room2,time]
% HoldsAt(INROOM(object,room1),time) &
% HoldsAt(INROOM(object,room2),time) ->
% room1=room2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1915).
%~ From E:
%~ 
%~ (     holds(inroom(Object,Room1),Time) ,     holds(inroom(Object,Room2),Time)) ->         Room1=Room2
%~ cpc :- (     holds(inroom(Object,Room1),Time) ,     holds(inroom(Object,Room2),Time)) ->         Room1=Room2
%~ ooo :- [   cl(    [   equals(Room1,Room2)],       [      holds(inroom(Object,Room1),Time),           holds(inroom(Object,Room2),Time)])]
cl( equals(Room1,Room2),   (     holds(inroom(Object,Room1),Time) ,     holds(inroom(Object,Room2),Time))).
 %  cl( equals(Room1,Room2),   (     holds(inroom(Object,Room1),Time) ,     holds(inroom(Object,Room2),Time))).
 %  % =================================.


%; Gamma


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1922).
% HoldsAt(IN(Lisa,LivingRoom),0).
%~ From E:
%~ 
%~ holds(in(lisa,livingRoom),0)
initially( lisa in livingRoom).
 %  initial_state([in(lisa,livingRoom)]).
 %  % =================================.


% HoldsAt(IN(Newspaper,LivingRoom),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1922).
%~ From E:
%~ 
%~ holds(in(newspaper,livingRoom),0)
initially( newspaper in livingRoom).
 %  initial_state([in(newspaper,livingRoom)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1924).
% HoldsAt(IN(Box,LivingRoom),0).
%~ From E:
%~ 
%~ holds(in(box,livingRoom),0)
initially( box in livingRoom).
 %  initial_state([in(box,livingRoom)]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1926).
%; added:
% [room1,room2,time]
 % !HoldsAt(INROOM(room1,room2),time).
%~ From E:
%~ 
%~ holds(not(inroom(Room1,Room2)),Time)
%~ cpc :- holds(not(inroom(Room1,Room2)),Time)
%~ ooo :- [   cl([],[holds(inroom(Room1,Room2),Time)])]
cl([],holds(inroom(Room1,Room2),Time)).
 %  cl([],holds(inroom(Room1,Room2),Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1928).
% [room,object,time]
 % !HoldsAt(IN(room,object),time).
%~ From E:
%~ 
%~ holds(not(in(Room,Object)),Time)
%~ cpc :- holds(not(in(Room,Object)),Time)
%~ ooo :- [   cl([],[holds(in(Room,Object),Time)])]
cl([],holds(Room in Object,Time)).
 %  cl([],holds(in(Room,Object),Time)).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1930).
%; entailed:
%; HoldsAt(IN(Lisa,LivingRoom),5).
%; HoldsAt(IN(Box,Kitchen),5).
%; HoldsAt(INROOM(Newspaper,Kitchen),5).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1935).
% completion Happens
%~ From E:
%~ 
%~ :-( call_pel_directive( completion(happens)))
:-( call_pel_directive( completion(happens))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1937).
% range time 0 5
%~ From E:
%~ 
%~ :-( call_pel_directive( range(time,0,5)))
:-( call_pel_directive( range(time,0,5))).

% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1937).
%~ From E:
%~ 
%~ :-( call_pel_directive( range(offset,1,1)))
:-( call_pel_directive( range(offset,1,1))).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1974).
% load foundations/Root.e
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/Root.e')))
:-( call_pel_directive( load('foundations/Root.e'))).

% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1974).
%~ From E:
%~ 
%~ :-( call_pel_directive( load('foundations/EC.e')))
:-( call_pel_directive( load('foundations/EC.e'))).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1977).
% sort object
%~ From E:
%~ 
%~ sort(object)
sort(object).

% sort location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1977).
%~ From E:
%~ 
%~ sort(location)
sort(location).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1980).
% object O1, O2
%~ From E:
%~ 
%~ t(object,o1)
isa(o1,object).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1980).
%~ From E:
%~ 
%~ t(object,o2)
isa(o2,object).

% location L1, L2, L3, L4, L5
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1980).
%~ From E:
%~ 
%~ t(location,l1)
isa(l1,location).
%~ From E:
%~ 
%~ t(location,l2)
isa(l2,location).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1980).
%~ From E:
%~ 
%~ t(location,l3)
isa(l3,location).
%~ From E:
%~ 
%~ t(location,l4)
isa(l4,location).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1980).
%~ From E:
%~ 
%~ t(location,l5)
isa(l5,location).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1983).
% predicate Adjacent(location,location)
%~ From E:
%~ 
%~ predicate( adjacent(location,location))
%~ cpc :- predicates([adjacent/2])
%~ ooo :- [   cl([predicates([adjacent/2])],[])]
%~ cpc :- mpred_prop(adjacent(location,location),predicate)
%~ ooo :- [   cl([mpred_prop(adjacent(location,location),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1983).
cl(mpred_prop(adjacent(location,location),predicate),[]),cl(predicates(adjacent/2),[]).

% predicate Equal(object,object)
%~ From E:
%~ 
%~ predicate( equal(object,object))
%~ cpc :- predicates([equal/2])
%~ ooo :- [   cl([predicates([equal/2])],[])]
%~ cpc :- mpred_prop(equal(object,object),predicate)
%~ ooo :- [   cl([mpred_prop(equal(object,object),predicate)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1983).
cl(mpred_prop(equal(object,object),predicate),[]),cl(predicates(equal/2),[]).

:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1986).
% fluent At(object,location)
%~ From E:
%~ 
%~ fluent( at_loc(object,location))
%~ cpc :- fluents([at_loc/2])
%~ ooo :- [   cl([fluents([at_loc/2])],[])]
%~ cpc :- mpred_prop(at_loc(object,location),fluent)
%~ ooo :- [   cl([mpred_prop(at_loc(object,location),fluent)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1986).
cl(mpred_prop(at_loc(object,location),fluent),[]),cl(fluents(at_loc/2),[]).

% event Move(object,location,location)
%~ From E:
%~ 
%~ event( move(object,location,location))
%~ cpc :- events([move/3])
%~ ooo :- [   cl([events([move/3])],[])]
%~ cpc :- mpred_prop(move(object,location,location),event)
%~ ooo :- [   cl([mpred_prop(move(object,location,location),event)],[])]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1986).
cl(mpred_prop(move(object,location,location),event),[]),cl(events(move/3),[]).


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1989).
%; Sigma
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1991).
%~ From E:
%~ 
%~ (     holds(at_loc(Object,Location1),Time) ,     adjacent(Location1,Location2)) ->         initiates_at( move(Object,Location1,Location2),   at_loc(Object,Location2),     Time)
%~ cpc :- holds(at_loc(Object,Location1),Time)
%~ ooo :- [   cl([holds(at_loc(Object,Location1),Time)],[])]
%~ cpc :- adjacent(Location1,Location2)
%~ ooo :- [   cl([adjacent(Location1,Location2)],[])]
%~ cpc :- if(    initiates( move(Object,Location1,Location2),   at(at_loc(Object,Location2),Time)),       (           cl([holds(at_loc(Object,Location1),Time)],[]) ,           cl([adjacent(Location1,Location2)],[])))
%~ ooo :- [   cl(    [   if(    initiates( move(Object,Location1,Location2),   at(at_loc(Object,Location2),Time)),       (           cl([holds(at_loc(Object,Location1),Time)],[]) ,           cl([adjacent(Location1,Location2)],[])))],       [])]
cl(    (     (         move(Object,Location1,Location2) initiates         at_loc(Object,Location2)at Time) if     (         cl(holds(at_loc(Object,Location1),Time),[]) ,         cl(adjacent(Location1,Location2),[]))),       []).
 %  cl(    if(    initiates( move(Object,Location1,Location2),   at(at_loc(Object,Location2),Time)),       (           cl(holds(at_loc(Object,Location1),Time),[]) ,           cl(adjacent(Location1,Location2),[]))),       []).
 %  % =================================.


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1997).
%~ From E:
%~ 
%~ (     holds(at_loc(Object,Location1),Time) ,     adjacent(Location1,Location2)) ->         terminates_at( move(Object,Location1,Location2),   at_loc(Object,Location1),     Time)
%~ cpc :- holds(at_loc(Object,Location1),Time)
%~ ooo :- [   cl([holds(at_loc(Object,Location1),Time)],[])]
%~ cpc :- adjacent(Location1,Location2)
%~ ooo :- [   cl([adjacent(Location1,Location2)],[])]
%~ cpc :- if(    terminates( move(Object,Location1,Location2),   at(at_loc(Object,Location1),Time)),       (           cl([holds(at_loc(Object,Location1),Time)],[]) ,           cl([adjacent(Location1,Location2)],[])))
%~ ooo :- [   cl(    [   if(    terminates( move(Object,Location1,Location2),   at(at_loc(Object,Location1),Time)),       (           cl([holds(at_loc(Object,Location1),Time)],[]) ,           cl([adjacent(Location1,Location2)],[])))],       [])]
cl(    (     (         move(Object,Location1,Location2) terminates         at_loc(Object,Location1)at Time) if     (         cl(holds(at_loc(Object,Location1),Time),[]) ,         cl(adjacent(Location1,Location2),[]))),       []).
 %  cl(    if(    terminates( move(Object,Location1,Location2),   at(at_loc(Object,Location1),Time)),       (           cl(holds(at_loc(Object,Location1),Time),[]) ,           cl(adjacent(Location1,Location2),[]))),       []).
 %  % =================================.


%; Psi
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2003).
%~ From E:
%~ 
%~ (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time)) ->         Location1=Location2
%~ cpc :- (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time)) ->         Location1=Location2
%~ ooo :- [   cl(    [   equals(Location1,Location2)],       [      holds(at_loc(Object,Location1),Time),           holds(at_loc(Object,Location2),Time)])]
cl( equals(Location1,Location2),   (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time))).
 %  cl( equals(Location1,Location2),   (     holds(at_loc(Object,Location1),Time) ,     holds(at_loc(Object,Location2),Time))).
 %  % =================================.


% [object,time]
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2009).
% {location} % HoldsAt(At(object,location),time).
%~ From E:
%~ 
%~ exists(Location,holds(at_loc(Object,Location),Time))
%~ cpc :- exists(Location,holds(at_loc(Object,Location),Time))
%~ ooo :- [   cl([exists(Location,holds(at_loc(Object,Location),Time))],[])]
cl(exists(Location,holds(at_loc(Object,Location),Time)),[]).
 %  cl(exists(Location,holds(at_loc(Object,Location),Time)),[]).
 %  % =================================.


:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2011).
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).
%~ From E:
%~ 
%~ (     holds(at_loc(Object1,Location),Time) ,     holds(at_loc(Object2,Location),Time)) ->         equal(Object1,Object2)
%~ cpc :- (     holds(at_loc(Object1,Location),Time) ,     holds(at_loc(Object2,Location),Time)) ->         equal(Object1,Object2)
%~ ooo :- [   cl(    [   equal(Object1,Object2)],       [      holds(at_loc(Object1,Location),Time),           holds(at_loc(Object2,Location),Time)])]
cl( equal(Object1,Object2),   (     holds(at_loc(Object1,Location),Time) ,     holds(at_loc(Object2,Location),Time))).
 %  cl( equal(Object1,Object2),   (     holds(at_loc(Object1,Location),Time) ,     holds(at_loc(Object2,Location),Time))).
 %  % =================================.


% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2017).
%~ From E:
%~ 
%~ <->(adjacent(Location1,Location2),adjacent(Location2,Location1))
%~ cpc :- <->(adjacent(Location1,Location2),adjacent(Location2,Location1))
%~ ooo :- [   cl(    [   adjacent(Location2,Location1)],       [      adjacent(Location1,Location2)]),     cl(      [   adjacent(Location1,Location2)],           [        adjacent(Location2,Location1)])]
(     cl(adjacent(Location2,Location1),adjacent(Location1,Location2)) ,     cl(adjacent(Location1,Location2),adjacent(Location2,Location1))).
 %  (     cl(adjacent(Location2,Location1),adjacent(Location1,Location2)) ,     cl(adjacent(Location1,Location2),adjacent(Location2,Location1))).
 %  % =================================.


% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2021).
%~ From E:
%~ 
%~ <->(equal(Object1,Object2),equal(Object2,Object1))
%~ cpc :- <->(equal(Object1,Object2),equal(Object2,Object1))
%~ ooo :- [   cl([equal(Object2,Object1)],[equal(Object1,Object2)]),     cl([equal(Object1,Object2)],[equal(Object2,Object1)])]
(     cl(equal(Object2,Object1),equal(Object1,Object2)) ,     cl(equal(Object1,Object2),equal(Object2,Object1))).
 %  (     cl(equal(Object2,Object1),equal(Object1,Object2)) ,     cl(equal(Object1,Object2),equal(Object2,Object1))).
 %  % =================================.


%; Gamma
% [location1,location2]
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2) |
% (location1=L3 & location2=L4) |
% (location1=L4 & location2=L3) |
% (location1=L4 & location2=L5) |
% (location1=L5 & location2=L4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2026).
%~ From E:
%~ 
%~ (     adjacent(Location1,Location2) <->     ( Location1=l1,Location2=l2  ;        Location1=l2,Location2=l1 ;         Location1=l2,Location2=l3 ;         Location1=l3,Location2=l2 ;         Location1=l3,Location2=l4 ;         Location1=l4,Location2=l3 ;         Location1=l4,Location2=l5 ;         Location1=l5,Location2=l4))
%~ cpc :- (     adjacent(Location1,Location2) <->     ( Location1=l1,Location2=l2  ;        Location1=l2,Location2=l1 ;         Location1=l2,Location2=l3 ;         Location1=l3,Location2=l2 ;         Location1=l3,Location2=l4 ;         Location1=l4,Location2=l3 ;         Location1=l4,Location2=l5 ;         Location1=l5,Location2=l4))
%~ ooo :- [   cl(    [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],       [      adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location1,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location1,l1),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l2),     equals(Location2,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location1,l2),     equals(Location2,l3),     equals(Location2,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location1,l2),     equals(Location2,l4),     equals(Location2,l3),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location1,l4),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l5),     equals(Location2,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location1,l3),     equals(Location2,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l4),     equals(Location1,l4)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l4),     equals(Location1,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l4),     equals(Location2,l5),     equals(Location1,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   equals(Location2,l2),     equals(Location2,l1),     equals(Location2,l3),     equals(Location2,l4),     equals(Location2,l5)],           [        adjacent(Location1,Location2)]),     cl(      [   adjacent(Location1,Location2)],           [        equals(Location1,l1),               equals(Location2,l2)]),     cl(      [   adjacent(Location1,Location2)],           [        equals(Location1,l2),               equals(Location2,l1)]),     cl(      [   adjacent(Location1,Location2)],           [        equals(Location1,l2),               equals(Location2,l3)]),     cl(      [   adjacent(Location1,Location2)],           [        equals(Location1,l3),               equals(Location2,l2)]),     cl(      [   adjacent(Location1,Location2)],           [        equals(Location1,l3),               equals(Location2,l4)]),     cl(      [   adjacent(Location1,Location2)],           [        equals(Location1,l4),               equals(Location2,l3)]),     cl(      [   adjacent(Location1,Location2)],           [        equals(Location1,l4),               equals(Location2,l5)]),     cl(      [   adjacent(Location1,Location2)],           [        equals(Location1,l5),               equals(Location2,l4)])]
